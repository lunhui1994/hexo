<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS揭秘：6.复杂的背景图案（上）</title>
      <link href="/Css/CSS%E6%8F%AD%E7%A7%98%EF%BC%9A6.%E5%A4%8D%E6%9D%82%E7%9A%84%E8%83%8C%E6%99%AF%E5%9B%BE%E6%A1%88%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/Css/CSS%E6%8F%AD%E7%A7%98%EF%BC%9A6.%E5%A4%8D%E6%9D%82%E7%9A%84%E8%83%8C%E6%99%AF%E5%9B%BE%E6%A1%88%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="复杂的背景图案"><a href="#复杂的背景图案" class="headerlink" title="复杂的背景图案"></a>复杂的背景图案</h1><p>上一篇文章中我们学会了如何使用渐变实现条纹状的背景，但是实际上条纹背景并不是我们能实现的唯一的背景图案，利用渐变我们可以实现很多更为复杂的图案，本篇会介绍一些其他的简单而实用的背景图案。</p><a id="more"></a><font color="#999AAA"></font><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1""># 一、网格<font color="#999AAA">网格的原理其实很简单，目前我们已经实现了条纹背景，那么如果我们将条纹背景组合呢？互相穿插组合，那么是不是很简单就实现了各种各样的网格背景。## 1. 实色网格<font color="#999AAA">代码如下：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: 200<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">height</span>: 200<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>:</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(<span class="selector-tag">rgba</span>(255,187,51, <span class="selector-class">.5</span>) 33%, <span class="selector-tag">rgba</span>(85,136,170, <span class="selector-class">.5</span>) 0, <span class="selector-tag">rgba</span>(85,136,170, <span class="selector-class">.5</span>) 66%, <span class="selector-tag">rgba</span>(173,255,47, <span class="selector-class">.5</span>) 0),</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>, <span class="selector-tag">rgba</span>(255,187,51,1) 33%, <span class="selector-tag">rgba</span>(85,136,170, 1) 0, <span class="selector-tag">rgba</span>(85,136,170, 1) 66%, <span class="selector-tag">rgba</span>(173,255,47, <span class="selector-class">.5</span>) 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 60<span class="selector-tag">px</span> 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><font color="#999AAA">实际效果。![在这里插入图片描述](https://img-blog.csdnimg.cn/20200918100511610.png#pic_center)## 2. 边框网格实现类似边框网格的效果，我们只需要将实色的网格色块改变成一条边框就可以了。方法为在渐变中设置一条**1px**长度的颜色，然后剩下的颜色为**透明色**（或者其他底色）。<font color="#999AAA">代码如下：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: 201<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">height</span>: 201<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>:</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(<span class="selector-tag">rgba</span>(255,187,51, <span class="selector-class">.5</span>) 1<span class="selector-tag">px</span>, <span class="selector-tag">transparent</span> 0),</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>,<span class="selector-tag">rgba</span>(255,187,51, <span class="selector-class">.5</span>) 1<span class="selector-tag">px</span>, <span class="selector-tag">transparent</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 20<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><font color="#999AAA">实际效果。![在这里插入图片描述](https://img-blog.csdnimg.cn/20200918102106767.png#pic_center)我们可以通过调整**background-size**来调整**网格**的大小。**注意**：整个图片的大小为**201x201**，由于我们设置的其实是**左边和上边**，所以同一个单位背景内只有上边和左边，没有下边和右边。所以如果设置总长为200px时，右边和下边会看不到边框。所以我们**长宽各 + 1**，以下一个背景的左上作为我们的右下边框。## 3. 波点除了实现类似格子一样的背景，我们还可以实现波点背景样式，这时我们就需要用到另外一个渐变：**径向渐变（radial-gradient）**，和线性渐变类似，效果是从背景中心点出发，向外渐变。<font color="#999AAA">代码如下：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">radial-gradient</span>(<span class="selector-tag">green</span> 3<span class="selector-tag">px</span>, <span class="selector-tag">yellowgreen</span> 0, <span class="selector-tag">yellowgreen</span> 6<span class="selector-tag">px</span>, <span class="selector-tag">transparent</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 20<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><font color="#999AAA">实际效果。![在这里插入图片描述](https://img-blog.csdnimg.cn/20200921085836761.png#pic_center)我们可以通过调整**background-size**来调整**波点密度**。**注意**：使用background-size调整波点背景的单个背景大小，调整的视觉效果是波点的密度大小，有时候会呈现出不一样效果和图案，比如当我们的波点连接起来的时候，我们的图案就变成了一个个菱形。<font color="#999AAA">实际效果。![在这里插入图片描述](https://img-blog.csdnimg.cn/20200921090246511.png#pic_center)<font color="#999AAA">以上效果只需要将background-size调整为12px，即背景尺寸 = 波点直径。<hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1""><h2 id="4-棋盘"><a href="#4-棋盘" class="headerlink" title="4. 棋盘"></a>4. 棋盘</h2><p><img src="https://img-blog.csdnimg.cn/2020092109251135.png#pic_center" alt="在这里插入图片描述"></p><p>棋牌有点类似于我们在第一步做到的实色网格，不同的是棋盘是由一个实色和一个透明所组成的图案。所以，看似和实色网格类似，但是实现起来无法使用跟实色网格相同的实现方法（不信邪的话可以使尝试一下），那么我们如何实现棋牌类型的图案呢？也不难，我们使用直角三角形进行拼接。还得我们在实现斜向条纹时做的尝试吗？<a href="https://blog.csdn.net/lunhui1994_/article/details/106933714" target="_blank" rel="noopener">CSS揭秘：5.条纹背景（上）</a></p><p><font color="#999AAA">代码如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#eee</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#bbb</span> 50%, <span class="selector-tag">transparent</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 30<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></font></p><p><font color="#999AAA">实际效果。<br><img src="https://img-blog.csdnimg.cn/20200921092328712.png#pic_center" alt="在这里插入图片描述"></font></p><ol><li>从刚开始的展示图案可以看出来，我们的正方形色块只是对角线的一半，那么我们的一个三角形就是1/4了，所以我们改造一下</li></ol><p><font color="#999AAA">代码如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#eee</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#bbb</span> 25%, <span class="selector-tag">transparent</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 40<span class="selector-tag">px</span> 40<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></font></p><p><font color="#999AAA">实际效果。<br><img src="https://img-blog.csdnimg.cn/20200921092909744.png#pic_center" alt="在这里插入图片描述"></font></p><ol start="2"><li>现在我们得到一半的三角形，那么拼一个正方形还需要一个相反方向的三角形，我们再来一个背景<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: </span><br><span class="line"><span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#bbb</span> 25%, <span class="selector-tag">transparent</span> 0),</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-tag">transparent</span> 75%, <span class="selector-id">#bbb</span> 0);</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://img-blog.csdnimg.cn/20200921092709910.png#pic_center" alt="在这里插入图片描述"></p><ol start="3"><li>到此我们得到了两个直角三角形，那么如何拼接成一个正方形呢？使用<strong>background-position</strong>调整直角三角形的位置即可。把右上角显示三角形的背景 向下 向左移动就阔以了<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#eee</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>: </span><br><span class="line"><span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#bbb</span> 25%, <span class="selector-tag">transparent</span> 0),</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-tag">transparent</span> 75%, <span class="selector-id">#bbb</span> 0);</span><br><span class="line"><span class="selector-tag">background-position</span>: 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span>, <span class="selector-tag">-20px</span> 20<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background-size</span>: 40<span class="selector-tag">px</span> 40<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></li></ol><p><font color="#999AAA">实际效果。<br><img src="https://img-blog.csdnimg.cn/20200921094902113.png#pic_center" alt="在这里插入图片描述"><br>那么搞定了一个再搞定另外一个就很简单了。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#eee</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#eee</span>;<span class="selector-tag">background-image</span>:    </span><br><span class="line"><span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#bbb</span> 25%, <span class="selector-tag">transparent</span> 0),    </span><br><span class="line"><span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-tag">transparent</span> 75%, <span class="selector-id">#bbb</span> 0),    </span><br><span class="line"><span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#bbb</span> 25%, <span class="selector-tag">transparent</span> 0),    </span><br><span class="line"><span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-tag">transparent</span> 75%, <span class="selector-id">#bbb</span> 0);</span><br><span class="line"><span class="selector-tag">background-position</span>: 0 0, <span class="selector-tag">-20px</span> 20<span class="selector-tag">px</span>,                     </span><br><span class="line">20<span class="selector-tag">px</span> <span class="selector-tag">-20px</span>, 0 0;</span><br><span class="line"><span class="selector-tag">background-size</span>: 40<span class="selector-tag">px</span> 40<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></font></p><p><font color="#999AAA">实际效果。<br><img src="https://img-blog.csdnimg.cn/20200921095309238.png#pic_center" alt="在这里插入图片描述"></font></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本篇主要对一些更为复杂的背景图案做出了一些介绍，分别有<strong>实色网格图案，边框网格图案，波点图案，棋盘图案</strong>，其中：</p><ol><li>实色网格用到了透明叠加的方法，实现了苏格兰裙一样的背景图案。</li><li>边框网格实际上是利用1px的渐变边框，实现其实类似纯div的左上border的方法。</li><li>波点使用到了<strong>radial-gradient</strong>径向渐变，使用方法和线性渐变相似。</li><li>棋盘图案则借助了background-position对直角三角形进行定位，以组合出正方形图案。</li></ol></font></font></font></font></font></font></font></font></font>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/uncategorized/JavaScript%EF%BC%9Aleetcode_16.%20%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C%EF%BC%88%E6%8E%92%E5%BA%8F+%E5%8F%8C%E6%8C%87%E9%92%88%EF%BC%89/"/>
      <url>/uncategorized/JavaScript%EF%BC%9Aleetcode_16.%20%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C%EF%BC%88%E6%8E%92%E5%BA%8F+%E5%8F%8C%E6%8C%87%E9%92%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<hr><p>title: JavaScript：leetcode_16. 最接近的三数之和（排序+双指针）<br>date: 2020-06-24 16:27:44<br>categories: [‘Algorithm’,’每日一题’]<br>tags: Algorithm</p><h2 id="keywords-leetcode-16-最接近的三数之和（排序-双指针）"><a href="#keywords-leetcode-16-最接近的三数之和（排序-双指针）" class="headerlink" title="keywords: leetcode_16, 最接近的三数之和（排序+双指针）"></a>keywords: leetcode_16, 最接近的三数之和（排序+双指针）</h2><h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"></span><br><span class="line">输入：nums = [-1,2,1,-4], target = 1</span><br><span class="line">输出：2</span><br><span class="line">解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">3 &lt;= nums.length &lt;= 10^3</span><br><span class="line">-10^3 &lt;= nums[i] &lt;= 10^3</span><br><span class="line">-10^4 &lt;= target &lt;= 10^4</span><br></pre></td></tr></table></figure><p>首先这个题可以使用3重for循环来遍历求值，并记录最接近target的值，但是会超时。</p><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li>对数组进行从小到大排列</li><li>结果由三个数构成，我们提取出第一个数字<code>nums[i]</code>, 剩下的值就是<code>target-nums[i]</code>，我们需要在剩余数组元素中找到两个值<code>nums[pb]</code>,<code>nums[pc]</code>，最接近<code>target-nums[i]</code></li><li>由于三个元素不可重复，所以我们首先遍历<code>nums</code>，然后在每次遍历中，设定<code>pb</code>的初始值为 <code>i + 1</code>，<code>pc</code>的初始值为<code>nums.length - 1</code>。</li><li>当前我们所求的当前值为<code>target_close_help = nums[i] + nums[pb] + nums[pc];</code>，另外用<code>target_close</code>记录最接近target的值。</li><li>每次遍历，<code>nums[i]</code>是确定的。所以只需要判断<code>target_close_help</code> 是否<strong>大于</strong> <code>target</code>，如果<strong>大于</strong>则<code>pc--</code>，否则<code>pb++</code>；若<code>target_close_help</code><strong>等于</strong><code>target</code>则直接返回。<ol><li>由于<code>nums</code>从<strong>小到大</strong>排列，所以<code>pc--</code>代表<code>nums[pc]</code>的值会<strong>变小</strong>，<code>target_close_help</code>的值也会变<strong>小</strong>，这样才会慢慢接近<code>target</code>，反之亦然<code>pb++</code>是同样的道理。</li></ol></li><li>最后判读<code>target_close_help</code> 是否更接近<code>target</code>，若<strong>更接近</strong>则用<code>target_close</code>记录该次<code>target_close_help</code></li><li>若没有相等于target的情况出现，最后则返回target_close的值。<h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> threeSumClosest = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    nums = nums.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a-b;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> target_close = <span class="number">100001</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> pb = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> pc = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(pc &gt; pb) &#123;</span><br><span class="line">            <span class="keyword">let</span> target_close_help = nums[i] + nums[pb] + nums[pc];</span><br><span class="line">            <span class="keyword">if</span> (target_close_help &lt; target) &#123;</span><br><span class="line">                pb++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target_close_help &gt; target) &#123;</span><br><span class="line">                pc--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> target;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(target_close_help - target) &lt; <span class="built_in">Math</span>.abs(target_close - target)) &#123;</span><br><span class="line">                target_close = target_close_help;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target_close;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/uncategorized/JavaScript%EF%BC%9Aleetcode_739.%20%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6%EF%BC%88%E6%A0%88%EF%BC%89/"/>
      <url>/uncategorized/JavaScript%EF%BC%9Aleetcode_739.%20%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6%EF%BC%88%E6%A0%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<hr><p>title: JavaScript：leetcode_739. 每日温度（栈）<br>date: 2020-06-11 11:27:28<br>categories: [‘Algorithm’,’每日一题’]<br>tags: Algorithm</p><h2 id="keywords-leetcode-739-每日温度（栈）"><a href="#keywords-leetcode-739-每日温度（栈）" class="headerlink" title="keywords: leetcode_739, 每日温度（栈）"></a>keywords: leetcode_739, 每日温度（栈）</h2><h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">根据每日 气温 列表，请重新生成一个列表，对应位置的输出是需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用 0 来代替。</span><br><span class="line"></span><br><span class="line">例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。</span><br><span class="line"></span><br><span class="line">提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。</span><br></pre></td></tr></table></figure><p>暴力方法就不提了，直接循环判断即可。</p><h3 id="解题思路一（栈）"><a href="#解题思路一（栈）" class="headerlink" title="解题思路一（栈）"></a>解题思路一（栈）</h3><ol><li>首先<code>i</code>位的值，为<code>j-i</code>的差值。<code>j</code>为下一位比<code>i</code>处大的<code>最小下标</code>。</li><li>建立一个index栈，先入栈下标0，遍历T，判断<code>T[i]</code>和<code>T[index[index.length-1]]</code> (栈顶元素对应的T内值)。</li><li>若<code>T[i] &gt;  T[index[index.length-1]]</code> 将栈顶排出<code>indexTop = index.pop()</code>; 赋值<code>T[indexTop] = i - indexTop</code> 。</li><li>循环此步骤直到栈顶对应的T值大于T[i]。</li><li>最后将<code>i</code>置入栈内。</li><li>遍历完数组，最后将栈排空，栈内剩余值都为0。（我们也可以初始化结果数组为0）</li></ol><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">T</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> dailyTemperatures = <span class="function"><span class="keyword">function</span>(<span class="params">T</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">new</span> <span class="built_in">Array</span>(T.length).fill(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">let</span> index = [<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; T.length; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (T[i] &gt; T[index[index.length - <span class="number">1</span>]]) &#123;</span><br><span class="line">        <span class="keyword">let</span> indexTop = index.pop();</span><br><span class="line">            res[indexTop] = i - indexTop;</span><br><span class="line">        &#125;</span><br><span class="line">        index.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/uncategorized/JavaScript%EF%BC%9Aleetcode_198.%20%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89/"/>
      <url>/uncategorized/JavaScript%EF%BC%9Aleetcode_198.%20%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<hr><p>title: JavaScript：leetcode_198. 打家劫舍（动态规划）<br>date: 2020-05-27 11:59:13<br>categories: [‘Algorithm’,’每日一题’]<br>tags: Algorithm</p><h2 id="keywords-leetcode-198-打家劫舍"><a href="#keywords-leetcode-198-打家劫舍" class="headerlink" title="keywords: leetcode_198, 打家劫舍"></a>keywords: leetcode_198, 打家劫舍</h2><h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</span><br><span class="line"></span><br><span class="line">给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [1,2,3,1]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</span><br><span class="line">     偷窃到的最高金额 = 1 + 3 = 4 。</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: [2,7,9,3,1]</span><br><span class="line">输出: 12</span><br><span class="line">解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。</span><br><span class="line">     偷窃到的最高金额 = 2 + 9 + 1 = 12 。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一-动态规划，记录最优解"><a href="#解题思路一-动态规划，记录最优解" class="headerlink" title="解题思路一(动态规划，记录最优解)"></a>解题思路一(动态规划，记录最优解)</h3><ol><li>假如有一间房，偷取的最大值即为<code>nums[0].</code></li><li>假如有两间房，由于相邻房间不可取，偷取的最大值即为<code>Max(nums[0],nums[1])</code></li><li>假如有三间房，其取值有两种选择1. 偷取 <code>[1， 3]</code>房， 2. 偷取 <code>[2]</code> 房,取其最大值即可。</li><li>那么，对于第<code>i</code>间房就有：<code>stole[i] = Math.max((stole[i - 2] + nums[i]), stole[i - 1]);</code></li><li>最后，stole末尾的值即为最大值<h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    nums = [<span class="number">0</span>, <span class="number">0</span>, ...nums]</span><br><span class="line">    <span class="keyword">let</span> stole = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">       stole[i] = <span class="built_in">Math</span>.max((stole[i - <span class="number">2</span>] + nums[i]), stole[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stole[stole.length - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="解题思路二（空间复杂度优化）"><a href="#解题思路二（空间复杂度优化）" class="headerlink" title="解题思路二（空间复杂度优化）"></a>解题思路二（空间复杂度优化）</h3><ol><li>以上代码，stole中其实只用到了末尾两位的值，所以我们可以将stole数组长度固定在2.</li><li>不需要保存所有的stole情况。<h3 id="代码实现二"><a href="#代码实现二" class="headerlink" title="代码实现二"></a>代码实现二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    nums = [<span class="number">0</span>, <span class="number">0</span>, ...nums]</span><br><span class="line">    <span class="keyword">let</span> stole = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">       <span class="keyword">let</span> help = stole[<span class="number">1</span>];</span><br><span class="line">       stole[<span class="number">1</span>] = <span class="built_in">Math</span>.max((stole[<span class="number">0</span>] + nums[i]), stole[<span class="number">1</span>]);</span><br><span class="line">       stole[<span class="number">0</span>] = help;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stole[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS揭秘：5.条纹背景（上）</title>
      <link href="/Css/CSS%E6%8F%AD%E7%A7%98%EF%BC%9A5.%E6%9D%A1%E7%BA%B9%E8%83%8C%E6%99%AF%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/Css/CSS%E6%8F%AD%E7%A7%98%EF%BC%9A5.%E6%9D%A1%E7%BA%B9%E8%83%8C%E6%99%AF%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="条纹背景"><a href="#条纹背景" class="headerlink" title="条纹背景"></a>条纹背景</h1><blockquote><p>背景知识：CSS线性渐变，background-size</p></blockquote><h2 id="CSS线性渐变"><a href="#CSS线性渐变" class="headerlink" title=" CSS线性渐变"></a> CSS线性渐变</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">red</span>, <span class="selector-tag">yellow</span>, <span class="selector-tag">blue</span>);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">red</span> 0%, <span class="selector-tag">yellow</span> 50%, <span class="selector-tag">blue</span> 100%);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">right</span>, <span class="selector-tag">red</span> 0%, <span class="selector-tag">yellow</span> 50%, <span class="selector-tag">blue</span> 100%);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>, <span class="selector-tag">red</span> 0%, <span class="selector-tag">yellow</span> 50%, <span class="selector-tag">blue</span> 100%);</span><br></pre></td></tr></table></figure><ol><li><code>to right</code>代表渐变偏移角度，<code>to right</code> (相当于<code>90deg</code>)</li><li><code>red，yellow，blue</code>代表渐变色，表示从<code>red - yellow - blue (相当于red 0% - yellow 50% - blue 100%)</code>。 意思是从0%距离处为red，通过0%-50%的距离渐变到yellow，再通过50%-100%的距离渐变到blue。<ol><li>linear-gradient(90deg, red 0%, yellow 50%, blue <code>0</code>) 等价于 linear-gradient(90deg, red 0%, yellow 50%, blue <code>50%</code>) 因为当你的色标位置值设置为0时，会自动调整为前一个色标位置值。</li><li>linear-gradient(90deg, red 20%, yellow 50%, blue 100%); 代表从<strong>0-20%都为red色</strong>。</li><li>linear-gradient(90deg, red <code>20%</code>, yellow <code>20%</code>, blue 100%); 代表从20%处颜色<strong>突然</strong>变化为yellow。（<strong>20%-20%之间没有渐变距离</strong>）</li><li>linear-gradient(90deg, red 20%, yellow <code>20%</code>, yellow <code>50%</code>, blue 100%); 代表从<code>20%-50%</code>处都是<strong>黄色</strong>，然后从50%处开始渐变直到100%变化为blue</li></ol></li></ol><h2 id="css线性渐变小结"><a href="#css线性渐变小结" class="headerlink" title="css线性渐变小结"></a>css线性渐变小结</h2><ol start="3"><li>line-gradient中相邻的两个颜色值代表，从色标A渐变到色标B。</li><li>颜色后紧跟的数值，代表AB两个颜色之间的渐变区间。（差值为渐变区间的长度，若差值为0，则为突变）</li><li>颜色后的数值为0时，自动取前一位的数值。</li></ol><a id="more"></a><h2 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a>background-size</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 关键字 */</span></span><br><span class="line"><span class="selector-tag">background-size</span>: <span class="selector-tag">cover</span></span><br><span class="line"><span class="selector-tag">background-size</span>: <span class="selector-tag">contain</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 一个值: 这个值指定图片的宽度，图片的高度隐式的为auto */</span></span><br><span class="line"><span class="selector-tag">background-size</span>: 50%</span><br><span class="line"><span class="selector-tag">background-size</span>: 3<span class="selector-tag">em</span></span><br><span class="line"><span class="selector-tag">background-size</span>: 12<span class="selector-tag">px</span></span><br><span class="line"><span class="selector-tag">background-size</span>: <span class="selector-tag">auto</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 两个值 */</span></span><br><span class="line"><span class="comment">/* 第一个值指定图片的宽度，第二个值指定图片的高度 */</span></span><br><span class="line"><span class="selector-tag">background-size</span>: 50% <span class="selector-tag">auto</span></span><br><span class="line"><span class="selector-tag">background-size</span>: 3<span class="selector-tag">em</span> 25%</span><br><span class="line"><span class="selector-tag">background-size</span>: <span class="selector-tag">auto</span> 6<span class="selector-tag">px</span></span><br><span class="line"><span class="selector-tag">background-size</span>: <span class="selector-tag">auto</span> <span class="selector-tag">auto</span></span><br></pre></td></tr></table></figure><ol><li><code>cover</code>代表背景图片覆盖背景尺寸，可能只能看到放大后的背景图片的一部分。</li><li><code>contain</code>代表背景图片装入背景尺寸，可能会看到背景留白。</li><li><code>两个值</code>分别为宽，高，高可以省略，默认auto<blockquote><p>摘自MDN <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-size" target="_blank" rel="noopener">background-size</a></p></blockquote><h2 id="水平条纹"><a href="#水平条纹" class="headerlink" title="水平条纹"></a>水平条纹</h2>首先我们来实现一下水平条纹的效果。<h3 id="水平-First-Try"><a href="#水平-First-Try" class="headerlink" title="水平 First Try"></a>水平 First Try</h3>我们了解了line-gradient的能力之后。我们可以通过极端缩小两个颜色之间的过渡间距来实现颜色突变的效果。<code>background: linear-gradient(#fb3 50%, #58a 50%);</code><blockquote><p>CSS图像（第三版）：如果多个色标具有相同的位置，它们会产生一个无限小的过渡区域。过渡的起止色分别是第一个和最后一个指定值。从效果上看，颜色会突然变化，而不是一个平滑的渐变过程。</p></blockquote><img src="https://img-blog.csdnimg.cn/20200703002131380.png" alt="在这里插入图片描述"><h3 id="水平-Second-Try"><a href="#水平-Second-Try" class="headerlink" title="水平 Second Try"></a>水平 Second Try</h3>目前看来我们已经实现了两个巨大的条纹，分别占据一半的高度。接下来我们再加上background-size的能力。<code>background-size: 100% 20px;</code><br><img src="https://img-blog.csdnimg.cn/20200703002828821.png" alt="在这里插入图片描述"><br>我们通过控制背景的尺寸，高度设置为20px，那么，各占50%背景尺寸高度的实际尺寸就变成了10px高。再加上背景的默认是重复平铺的，所以就实现了条纹的效果了。<h3 id="水平-Third-Try"><a href="#水平-Third-Try" class="headerlink" title="水平 Third Try"></a>水平 Third Try</h3>现在实现了两种颜色的交叉条纹。那么如果三种颜色，四种颜色怎么办呢？我想看到这里大家思考之后都会知道如何实现。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-id">#fb3</span> 33%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 66%, <span class="selector-tag">yellowgreen</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 100% 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://img-blog.csdnimg.cn/20200703004052995.png" alt="在这里插入图片描述"><br>水平条纹的颜色基本都可以实现了</p><h3 id="水平-Forth-Try"><a href="#水平-Forth-Try" class="headerlink" title="水平 Forth Try"></a>水平 Forth Try</h3><p> 我们再来尝试尝试加上透明度的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">rgba</span>(255, 187, 51, 0<span class="selector-class">.9</span>) 0%, <span class="selector-tag">rgba</span>(255, 187, 51, 0<span class="selector-class">.2</span>) 33%, <span class="selector-tag">rgba</span>(85, 136, 170, 0<span class="selector-class">.9</span>) 0, <span class="selector-tag">rgba</span>(85, 136, 170, 0<span class="selector-class">.2</span>) 66%, <span class="selector-tag">rgba</span>(154, 205, 50, 0<span class="selector-class">.9</span>) 0, <span class="selector-tag">rgba</span>(154, 205, 50, 0<span class="selector-class">.2</span>) 100%);</span><br><span class="line"><span class="comment">/* background: linear-gradient(rgba(255, 187, 51, 0.2) 0%, rgba(255, 187, 51, 0.9) 33%, rgba(85, 136, 170, 0.2) 0, rgba(85, 136, 170, 0.9) 66%, rgba(154, 205, 50, 0.2) 0, rgba(154, 205, 50, 0.9) 100%); */</span></span><br><span class="line"><span class="selector-tag">background-size</span>: 100% 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200703005540472.png" alt="在这里插入图片描述"><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">rgba</span>(255, 187, 51, 0<span class="selector-class">.2</span>) 0%, <span class="selector-tag">rgba</span>(255, 187, 51, 0<span class="selector-class">.9</span>) 33%, <span class="selector-tag">rgba</span>(85, 136, 170, 0<span class="selector-class">.2</span>) 0, <span class="selector-tag">rgba</span>(85, 136, 170, 0<span class="selector-class">.9</span>) 66%, <span class="selector-tag">rgba</span>(154, 205, 50, 0<span class="selector-class">.2</span>) 0, <span class="selector-tag">rgba</span>(154, 205, 50, 0<span class="selector-class">.9</span>) 100%);</span><br><span class="line"><span class="selector-tag">background-size</span>: 100% 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200703005620954.png" alt="在这里插入图片描述"><br>加上了透明度配合渐变，实现了一些立体凹陷和饱满的条纹效果。</p><h2 id="垂直条纹"><a href="#垂直条纹" class="headerlink" title="垂直条纹"></a>垂直条纹</h2><p>实现过了水平条纹，垂直条纹还不是手到擒来。<br>我们只需要在上述的水平条纹代码中做两处改变即可。</p><ol><li>渐变里参数添加角度，to right 或者 90deg </li><li>background-size 参数互换位置。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>, <span class="selector-id">#fb3</span> 33%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 66%, <span class="selector-tag">yellowgreen</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 60<span class="selector-tag">px</span> 100%;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200703010130334.png" alt="在这里插入图片描述"><br>其他效果留给大家去实践~</p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS揭秘：5.条纹背景（下）</title>
      <link href="/Css/CSS%E6%8F%AD%E7%A7%98%EF%BC%9A5.%E6%9D%A1%E7%BA%B9%E8%83%8C%E6%99%AF%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/Css/CSS%E6%8F%AD%E7%A7%98%EF%BC%9A5.%E6%9D%A1%E7%BA%B9%E8%83%8C%E6%99%AF%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>上篇文章讲述了实现条纹效果所使用的CSS特性并实现了水平和垂直条纹，接下来我们来实现斜向条纹。</p><a id="more"></a><p>回忆一下之前的效果</p><p>水平条纹</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-id">#fb3</span> 33%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 66%, <span class="selector-tag">yellowgreen</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 100% 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200703004052995.png" alt="在这里插入图片描述"><br> 垂直条纹<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>, <span class="selector-id">#fb3</span> 33%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 66%, <span class="selector-tag">yellowgreen</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 60<span class="selector-tag">px</span> 100%;</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200703010130334.png" alt="在这里插入图片描述"></p><h2 id="一、斜向条纹"><a href="#一、斜向条纹" class="headerlink" title="一、斜向条纹"></a>一、斜向条纹</h2><p>现在我们来试一下斜向条纹的效果。</p><h3 id="1-斜向-First-Try"><a href="#1-斜向-First-Try" class="headerlink" title="1. 斜向 First Try"></a>1. 斜向 First Try</h3><p>类似垂直条纹一样，我们是不是可以先试一下45deg角度的效果呢？<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#fb3</span> 33%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 66%, <span class="selector-tag">yellowgreen</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 60<span class="selector-tag">px</span> 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></p><p> <img src="https://img-blog.csdnimg.cn/20200707224917963.png" alt="在这里插入图片描述"><br> 看来效果并不是我们想象的那样。</p><h3 id="2-斜向-Second-Try-双条纹"><a href="#2-斜向-Second-Try-双条纹" class="headerlink" title="2. 斜向 Second Try 双条纹"></a>2. 斜向 Second Try 双条纹</h3><p> 第一次尝试失败了，但是失败的经验还是有的，我们发现事实上，图片是斜过来的，但是是单片斜过来的。那么如果我们每一个单片的部分可以<strong>无缝对接</strong>，那是不是就有这个效果了呢？？？<br> 先来试一下双色条纹的<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#fb3</span> 25%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 50%, <span class="selector-id">#fb3</span> 0, <span class="selector-id">#fb3</span> 75%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 100%);</span><br><span class="line"><span class="selector-tag">background-size</span>: 60<span class="selector-tag">px</span> 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></p><p> <img src="https://img-blog.csdnimg.cn/20200707225023196.png" alt="在这里插入图片描述"><br> 我们通过制造一个个的相同无缝单片来<code>无缝</code>组成了斜向的效果，上图中的单片<br> <img src="https://img-blog.csdnimg.cn/2020070722525997.png" alt="在这里插入图片描述"></p><h3 id="3-斜向-Third-Try-三条纹"><a href="#3-斜向-Third-Try-三条纹" class="headerlink" title="3. 斜向 Third Try 三条纹"></a>3. 斜向 Third Try 三条纹</h3><p>来试一下三条纹的<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#fb3</span> 16<span class="selector-class">.6666</span>%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 33<span class="selector-class">.3333</span>%, <span class="selector-tag">yellowgreen</span> 0, <span class="selector-tag">yellowgreen</span> 50%, <span class="selector-id">#fb3</span> 0, <span class="selector-id">#fb3</span> 66<span class="selector-class">.6666</span>%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 83<span class="selector-class">.3333</span>%, <span class="selector-tag">yellowgreen</span> 0, <span class="selector-tag">yellowgreen</span> 100%);</span><br><span class="line"><span class="selector-tag">background-size</span>: 60<span class="selector-tag">px</span> 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200708092318421.png" alt="在这里插入图片描述"></p><h3 id="4-斜向-Forth-Try-同色间隔条纹"><a href="#4-斜向-Forth-Try-同色间隔条纹" class="headerlink" title="4. 斜向 Forth Try 同色间隔条纹"></a>4. 斜向 Forth Try 同色间隔条纹</h3><p>来试一下同色间隔条纹<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#58a</span> 25%, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 0, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 50%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 75%, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 0, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 100%);</span><br><span class="line"><span class="selector-tag">background-size</span>: 60<span class="selector-tag">px</span> 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200708093023181.png" alt="在这里插入图片描述"></p><p>斜向的效果现在应该也已经掌握了，我们只需要遵守切片间可以无缝交接的原则即可。</p><h3 id="5-斜向-Fifth-Try"><a href="#5-斜向-Fifth-Try" class="headerlink" title="5. 斜向 Fifth Try"></a>5. 斜向 Fifth Try</h3><p>实现了45度角，我们再试一下60度角吧~ 我们把45改为60.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(60<span class="selector-tag">deg</span>, <span class="selector-id">#58a</span> 25%, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 0, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 50%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 75%, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 0, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 100%);</span><br><span class="line"><span class="selector-tag">background-size</span>: 60<span class="selector-tag">px</span> 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></p><p>很显然失败了啊，除了45度角应该其他的比较难以实现了。<br><img src="https://img-blog.csdnimg.cn/20200708093435612.png" alt="在这里插入图片描述"></p><h3 id="6-斜向-Sixth-Try-60deg"><a href="#6-斜向-Sixth-Try-60deg" class="headerlink" title="6. 斜向 Sixth Try 60deg"></a>6. 斜向 Sixth Try 60deg</h3><p>别担心，我们还有一个办法，使用<code>repeating-linear-gradient</code>专门用来创建重复的线性渐变图像的。用法和linear-gradient类似。但是使用上还是有一些小细节需要注意。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">repeating-linear-gradient</span>(60<span class="selector-tag">deg</span>, <span class="selector-id">#58a</span> 25%, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 0, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 50%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 75%, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 0, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 100%);</span><br></pre></td></tr></table></figure></p><p><del>background-size: 60px 60px;</del>  记得这次要把size删掉了。我们不再需要了。<br>看，下面的效果已经实现了，这个方法可以实现任何角度的斜向条纹。</p><p><img src="https://img-blog.csdnimg.cn/20200708094400556.png" alt="在这里插入图片描述"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到现在我们已经实现了条纹效果的大部分情况，包括横向，垂直，斜向（45deg 和 任意角）。<br>核心css特性为：<code>background: linear-gradient(#fb3 33%, #58a 0, #58a 66%, yellowgreen 0);</code> 如果忘记了用法可以去<a href="https://blog.csdn.net/lunhui1994_/article/details/106933714" target="_blank" rel="noopener">上篇</a>开头再复习一下。</p><ol><li><p>横向条纹 </p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-id">#fb3</span> 33%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 66%, <span class="selector-tag">yellowgreen</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 100% 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></li><li><p>垂直条纹 <code>90deg</code></p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>, <span class="selector-id">#fb3</span> 33%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 66%, <span class="selector-tag">yellowgreen</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 60<span class="selector-tag">px</span> 100%;</span><br></pre></td></tr></table></figure></li><li><p>斜向条纹</p><ol><li><p><code>45deg</code> + 可无缝拼接的单片条纹</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#fb3</span> 25%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 50%, <span class="selector-id">#fb3</span> 0, <span class="selector-id">#fb3</span> 75%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 100%);</span><br><span class="line"><span class="selector-tag">background-size</span>: 60<span class="selector-tag">px</span> 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>repeating-linear-gradient()</code> 去掉background-size</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">repeating-linear-gradient</span>(60<span class="selector-tag">deg</span>, <span class="selector-id">#58a</span> 25%, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 0, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 50%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 75%, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 0, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 100%);</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_209. 长度最小的子数组（滑动窗口 + 双指针）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_209.%20%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%EF%BC%88%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%20+%20%E5%8F%8C%E6%8C%87%E9%92%88%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_209.%20%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%EF%BC%88%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%20+%20%E5%8F%8C%E6%8C%87%E9%92%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组，并返回其长度。如果不存在符合条件的连续子数组，返回 0。</p><p>示例：</p><p>输入：s = 7, nums = [2,3,1,2,4,3]<br>输出：2<br>解释：子数组 [4,3] 是该条件下的长度最小的连续子数组。</p><p>进阶：</p><p>如果你已经完成了 O(n) 时间复杂度的解法, 请尝试 O(n log n) 时间复杂度的解法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 解题思路一</span><br><span class="line">1. 第一种方法，比较常规，符合我们的脑回路。</span><br><span class="line">2. 遍历数组，求遍历过的和sum。</span><br><span class="line">3. 当sum &gt;= s时，依次减去sum前面的数字，并判断是否依旧符合sum &gt;= s。</span><br><span class="line">4. 直到sum &gt;= s不成立，记录start--到end的长度。</span><br><span class="line">5. 继续遍历数组的下一位，循环2-3步骤，比较之后取最小长度。</span><br><span class="line">### 代码实现一</span><br><span class="line">```javascript</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;number&#125; s</span><br><span class="line"> * @param &#123;number[]&#125; nums</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> */</span><br><span class="line">var minSubArrayLen = function(s, nums) &#123;</span><br><span class="line">    let sum = 0;</span><br><span class="line">    let start = 0;</span><br><span class="line">    let end = 0;</span><br><span class="line">    let min = nums.length + 1;</span><br><span class="line">    for(let i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">        if (sum &gt;= s) &#123;</span><br><span class="line">            end = i;</span><br><span class="line">            while(sum &gt;= s) &#123;</span><br><span class="line">                sum -= nums[start++];</span><br><span class="line">            &#125;</span><br><span class="line">            start--;</span><br><span class="line">            sum += nums[start];</span><br><span class="line">            if (min &gt; (end - start)) &#123;</span><br><span class="line">                min = end - start + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (min &gt; nums.length) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return min;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="解题思路二（双指针）"><a href="#解题思路二（双指针）" class="headerlink" title="解题思路二（双指针）"></a>解题思路二（双指针）</h3><ol><li>先求出nums数组中第一次符合条件的情况。也就是看nums的前多少位&gt;=s。记录start，end。</li><li>start，end即为我们的双指针，分别代表子序列的开头和结尾。</li><li>如果sum &gt;= s, 我们就右移动start，求最小长度。</li><li>如果sum &lt; s, 我们就右移动end，求符合条件的情况。</li><li>直到end到达nums的尾部结束。<h3 id="代码实现二"><a href="#代码实现二" class="headerlink" title="代码实现二"></a>代码实现二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minSubArrayLen = <span class="function"><span class="keyword">function</span>(<span class="params">s, nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> end = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> min = nums.length + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (sum &lt; s) &#123;</span><br><span class="line">        sum += nums[end++];</span><br><span class="line">    &#125;</span><br><span class="line">    min = <span class="built_in">Math</span>.min(end - start, min);</span><br><span class="line">    <span class="keyword">while</span>(end &lt;= nums.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt;= s) &#123;</span><br><span class="line">            sum -= nums[start++];</span><br><span class="line">             <span class="keyword">if</span> (sum &gt;= s) &#123;</span><br><span class="line">                min = <span class="built_in">Math</span>.min(end - start, min);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sum += nums[end++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (min &gt; nums.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS揭秘：4.边框内圆角</title>
      <link href="/Css/CSS%E6%8F%AD%E7%A7%98%EF%BC%9A4.%E8%BE%B9%E6%A1%86%E5%86%85%E5%9C%86%E8%A7%92/"/>
      <url>/Css/CSS%E6%8F%AD%E7%A7%98%EF%BC%9A4.%E8%BE%B9%E6%A1%86%E5%86%85%E5%9C%86%E8%A7%92/</url>
      
        <content type="html"><![CDATA[<h1 id="边框内圆角"><a href="#边框内圆角" class="headerlink" title="边框内圆角"></a>边框内圆角</h1><blockquote><p>背景知识：box-shadow，outline，“多重边框”</p></blockquote><a id="more"></a><h2 id="一、两个div嵌套"><a href="#一、两个div嵌套" class="headerlink" title="一、两个div嵌套"></a>一、两个div嵌套</h2><p>两个div实现内圆角很容易，只需要内圆角外直角即可。</p><h3 id="div-First-Try"><a href="#div-First-Try" class="headerlink" title="div First Try"></a>div First Try</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#655</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">       <span class="attribute">background-color</span>: tan;</span><br><span class="line">       <span class="attribute">border-radius</span>: .<span class="number">8em</span>;</span><br><span class="line">       <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020061823401650.png" alt="在这里插入图片描述"><br>这种方案更加灵活，我们可以在box上设置更多的样式，但是需要两个元素才能实现。</p><h2 id="二、box-shadow-outline-方案"><a href="#二、box-shadow-outline-方案" class="headerlink" title="二、box-shadow + outline 方案"></a>二、box-shadow + outline 方案</h2><p>还记得上篇中，outline和box-shadow对于圆角的区别显示吗？box-shadow会贴合border的圆角，outline不会。当我们仅需要实现一个实色的边框加内圆角，使用这个方案可以达到相同的效果。</p><h3 id="box-shadow-outline-First-Try"><a href="#box-shadow-outline-First-Try" class="headerlink" title="box-shadow + outline First Try"></a>box-shadow + outline First Try</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: 160<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">tan</span>;</span><br><span class="line"><span class="selector-tag">border-radius</span>: <span class="selector-class">.8em</span>;</span><br><span class="line"><span class="selector-tag">padding</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">margin</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">box-shadow</span>: 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> <span class="selector-class">.4em</span> <span class="selector-id">#655</span>;</span><br><span class="line"><span class="selector-tag">outline</span>: 20<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#655</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020061823401650.png" alt="在这里插入图片描述"><br>这种方案中，<code>box-shadow</code>是用来填补<code>outline</code>和<code>border</code>之间的间隙的，如果不加<code>box-shadow</code>效果会是这样的。<br><img src="https://img-blog.csdnimg.cn/20200618235718311.png" alt="在这里插入图片描述"></p><ol><li>所以我们需要设置<code>box-shadow</code>的扩散半径来弥补四个类似三角形的空隙。</li><li>至于扩散半径的大小，我们可以用勾股定理设置。</li><li>也就是<code>border-radius</code>的圆角<strong>圆心到角的距离 - 半径</strong>。</li><li><p><code>(√2 - 1)r</code>； <code>√2 ≈ 1.4</code>那么<code>(√2 - 1)</code> 也就是在<code>0.4 - 0.5</code>之间,我们可以按0.5计算即可。也就是0.5r。</p></li><li><p>最后再回顾一下<code>box-shadow</code>的用法，<code>outline</code>和<code>border</code>用法一样，同时可以使用<code>outline-offset: -30px;</code>调整位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/* x偏移量 | y偏移量 | 阴影模糊半径 | 阴影扩散半径 | 阴影颜色 */</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: 2<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> <span class="selector-class">.4em</span> <span class="selector-id">#655</span>;</span><br></pre></td></tr></table></figure><p>说起这个有人会说，为什么不用<code>outline-offset:-10px;</code>这样来顶替<code>box-shadow</code>呢？试一下就知道了。<code>outline</code>的显示层级较<code>border</code>更高，所以border的圆角会被覆盖掉。<br><img src="https://img-blog.csdnimg.cn/20200618235913302.png" alt="在这里插入图片描述"></p><h2 id="最终案例代码"><a href="#最终案例代码" class="headerlink" title="最终案例代码"></a>最终案例代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            padding: 20px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#655</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content</span>&#123;</span></span><br><span class="line">            background-color: tan;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-radius</span>: <span class="selector-class">.8em</span>;</span></span><br><span class="line">            padding: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">            width: 160px;</span><br><span class="line">            background: tan;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-radius</span>: <span class="selector-class">.8em</span>;</span></span><br><span class="line">            padding: 20px;</span><br><span class="line">            margin: 20px;</span><br><span class="line"><span class="css">            <span class="selector-tag">box-shadow</span>: 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> <span class="selector-class">.4em</span> <span class="selector-id">#655</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">outline</span>: 20<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#655</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">            对酒当歌，人生几何。</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span></span><br><span class="line">        对酒当歌，人生几何。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS揭秘：3.灵活的背景定位</title>
      <link href="/Css/CSS%E6%8F%AD%E7%A7%98%EF%BC%9A3.%E7%81%B5%E6%B4%BB%E7%9A%84%E8%83%8C%E6%99%AF%E5%AE%9A%E4%BD%8D/"/>
      <url>/Css/CSS%E6%8F%AD%E7%A7%98%EF%BC%9A3.%E7%81%B5%E6%B4%BB%E7%9A%84%E8%83%8C%E6%99%AF%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="灵活的背景定位"><a href="#灵活的背景定位" class="headerlink" title="灵活的背景定位"></a>灵活的背景定位</h1><blockquote><p>背景知识：<code>background-position</code>的扩展语法，<code>background-origin，calc()</code><br><a id="more"></a></p></blockquote><h2 id="background-position扩展语法"><a href="#background-position扩展语法" class="headerlink" title="background-position扩展语法"></a>background-position扩展语法</h2><ol><li><strong>background-position扩展语法：</strong> css3 中background-position 语法可以通过在偏移量前指定关键字，来设置四条边的偏移量。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-positon</span>: <span class="selector-tag">right</span> 20<span class="selector-tag">px</span> <span class="selector-tag">bottom</span> 10<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="background-origin"><a href="#background-origin" class="headerlink" title="background-origin"></a>background-origin</h2><ol start="2"><li><strong>background-origin：</strong> css3 中 background-origin 可以指定背景图片的显示范围，默认以padding-box为准，即padding的外边沿。此时背景图片的位置将和padding一致。通常此方案更适合开发需求。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">padding</span><span class="selector-pseudo">:20px</span>;</span><br><span class="line"><span class="selector-tag">background-origin</span>: <span class="selector-tag">content-box</span>;</span><br><span class="line"><span class="selector-tag">background-position</span>: 100% 100%;</span><br></pre></td></tr></table></figure></li></ol><h2 id="calc"><a href="#calc" class="headerlink" title="calc()"></a>calc()</h2><ol start="3"><li><strong>calc()：</strong> 允许填入 任意 <code>+ - * /</code> 四则运算组合的表达式。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">calc</span>(100% <span class="selector-tag">-</span> 20<span class="selector-tag">px</span>) <span class="selector-tag">calc</span>(100% <span class="selector-tag">-</span> 10<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>扩展：<code>border-box</code> <code>边框</code>的外边沿；<code>padding-box</code> <code>内边距</code>的外边沿； <code>content-box</code> <code>内容</code>的外边沿。</p></blockquote><h3 id="原效果"><a href="#原效果" class="headerlink" title="原效果"></a>原效果</h3><p><img src="https://img-blog.csdnimg.cn/2020061200291226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p><img src="https://img-blog.csdnimg.cn/20200612002948787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS揭秘：2.多重边框</title>
      <link href="/Css/CSS%E6%8F%AD%E7%A7%98%EF%BC%9A2.%E5%A4%9A%E9%87%8D%E8%BE%B9%E6%A1%86/"/>
      <url>/Css/CSS%E6%8F%AD%E7%A7%98%EF%BC%9A2.%E5%A4%9A%E9%87%8D%E8%BE%B9%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<h1 id="多重边框"><a href="#多重边框" class="headerlink" title="多重边框"></a>多重边框</h1><blockquote><p>背景知识：box-shadow的基本用法，outline基本用法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/* x偏移量 | y偏移量 | 阴影模糊半径 | 阴影扩散半径 | 阴影颜色 */</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: 2<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.2</span>);</span><br></pre></td></tr></table></figure><p>以上是box-shadow的基本参数。box-shadow是为元素添加阴影效果的样式。但是我们可以通过对其属性的设置，呈现边框效果。<br><a id="more"></a></p><h2 id="box-shadow-方案"><a href="#box-shadow-方案" class="headerlink" title="box-shadow 方案"></a>box-shadow 方案</h2><h3 id="box-shadow-First-Try"><a href="#box-shadow-First-Try" class="headerlink" title="box-shadow First Try"></a>box-shadow First Try</h3><ol><li>将x偏移量 ，y偏移量设置为0px，此时阴影会在元素下面不会超出元素本身。</li><li>模糊度设为0px，使阴影呈现实体效果。</li><li>增大扩散半径，可以理解为阴影向外扩展半径。</li><li>此时阴影就像一条宽度为扩散半径的实线边框<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.6</span>);</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://img-blog.csdnimg.cn/20200610231531723.png" alt="在这里插入图片描述"></p><h3 id="box-shadow-Second-Try"><a href="#box-shadow-Second-Try" class="headerlink" title="box-shadow Second Try"></a>box-shadow Second Try</h3><p>box-shadow属性可以通过逗号分割添加多条阴影。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.6</span>),</span><br><span class="line">            0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 40<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(120, 120, 120, 0<span class="selector-class">.6</span>);</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200610231807105.png" alt="!\[在这里插入图片描述\](https://img-blog.csdnimg.cn/20200610231706575.pn"><br>要注意的是，阴影是<code>层层叠加</code>的，第一条阴影在最上层，以此类推，且阴影的半径都是以元素<code>border</code>的<code>外边沿为起点</code>。所以如果你想要两条宽<code>20px</code>的阴影，那么两条阴影的<code>扩散半径</code>需要分别设置<code>20px</code>，<code>40px</code></p><hr><p>我们需要注意的是，阴影不会影响元素的布局，我们可以从它的字面意思，阴影来理解，它不占用任何空间。并且元素上的绑定事件，并不会在阴影上触发。效果如图<br><img src="https://img-blog.csdnimg.cn/20200610232610906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="box-shadow-Third-Try"><a href="#box-shadow-Third-Try" class="headerlink" title="box-shadow Third Try"></a>box-shadow Third Try</h3><p>那么如果我们需要阴影像我们预期的一样，跟border有相同的表现，我们可以增加同样的外边框margin来模拟出阴影占据的空间。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin</span>: 40<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">box-shadow</span>: 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.6</span>),</span><br><span class="line">            0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 40<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(120, 120, 120, 0<span class="selector-class">.6</span>);</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/2020061023293232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="box-shadow-Fourth-Try"><a href="#box-shadow-Fourth-Try" class="headerlink" title="box-shadow Fourth Try"></a>box-shadow Fourth Try</h3><p>目前来讲，阴影的扩展方向都是从<code>border外边沿向外扩。</code>它虽然模拟出了空间，但是仍旧不会触发元素上的事件，如果你想在<code>事件</code>上也同<code>border</code>的表现一样，那么可以设置<code>inset</code>属性，使其向内扩散，并通过内边距<code>padding</code>来模拟空间。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin</span>: 40<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background-clip</span>: <span class="selector-tag">content-box</span>;</span><br><span class="line"><span class="selector-tag">box-shadow</span>: 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.6</span>),</span><br><span class="line">            0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 40<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(120, 120, 120, 0<span class="selector-class">.6</span>);</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200610233456274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>需要注意的是，边框的顺序发生了反转。如果阴影边框设置了透明度，因为涉及到透明度颜色叠加，需要自己取色。同样的透明度也会被背景色穿透，如果不想被背景色影响，可设置<code>background-clip: content-box;</code></p><h2 id="outline-方案"><a href="#outline-方案" class="headerlink" title="outline 方案"></a>outline 方案</h2><p>outline可以实现两条边框的方案，同时更加灵活可以实现虚线边框。<br><strong>border 和 outline 很类似，但有如下区别：</strong></p><ol><li>轮廓不占据空间（同阴影），绘制于元素内容周围。</li><li>outline不一定贴合圆角。</li><li>我们可以通过outline-offset设置负值，来使轮廓显示在元素内部。<h3 id="outline-First-Try"><a href="#outline-First-Try" class="headerlink" title="outline  First Try"></a>outline  First Try</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">blue</span>;</span><br><span class="line"><span class="selector-tag">outline</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">skyblue</span>;</span><br></pre></td></tr></table></figure></li></ol><p>不占据空间<br><img src="https://img-blog.csdnimg.cn/2020061023585033.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="outline-Second-Try"><a href="#outline-Second-Try" class="headerlink" title="outline Second Try"></a>outline Second Try</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">blue</span>;</span><br><span class="line"><span class="selector-tag">outline</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">skyblue</span>;</span><br><span class="line"><span class="selector-tag">border-radius</span>: 20<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p>不贴合圆角<br><img src="https://img-blog.csdnimg.cn/20200611000119188.png" alt="在这里插入图片描述"></p><h3 id="outline-Third-Try"><a href="#outline-Third-Try" class="headerlink" title="outline Third Try"></a>outline Third Try</h3><p><code>outline-offset</code> 属性实现的缝边效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-id">#333</span>;</span><br><span class="line"><span class="selector-tag">outline</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">dashed</span> <span class="selector-tag">white</span>;</span><br><span class="line"><span class="selector-tag">border-radius</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">outline-offset</span>: <span class="selector-tag">-30px</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200611000409118.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_9. 回文数（水题，三种方法）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_9.%20%E5%9B%9E%E6%96%87%E6%95%B0%EF%BC%88%E6%B0%B4%E9%A2%98%EF%BC%8C%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_9.%20%E5%9B%9E%E6%96%87%E6%95%B0%EF%BC%88%E6%B0%B4%E9%A2%98%EF%BC%8C%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: 121</span><br><span class="line">输出: true</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: -121</span><br><span class="line">输出: false</span><br><span class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入: 10</span><br><span class="line">输出: false</span><br><span class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</span><br><span class="line">进阶:</span><br><span class="line"></span><br><span class="line">你能不将整数转为字符串来解决这个问题吗？</span><br></pre></td></tr></table></figure><h3 id="解题思路一（字符串反转）"><a href="#解题思路一（字符串反转）" class="headerlink" title="解题思路一（字符串反转）"></a>解题思路一（字符串反转）</h3><ol><li>第一反应数字转字符串，然后前后对比。可以解决问题。</li></ol><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> xStr = x + <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> mid = +(xStr.length &gt;&gt; <span class="number">1</span>) + (+xStr.length % <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; mid; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xStr.charAt(i) != xStr.charAt(xStr.length - i - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路二（求得x的位数，xLen-Math-log10-x"><a href="#解题思路二（求得x的位数，xLen-Math-log10-x" class="headerlink" title="解题思路二（求得x的位数，xLen =  Math.log10(x))"></a>解题思路二（求得x的位数，xLen =  Math.log10(x))</h3><ol><li>求得长度，接下来跟字符串一样了。</li><li>parseInt(x / Math.pow(10, xLen)) 得到首位</li><li>x % 10 得到尾位</li><li>对比是否相等</li></ol><h3 id="代码实现二"><a href="#代码实现二" class="headerlink" title="代码实现二"></a>代码实现二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> xLen = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.log10(x));</span><br><span class="line">    <span class="keyword">while</span>(x &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x % <span class="number">10</span> != <span class="built_in">parseInt</span>(x / <span class="built_in">Math</span>.pow(<span class="number">10</span>, xLen))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        x = x % <span class="built_in">Math</span>.pow(<span class="number">10</span>, xLen);</span><br><span class="line">        x = <span class="built_in">parseInt</span>(x /= <span class="number">10</span>);</span><br><span class="line">        xLen-=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路三（反转尾部"><a href="#解题思路三（反转尾部" class="headerlink" title="解题思路三（反转尾部)"></a>解题思路三（反转尾部)</h3><ol><li>这个是官方题解，反转尾部，直到前半部分小于等于反转后的尾部</li><li>将x的尾部移出来，反转。一直到x剩下的前半部分等于或者小于反转的尾部。</li><li>前半部分小于尾部，说明到了x的中间位。<ol><li>跳出循环时，回文数只有两种情况。</li><li>第一种，x为偶数，直接判断首尾是否相同。</li><li>第二种，x为奇数，尾部除以10，再进行判断。</li></ol></li></ol><h3 id="代码实现三"><a href="#代码实现三" class="headerlink" title="代码实现三"></a>代码实现三</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x &gt; <span class="number">9</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> xTail = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x &gt; xTail) &#123;</span><br><span class="line">        xTail *= <span class="number">10</span>;</span><br><span class="line">        xTail += x % <span class="number">10</span>;</span><br><span class="line">        x = <span class="built_in">parseInt</span>(x / <span class="number">10</span>);</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x == xTail || x == <span class="built_in">parseInt</span>(xTail / <span class="number">10</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_面试题46. 把数字翻译成字符串（斐波那契）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_%E9%9D%A2%E8%AF%95%E9%A2%9846.%20%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_%E9%9D%A2%E8%AF%95%E9%A2%9846.%20%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: 12258</span><br><span class="line">输出: 5</span><br><span class="line">解释: 12258有5种不同的翻译，分别是&quot;bccfi&quot;, &quot;bwfi&quot;, &quot;bczi&quot;, &quot;mcfi&quot;和&quot;mzi&quot;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">0 &lt;= num &lt; 231</span><br></pre></td></tr></table></figure><h3 id="解题思路一（斐波那契数列）"><a href="#解题思路一（斐波那契数列）" class="headerlink" title="解题思路一（斐波那契数列）"></a>解题思路一（斐波那契数列）</h3><ol><li>我一般做题前喜欢先测试几个用例, 测试完发现这就是斐波那契数列</li><li>该题主要判断 <code>i-1, i</code> 两位组合成的数字是否在<code>(10, 25)</code>闭区间内. 如果在就是斐波那契<code>f(n) = f(n-1) + f(n-2)</code>, 否则跟上一种情况一致<code>f(n) = f(n-1)</code>.</li></ol><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">num</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> translateNum = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> numStr = num + <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> res;</span><br><span class="line">    <span class="keyword">if</span> (+(numStr[<span class="number">0</span>] + numStr[<span class="number">1</span>]) &lt; <span class="number">26</span> &amp;&amp; +numStr[<span class="number">0</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        res = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res = [<span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; numStr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (+(numStr[i - <span class="number">1</span>] + numStr[i]) &lt; <span class="number">26</span> &amp;&amp; +numStr[i - <span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            res[i] = res[i - <span class="number">1</span>] + res[i - <span class="number">2</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res[i] = res[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res[res.length<span class="number">-1</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS揭秘：1.半透明边框</title>
      <link href="/Css/CSS%E6%8F%AD%E7%A7%98%EF%BC%9A1.%E5%8D%8A%E9%80%8F%E6%98%8E%E8%BE%B9%E6%A1%86/"/>
      <url>/Css/CSS%E6%8F%AD%E7%A7%98%EF%BC%9A1.%E5%8D%8A%E9%80%8F%E6%98%8E%E8%BE%B9%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<h1 id="半透明边框"><a href="#半透明边框" class="headerlink" title="半透明边框"></a>半透明边框</h1><blockquote><p>背景知识：<code>RGBA/HSLA</code> 半透明颜色， 它们同样是一种颜色，并非只适用于背景。<br><code>background-clip</code> 背景裁切属性，定义了背景的延伸范围，是否延伸到<code>边框、内边距盒子、内容盒子，内容文字</code>下面。分别对应<code>border-box、padding-box、content-box、text</code>四个属性值<br><a id="more"></a></p></blockquote><h2 id="First-Try"><a href="#First-Try" class="headerlink" title="First Try"></a>First Try</h2><p>首先我们来尝试一下，假如我们想要实现一个半透明的边框，该如何写样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">hsla</span>(0, 0%, 0%, 0<span class="selector-class">.5</span>);</span><br><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">white</span></span><br></pre></td></tr></table></figure><p>这段css样式，我们期待的效果是有一个<strong>半透明的边框</strong>。而实际效果是怎么样的呢？<br><img src="https://img-blog.csdnimg.cn/20200609231145786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  <strong>！！！？border 不见了</strong></p><h2 id="Second-Try"><a href="#Second-Try" class="headerlink" title="Second Try"></a>Second Try</h2><p>没错，边框不见了。这跟我们所期待的效果并不符合。原因在于，默认情况下，<strong>背景颜色会延伸到边框上</strong>，这点我们可以通过虚线边框来发现实际发生了什么。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 30<span class="selector-tag">px</span> <span class="selector-tag">dashed</span> <span class="selector-tag">orange</span>;           </span><br><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">skyblue</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200609231721914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以，实际上我们的透明边框其实是存在的，只不过由于<strong>背景颜色透过边框</strong>，导致最终呈现出如同一个跟背景颜色一致的边框的效果。</p><h2 id="Third-Try"><a href="#Third-Try" class="headerlink" title="Third Try"></a>Third Try</h2><p>好在目前我们可以通过<code>background-clip</code>来处理背景色的延伸范围。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 30<span class="selector-tag">px</span> <span class="selector-tag">dashed</span> <span class="selector-tag">orange</span>;           </span><br><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">skyblue</span>;</span><br><span class="line"><span class="selector-tag">background-clip</span>: <span class="selector-tag">padding-box</span>;</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200609232056471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Finally-Finashed"><a href="#Finally-Finashed" class="headerlink" title="Finally Finashed"></a>Finally Finashed</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 30<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">hsla</span>(0, 0%, 100%, 0<span class="selector-class">.3</span>); </span><br><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">white</span>;</span><br><span class="line"><span class="selector-tag">background-clip</span>: <span class="selector-tag">padding-box</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200609232537463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>我们为了实现最终的效果，使用到了<code>background-color</code>， <code>border</code>，<code>background-clip</code> 和 <code>hsla/rgba</code>半透明颜色。</li><li><code>background-clip</code> 定义了背景的延伸范围，默认<code>border-box（从border的外边沿裁切背景）</code>，通过将其值设置为<code>padding-box（从padding外边沿开始裁切背景）</code>避免背景色延伸到边框下。</li><li><code>hsla/rgba</code> 实现了边框的半透明颜色</li></ol><h2 id="最终案例代码"><a href="#最终案例代码" class="headerlink" title="最终案例代码"></a>最终案例代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background: #ccc url("http://img.mp.itc.cn/upload/20170621/79ecb57d6e234e7891b6c9da3dfc12f9_th.jpg") no-repeat center;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 150px;</span><br><span class="line">            padding: 20px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 30<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">hsla</span>(0, 0%, 100%, 0<span class="selector-class">.3</span>);</span></span><br><span class="line"><span class="css">            <span class="comment">/* border: 30px solid rgba(120, 120, 120, 0.5); */</span></span></span><br><span class="line">            background-color: white;</span><br><span class="line">            background-clip: padding-box;</span><br><span class="line">        &#125;</span><br><span class="line">        p&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>半透明边框效果展示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_面试题29. 顺时针打印矩阵（分层 + 递归）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_%E9%9D%A2%E8%AF%95%E9%A2%9829.%20%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5%EF%BC%88%E5%88%86%E5%B1%82%20+%20%E9%80%92%E5%BD%92%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_%E9%9D%A2%E8%AF%95%E9%A2%9829.%20%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5%EF%BC%88%E5%88%86%E5%B1%82%20+%20%E9%80%92%E5%BD%92%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">输出：[1,2,3,6,9,8,7,4,5]</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]</span><br><span class="line">输出：[1,2,3,4,8,12,11,10,9,5,6,7]</span><br><span class="line"></span><br><span class="line">限制：</span><br><span class="line"></span><br><span class="line">0 &lt;= matrix.length &lt;= 100</span><br><span class="line">0 &lt;= matrix[i].length &lt;= 100</span><br><span class="line">注意：本题与主站 54 题相同：https://leetcode-cn.com/problems/spiral-matrix/</span><br></pre></td></tr></table></figure><h3 id="解题思路一（分层-递归）"><a href="#解题思路一（分层-递归）" class="headerlink" title="解题思路一（分层+递归）"></a>解题思路一（分层+递归）</h3><ol><li>首先明白题意,题目给出的示例数组是平铺的,不是特别清晰,可能短时间反应不过来它是想干嘛,我们先转换一下.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">[1,2,3],</span><br><span class="line">[4,5,6],</span><br><span class="line">[7,8,9]</span><br><span class="line">]</span><br><span class="line">1 -&gt; 2 -&gt; 3 -&gt; 6 -&gt; 9 -&gt; 8 -&gt; 7 -&gt; 4 -&gt; 5</span><br><span class="line"></span><br><span class="line">矩形外围开始,顺时针输出.</span><br></pre></td></tr></table></figure><ol start="2"><li>因为是从外层开始顺时针的,所以我们先看最外层的我们如何得到.<ol><li>首先最外层相当于一个正方形的四条边.(我们将顶点放入上下两条边)</li><li><code>top: [2]</code>, 加入左上和右上两个顶点为<code>[1, 2, 3]</code></li><li><code>right: [6]</code></li><li><code>bottom: [8]</code>, 加入左下和右下两个顶点为 <code>[7, 8, 9]</code></li><li><code>left: [4]</code></li><li>结果<code>[1,2,3,6,9,8,7,4,5]</code> 其中<code>left, bottom</code> 需要反转过来.(因为顺时针)</li></ol></li><li>剥离之后,原来的矩形只剩下了<code>[[5]]</code>, 假若我们矩形是多层的, 那么剩下来的仍然是个矩形,那么我们就可以将剩下的矩阵重新传入, 重复上面第二步求出<code>top right bottom left</code> <h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">matrix</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> spiralOrder = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> matrix[<span class="number">0</span>] || [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (matrix[<span class="number">0</span>].length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> matrix.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">sum, item</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> [...sum, ...item];</span><br><span class="line">        &#125;, [])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> top = matrix.shift();</span><br><span class="line">    <span class="keyword">let</span> right = [], left = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">        right.push(matrix[i].pop());</span><br><span class="line">        left.unshift(matrix[i].shift());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> bottom = matrix.pop().reverse();</span><br><span class="line">    <span class="keyword">let</span> res = [...top, ...right, ...bottom, ...left];</span><br><span class="line">    <span class="keyword">return</span> res.concat(spiralOrder(matrix));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_238. 除自身以外数组的乘积（左右乘积列表）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_238.%20%E9%99%A4%E8%87%AA%E8%BA%AB%E4%BB%A5%E5%A4%96%E6%95%B0%E7%BB%84%E7%9A%84%E4%B9%98%E7%A7%AF%EF%BC%88%E5%B7%A6%E5%8F%B3%E4%B9%98%E7%A7%AF%E5%88%97%E8%A1%A8%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_238.%20%E9%99%A4%E8%87%AA%E8%BA%AB%E4%BB%A5%E5%A4%96%E6%95%B0%E7%BB%84%E7%9A%84%E4%B9%98%E7%A7%AF%EF%BC%88%E5%B7%A6%E5%8F%B3%E4%B9%98%E7%A7%AF%E5%88%97%E8%A1%A8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">给你一个长度为 n 的整数数组 nums，其中 n &gt; 1，返回输出数组 output ，其中 output[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入: [1,2,3,4]</span><br><span class="line">输出: [24,12,8,6]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：题目数据保证数组之中任意元素的全部前缀元素和后缀（甚至是整个数组）的乘积都在 32 位整数范围内。</span><br><span class="line"></span><br><span class="line">说明: 请不要使用除法，且在 O(n) 时间复杂度内完成此题。</span><br></pre></td></tr></table></figure><h3 id="解题思路一（左右乘积列表）"><a href="#解题思路一（左右乘积列表）" class="headerlink" title="解题思路一（左右乘积列表）"></a>解题思路一（左右乘积列表）</h3><ol><li>如果可以用除法，那我们只需要求出列表乘积，然后除以<code>nums[i]</code>就是所求值了。</li><li>不用除法的情况下，我们需要求得<code>nums[i]</code>的左侧乘积L，和右侧乘积R，然后<code>L*R</code>求得目标值</li><li>那么我们创建两个乘积列表<code>L,R</code>。<code>L[i]</code>代表从<code>nums</code>中从<code>0 ~ i</code>的乘积，<code>R[i]</code>代表<code>nums</code>中从<code>i ~ nums.length - 1</code>的乘积。</li><li>那么我们所求的<code>output[i]</code>就变成了<code>L[I-1] * R[i+1]</code>;<h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> productExceptSelf = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> nums.reverse();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> L = [nums[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">let</span> R = <span class="keyword">new</span> <span class="built_in">Array</span>(nums.length);</span><br><span class="line">    R[nums.length<span class="number">-1</span>] = nums[nums.length<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>, j = nums.length - <span class="number">2</span>; i &lt; nums.length; i++, j--) &#123;</span><br><span class="line">        L[i] = L[i<span class="number">-1</span>] * nums[i];</span><br><span class="line">        R[j] = R[j + <span class="number">1</span>] * nums[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        nums[i] = L[i<span class="number">-1</span>] * R[i + <span class="number">1</span>]; </span><br><span class="line">    &#125;</span><br><span class="line">    nums[<span class="number">0</span>] = R[<span class="number">1</span>];</span><br><span class="line">    nums[nums.length<span class="number">-1</span>] = L[nums.length<span class="number">-2</span>];</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_1431. 拥有最多糖果的孩子</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_1431.%20%E6%8B%A5%E6%9C%89%E6%9C%80%E5%A4%9A%E7%B3%96%E6%9E%9C%E7%9A%84%E5%AD%A9%E5%AD%90/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_1431.%20%E6%8B%A5%E6%9C%89%E6%9C%80%E5%A4%9A%E7%B3%96%E6%9E%9C%E7%9A%84%E5%AD%A9%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">给你一个数组 candies 和一个整数 extraCandies ，其中 candies[i] 代表第 i 个孩子拥有的糖果数目。</span><br><span class="line"></span><br><span class="line">对每一个孩子，检查是否存在一种方案，将额外的 extraCandies 个糖果分配给孩子们之后，此孩子有 最多 的糖果。注意，允许有多个孩子同时拥有 最多 的糖果数目。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：candies = [2,3,5,1,3], extraCandies = 3</span><br><span class="line">输出：[true,true,true,false,true] </span><br><span class="line">解释：</span><br><span class="line">孩子 1 有 2 个糖果，如果他得到所有额外的糖果（3个），那么他总共有 5 个糖果，他将成为拥有最多糖果的孩子。</span><br><span class="line">孩子 2 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。</span><br><span class="line">孩子 3 有 5 个糖果，他已经是拥有最多糖果的孩子。</span><br><span class="line">孩子 4 有 1 个糖果，即使他得到所有额外的糖果，他也只有 4 个糖果，无法成为拥有糖果最多的孩子。</span><br><span class="line">孩子 5 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：candies = [4,2,1,1,2], extraCandies = 1</span><br><span class="line">输出：[true,false,false,false,false] </span><br><span class="line">解释：只有 1 个额外糖果，所以不管额外糖果给谁，只有孩子 1 可以成为拥有糖果最多的孩子。</span><br><span class="line">示例 3：</span><br><span class="line"></span><br><span class="line">输入：candies = [12,1,12], extraCandies = 10</span><br><span class="line">输出：[true,false,true]</span><br></pre></td></tr></table></figure><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li>这个题的话，理解好题意，很好回答。</li><li>题意转化后的意思就是，看candies中各项<code>candies[i] + extraCandies</code> 是否是<code>candies</code>中的<code>最大值max</code>。</li><li>那么首先我们先找出来最大值，然后看其他各位加上extraCandies 之后能不能大于或者等于它，可以的话，该i位为true，否则为false。<h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">candies</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">extraCandies</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> kidsWithCandies = <span class="function"><span class="keyword">function</span>(<span class="params">candies, extraCandies</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> max = <span class="built_in">Math</span>.max(...candies);</span><br><span class="line">    <span class="keyword">return</span> candies.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (item + extraCandies &gt;= max)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_974. 和可被 K 整除的子数组（前序和 + 同余定理）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_974.%20%E5%92%8C%E5%8F%AF%E8%A2%AB%20K%20%E6%95%B4%E9%99%A4%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%EF%BC%88%E5%89%8D%E5%BA%8F%E5%92%8C%20+%20%E5%90%8C%E4%BD%99%E5%AE%9A%E7%90%86%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_974.%20%E5%92%8C%E5%8F%AF%E8%A2%AB%20K%20%E6%95%B4%E9%99%A4%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%EF%BC%88%E5%89%8D%E5%BA%8F%E5%92%8C%20+%20%E5%90%8C%E4%BD%99%E5%AE%9A%E7%90%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">给定一个整数数组 A，返回其中元素之和可被 K 整除的（连续、非空）子数组的数目。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"></span><br><span class="line">输入：A = [4,5,0,-2,-3,1], K = 5</span><br><span class="line">输出：7</span><br><span class="line">解释：</span><br><span class="line">有 7 个子数组满足其元素之和可被 K = 5 整除：</span><br><span class="line">[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">1 &lt;= A.length &lt;= 30000</span><br><span class="line">-10000 &lt;= A[i] &lt;= 10000</span><br><span class="line">2 &lt;= K &lt;= 10000</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一-暴力枚举，O（n-3）"><a href="#解题思路一-暴力枚举，O（n-3）" class="headerlink" title="解题思路一(暴力枚举，O（n^3）)"></a>解题思路一(暴力枚举，O（n^3）)</h3><ol><li>暴力枚举所有的前序和，判断<code>对K取模</code>是否为<code>0</code>，为<code>0</code>则结果<code>+1</code><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">A</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">K</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> subarraysDivByK = <span class="function"><span class="keyword">function</span>(<span class="params">A, K</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> prev = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            prev += A[j];</span><br><span class="line">            <span class="keyword">if</span> (prev % K === <span class="number">0</span>) &#123;</span><br><span class="line">                res++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="解题思路二-暴力枚举优化-O（n-2）"><a href="#解题思路二-暴力枚举优化-O（n-2）" class="headerlink" title="解题思路二(暴力枚举优化,O（n^2）)"></a>解题思路二(暴力枚举优化,O（n^2）)</h3><ol><li>将两层for循环中的求前序和操作，提前求。</li><li>那么我们求i之前的所有前序和就变成了，求<code>p[i] - p[j]</code> (j的范围是 <code>0 ~ i-1)</code></li><li>判断<code>p[i] - p[j]</code>对K去模是否为0，为0则结果+1<h3 id="代码实现二"><a href="#代码实现二" class="headerlink" title="代码实现二"></a>代码实现二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">A</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">K</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> subarraysDivByK = <span class="function"><span class="keyword">function</span>(<span class="params">A, K</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Array</span>(A.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">        p[i] = A.slice(<span class="number">0</span>, i+<span class="number">1</span>).reduce(<span class="function">(<span class="params">sum, item, key, arr</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> sum += item;</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span>((p[i] - p[j]) % K === <span class="number">0</span>) &#123;</span><br><span class="line">                res++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p[i] % K === <span class="number">0</span>) &#123;</span><br><span class="line">            res++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="解题思路三-同余定理，O（n）"><a href="#解题思路三-同余定理，O（n）" class="headerlink" title="解题思路三(同余定理，O（n）)"></a>解题思路三(同余定理，O（n）)</h3><blockquote><p>先理解一个数学问题，  假设<code>a = 8，b = 13</code>, 同时mod <code>5</code>，那么 <code>a % 5 == 3，b % 5 == 3，即a % 5 ==  b % 5</code>则<code>(b - a) % 5 == 0</code>，<code>即对同一数取模相同的两个值，其差值可整除该数。</code></p><ol><li>将两层for循环中的求前序和操作，提前求前序和序列p。</li><li>得到所有的前序和p之后，理解说明若 <code>p[i] % K  ===  p[j] % K</code> 则<code>p[i] - p[j] % 5 === 0</code>那么<code>j</code>到<code>i</code>就是我们求的一个目标子序列。</li><li>所以我们建立一个<code>hash</code>，用来存储p序列<code>取模之后</code>的值。 <code>hash</code>的键值范围是<code>（0 ~ K -1）</code>因为是对K取余，所以值只可能出现在该范围中。</li><li>由于该hash的标记跟数组下标正好对应，所以hash就声明为一个数组。</li><li>以示例为例<pre><code>1. 输入：`A = [4,5,0,-2,-3,1], K = 5`2. p序列为  `[4, 9, 9, 7, 4, 5]` 取模之后的序列为`[4, 4, 4, 2, 4, 0]` 记录到hash中3. hash = `[1, 0, 1, 0, 4]` 4. 接下来就是排列组合的问题了，将hash列表中 `&gt; 1` 的值进行计算 `n * ( n - 1 ) / 2` 取和5. 最后再加上`hash[0]`的个数，因为`hash[0]`标记的是取模之后为`0`的值的个数，本身就属于目标子序列。</code></pre></li><li>第五步我们是先求出hash表才计算个数，我们也可以在完善hash的同时计算。<ol><li>比如p序列为  <code>[4, 9, 9, 7, 4, 5]</code> 去模的过程中统计。</li><li>计算第<code>1</code>个取模，模值为4，<code>res += hash[4],</code> <code>hash[4]++,</code>由于<code>4</code>是第<code>1</code>次出现所以目前<code>res+=0</code></li><li>计算第<code>2</code>个取模，模值为4，<code>res += hash[4],</code> <code>hash[4]++,</code>由于<code>4</code>是第<code>2</code>次出现所以目前<code>res+=1</code>，子序列下标范围是<code>[0,1]</code></li><li>计算第3个取模，模值为4，<code>res += hash[4],</code> <code>hash[4]++,</code>由于<code>4</code>是第<code>3</code>次出现所以目前<code>res+=2</code>，子序列下标范围是<code>[0,1,2]，[1,2]</code>因为4出现3次，所以第3个4可以和前两个组合。</li><li>依次类推。</li></ol></li></ol></blockquote><h3 id="代码实现三"><a href="#代码实现三" class="headerlink" title="代码实现三"></a>代码实现三</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">A</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">K</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> subarraysDivByK = <span class="function"><span class="keyword">function</span>(<span class="params">A, K</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hash = <span class="keyword">new</span> <span class="built_in">Array</span>(K).fill(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">        sum += A[i];</span><br><span class="line">        <span class="keyword">let</span> key = sum % K;</span><br><span class="line">        key = key &lt; <span class="number">0</span> ? (key + K) : key; <span class="comment">//处理负数的情况, (3 - (-2)) % 5 === 0</span></span><br><span class="line">        res += hash[key];</span><br><span class="line">        hash[key]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res + hash [<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_146. LRU缓存机制（vue的keep-Live所使用的缓存机制）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_146.%20LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%EF%BC%88vue%E7%9A%84keep-live%E6%89%80%E4%BD%BF%E7%94%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_146.%20LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%EF%BC%88vue%E7%9A%84keep-live%E6%89%80%E4%BD%BF%E7%94%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。</span><br><span class="line"></span><br><span class="line">获取数据 get(key) - 如果关键字 (key) 存在于缓存中，则获取关键字的值（总是正数），否则返回 -1。</span><br><span class="line">写入数据 put(key, value) - 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字/值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">进阶:</span><br><span class="line"></span><br><span class="line">你是否可以在 O(1) 时间复杂度内完成这两种操作？</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li><a href="https://baike.baidu.com/item/LRU" target="_blank" rel="noopener">LRU缓存机制</a>，可以自行百度一下。<ol><li>特点1，hash表读取数据</li><li>特点2，存在一个<code>keys</code>序列，代表缓存的所有<code>key</code>，顺序按照最近的<code>活跃度</code>来排序，比如你<code>刚刚</code>用过<code>key为1</code> 的值，那么<code>1</code>就会排在<code>keys序列</code>的第<code>一</code>位。当缓存<code>超出</code>的时候，会优先<code>删除keys</code>的<code>末尾</code>。</li></ol></li><li>所以我们主要维护了一个hash，js中就是一个对象，用来存数据。一个序列也就是一个数组存keys。</li><li>get：如果将get的key，位置置换到首位。并返回数据。</li><li>put：将put设置的值的key，放在keys序列首位，判断是否超出，超出则删除最后一位。<h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">capacity</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> LRUCache = <span class="function"><span class="keyword">function</span>(<span class="params">capacity</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.objKeys = [];</span><br><span class="line">    <span class="keyword">this</span>.limit = capacity;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">key</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LRUCache.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.obj[key]) &#123;</span><br><span class="line">        <span class="keyword">this</span>.objKeys.splice(<span class="keyword">this</span>.objKeys.indexOf(key), <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">this</span>.objKeys.unshift(key);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.obj[key];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>key </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">value</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LRUCache.prototype.put = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.obj[key] &amp;&amp; <span class="keyword">this</span>.objKeys.splice(<span class="keyword">this</span>.objKeys.indexOf(key), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">this</span>.objKeys.unshift(key);</span><br><span class="line">    <span class="keyword">this</span>.obj[key] = value;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.objKeys.length &gt; <span class="keyword">this</span>.limit) &#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>.obj[<span class="keyword">this</span>.objKeys[<span class="keyword">this</span>.limit]];</span><br><span class="line">        <span class="keyword">this</span>.objKeys.length -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new LRUCache(capacity)</span></span><br><span class="line"><span class="comment"> * var param_1 = obj.get(key)</span></span><br><span class="line"><span class="comment"> * obj.put(key,value)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_287. 寻找重复数（二分法）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_287.%20%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0%EF%BC%88%E4%BA%8C%E5%88%86%E6%B3%95%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_287.%20%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0%EF%BC%88%E4%BA%8C%E5%88%86%E6%B3%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [1,3,4,2,2]</span><br><span class="line">输出: 2</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: [3,1,3,4,2]</span><br><span class="line">输出: 3</span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line">不能更改原数组（假设数组是只读的）。</span><br><span class="line">只能使用额外的 O(1) 的空间。</span><br><span class="line">时间复杂度小于 O(n2) 。</span><br><span class="line">数组中只有一个重复的数字，但它可能不止重复出现一次。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li>先放一种前端比较好理解的。</li><li>indexOf会返回数组中该元素出现的第一次的位置</li><li>我们利用这个特性，当indexOf的值跟目前的index不一致时，说明之前出现过一次。返回即可<h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    nums.map(<span class="function">(<span class="params">item, key, arr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.indexOf(item) !== key) &#123;</span><br><span class="line">            res = item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="解题思路二（二分法）"><a href="#解题思路二（二分法）" class="headerlink" title="解题思路二（二分法）"></a>解题思路二（二分法）</h3><ol><li>首先看题意：数字范围为<code>1 ~ n</code>，那其实就是在<code>1~n</code>的范围内找到哪个元素在<code>nums</code>中<code>重复存在</code>。</li><li>so，<code>1 ~ n</code>的序列。是<code>有序</code>的，可以用二分找了，以<code>1~n</code>为基础，以<code>nums</code>为条件判断的元素。</li><li>那怎么找呢。比如我们找到中间节点<code>mid</code>，判断<code>nums</code>数组中比<code>mid小</code>的有多少个<code>（prev）</code>，<ol><li>按正常来讲比如<code>mid为3</code>，那么从<code>1到n &lt;= 3</code>的数量应就是<code>[1,2,3]</code>,一共是<code>3</code>个啦。</li><li>所以如果重复的元素<code>比3小</code>的话，那么<code>3</code>的<code>prev</code>就变成<code>4以上</code>了，因为[1,2,3]就变成了<code>[1,1,2,3]</code>或者<code>[1,2,2,3]</code>,等等，</li><li>所以我们就可以通过<code>prev</code>的大小来锁定重复元素的范围是在<code>1 ~ mid</code>还是在<code>mid+1 ~ n</code>；</li></ol></li><li>接下来就很简单了。就是一个二分法了。<h3 id="代码实现一-1"><a href="#代码实现一-1" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">start, end, nums</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (end == start) &#123; <span class="comment">//找到最终目标了</span></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">void</span> ( res = end );</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> mid = start + ((end - start) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">let</span> prev = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= mid) &#123;</span><br><span class="line">                prev++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (prev &gt; mid) &#123;</span><br><span class="line">            find(start, mid, nums)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            find(mid + <span class="number">1</span>, end, nums)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    find(<span class="number">1</span>, nums.length - <span class="number">1</span>, nums);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_105. 从前序与中序遍历序列构造二叉树（前序找根，中序分左右，递归）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_105.%20%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E5%89%8D%E5%BA%8F%E6%89%BE%E6%A0%B9%EF%BC%8C%E4%B8%AD%E5%BA%8F%E5%88%86%E5%B7%A6%E5%8F%B3%EF%BC%8C%E9%80%92%E5%BD%92%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_105.%20%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E5%89%8D%E5%BA%8F%E6%89%BE%E6%A0%B9%EF%BC%8C%E4%B8%AD%E5%BA%8F%E5%88%86%E5%B7%A6%E5%8F%B3%EF%BC%8C%E9%80%92%E5%BD%92%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">根据一棵树的前序遍历与中序遍历构造二叉树。</span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">你可以假设树中没有重复的元素。</span><br><span class="line"></span><br><span class="line">例如，给出</span><br><span class="line"></span><br><span class="line">前序遍历 preorder = [3,9,20,15,7]</span><br><span class="line">中序遍历 inorder = [9,3,15,20,7]</span><br><span class="line">返回如下的二叉树：</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li><code>前序找根</code>，<code>中序分左右</code>，<code>递归</code>即可。</li><li>根为前序第一个值。<code>let root = new TreeNode(preorder[0]);</code></li><li>找到根在中序中的位置<code>let rootIndex = inorder.indexOf(root.val);</code></li><li><p>左右分开。left为左中序，right为右中序，preLeft为左前序，preRight为右</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> left = inorder.slice(<span class="number">0</span>, rootIndex);</span><br><span class="line"> <span class="keyword">let</span> right = inorder.slice(rootIndex + <span class="number">1</span>, inorder.length);</span><br><span class="line"> <span class="keyword">let</span> preLeft = preorder.slice(<span class="number">1</span>, left.length + <span class="number">1</span>);</span><br><span class="line"> <span class="keyword">let</span> preRight = preorder.slice(left.length + <span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>找到左右各自的前中序列。即可递归找根了。</p><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">preorder</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">inorder</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buildTree = <span class="function"><span class="keyword">function</span> <span class="title">buildTree</span>(<span class="params">preorder, inorder</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (preorder.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> root = <span class="keyword">new</span> TreeNode(preorder[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (preorder.length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> rootIndex = inorder.indexOf(root.val);</span><br><span class="line">    <span class="keyword">let</span> left = inorder.slice(<span class="number">0</span>, rootIndex);</span><br><span class="line">    <span class="keyword">let</span> right = inorder.slice(rootIndex + <span class="number">1</span>, inorder.length);</span><br><span class="line">    <span class="keyword">let</span> preLeft = preorder.slice(<span class="number">1</span>, left.length + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> preRight = preorder.slice(left.length + <span class="number">1</span>);</span><br><span class="line">    left.length &amp;&amp; (root.left = buildTree(preLeft, left));</span><br><span class="line">    right.length &amp;&amp; (root.right = buildTree(preRight, right));</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_5. 最长回文子串</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_5.%20%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_5.%20%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入: &quot;babad&quot;</span><br><span class="line">输出: &quot;bab&quot;</span><br><span class="line">注意: &quot;aba&quot; 也是一个有效答案。</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入: &quot;cbbd&quot;</span><br><span class="line">输出: &quot;bb&quot;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li>遍历字符串，从i开始向左右扩展对比 <code>i--, i++</code> 是否相同，过程求出最大值。</li><li>以上仅检测奇数回文即：<code>&quot;cbabc&quot;</code>而不能检测<code>cbbc</code></li><li>对原字符串进行改造例如<code>&quot;cbbc&quot;</code> =&gt; <code>&quot;c#b#b#c&quot;</code>这样就可以以#为中心对比了。（奇数长度例如<code>&quot;cbabc&quot;</code> =&gt; <code>c#b#a#b#c</code>并不会被#影响，所以不用担心破坏了对比结构。）</li><li>对比过程中要注意不要让<code>#b#</code>把<code>b#b</code>这样的情况给顶替了。相同长度时要取末尾为字母的。</li></ol><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    s = s.split(<span class="string">''</span>).join(<span class="string">'#'</span>);</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> end = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> left = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> right = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(left) === s.charAt(right)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (max &lt; (right - left) &amp;&amp; s.charAt(right) !== <span class="string">'#'</span>) &#123;</span><br><span class="line">                    max = right - left;</span><br><span class="line">                    start = left;</span><br><span class="line">                    end = right;</span><br><span class="line">                &#125;</span><br><span class="line">                right++;</span><br><span class="line">                left--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.slice(start, end + <span class="number">1</span>).split(<span class="string">'#'</span>).join(<span class="string">''</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leecode_1371. 每个元音包含偶数次的最长子字符串（前缀和）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleecode_1371.%20%E6%AF%8F%E4%B8%AA%E5%85%83%E9%9F%B3%E5%8C%85%E5%90%AB%E5%81%B6%E6%95%B0%E6%AC%A1%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88%E5%89%8D%E7%BC%80%E5%92%8C%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleecode_1371.%20%E6%AF%8F%E4%B8%AA%E5%85%83%E9%9F%B3%E5%8C%85%E5%90%AB%E5%81%B6%E6%95%B0%E6%AC%A1%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88%E5%89%8D%E7%BC%80%E5%92%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">给你一个字符串 s ，请你返回满足以下条件的最长子字符串的长度：每个元音字母，即 &apos;a&apos;，&apos;e&apos;，&apos;i&apos;，&apos;o&apos;，&apos;u&apos; ，在子字符串中都恰好出现了偶数次。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：s = &quot;eleetminicoworoep&quot;</span><br><span class="line">输出：13</span><br><span class="line">解释：最长子字符串是 &quot;leetminicowor&quot; ，它包含 e，i，o 各 2 个，以及 0 个 a，u 。</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：s = &quot;leetcodeisgreat&quot;</span><br><span class="line">输出：5</span><br><span class="line">解释：最长子字符串是 &quot;leetc&quot; ，其中包含 2 个 e 。</span><br><span class="line">示例 3：</span><br><span class="line"></span><br><span class="line">输入：s = &quot;bcbcbc&quot;</span><br><span class="line">输出：6</span><br><span class="line">解释：这个示例中，字符串 &quot;bcbcbc&quot; 本身就是最长的，因为所有的元音 a，e，i，o，u 都出现了 0 次。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">1 &lt;= s.length &lt;= 5 x 10^5</span><br><span class="line">s 只包含小写英文字母。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li>首先要理解这个题。这道题明显还是跟<code>前缀</code>有关系的东西，毫无疑问肯定又需要用到<code>动态规划</code>保存状态。</li><li>我们先来看子字符串中的各元音字母的个数，题目呢，要求的是<code>偶数次</code>，那么我们的<code>a，e，i，o，u</code>的出现次数是不是可以转化为出现<code>次数</code>的<code>奇偶性</code>呢？即<ol><li><code>nums % 2 === 1 是奇数次</code></li><li><code>nums % 2 === 0 是偶数次</code></li></ol></li><li><p>那么我们的<code>a，e，i，o，u</code>的各自状态就只有两种情况啦，<code>0 or 1</code>，例如 </p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'a'</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">'e'</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">'o'</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">'i'</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">'u'</span>: <span class="number">0</span></span><br></pre></td></tr></table></figure><p> 那我们现在用二进制来表示一下它：<code>00100</code>， 那么类似于这样的表示有几种情况呢？ <code>2 x 2 x 2 x 2 x 2 = 32</code>仅仅只有<code>32</code>种情况，就可以完全表示元音字母的<code>所有状态</code>了。那么我们声明一个长度为<code>32</code>的<code>status</code>数组，值都初始化为<code>-1</code>。</p></li><li>按照正常思维，符合条件的情况有两种子字符串，一是<code>从头开始</code>的，一个是从<code>中间开始</code>的。<ol><li>从头开始的很容易理解（假设首位下标为<code>0，i</code>），只要从<code>0到i</code>，状态为<code>00000</code>就可以了。代表都是偶数次出现。</li><li>从中间开始的话（假设首位下标为<code>j，i</code>），是从<code>j到i</code>这个子字符串的状态为<code>00000</code></li><li>那什么情况下子字符串的状态可以是00000呢？ 那当然是i，j各自的状态一致的时候，因为同状态互减才会为0，例如<code>01000 - 01000 = 00000</code></li><li>so，01000在字串中是会出现多次的，因为<code>2%2 == 0， 4%2===0</code>状态也是会重复的，所以我们想求出这个状态之间的最大间距，就要记录该状态<code>最早出现</code>的下标。</li></ol></li><li>好了，理解了这个状态之后，我们明确了我们要记录的值，记录该位置的状态下的最早下标。</li><li>我们是不是可以记录一下，从<code>第1个字母开始到第i个字母之间</code>的各元音<code>状态</code>呢？</li><li>例如：<code>&quot;eleetminicoworoep&quot;</code> 对应的状态数组<code>[01000,01000,00000,01000,01000,01000,01100...]</code></li><li><code>i 为 0，1，3，4，5</code> 的时候状态都一致，那么我们只需要记录<code>status[8] = 0,</code>取最小值即可。</li><li>所以<code>status</code>数组记录的是32种状态各自在字符串中<code>最早出现的下标</code></li><li>最后我们遍历字符串，求出每一位的<code>状态key(例如01000)</code> ，根据这个<code>key和下标i</code>，我们去<code>status</code>里面找<code>key</code>的<code>最小下标status[key]</code>，然后用<code>i - status[key]</code>求出距离长度。若<code>status[key]为-1</code>，则将下标i赋值给<code>status[key] = i</code></li></ol><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findTheLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hash = &#123;</span><br><span class="line">        <span class="string">'a'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'e'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'o'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'i'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'u'</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> status = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">32</span>).fill(<span class="number">-1</span>);</span><br><span class="line">    status[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> key = <span class="number">0</span>;</span><br><span class="line">        hash[s.charAt(i)] !== <span class="literal">undefined</span> ? hash[s.charAt(i)] = (hash[s.charAt(i)] + <span class="number">1</span>) % <span class="number">2</span> : <span class="string">''</span>;</span><br><span class="line">        key += hash[<span class="string">'a'</span>] + (hash[<span class="string">'e'</span>] &lt;&lt; <span class="number">1</span>) + (hash[<span class="string">'i'</span>] &lt;&lt; <span class="number">2</span>) + (hash[<span class="string">'o'</span>] &lt;&lt; <span class="number">3</span>) + (hash[<span class="string">'u'</span>] &lt;&lt; <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">if</span> (status[key] === <span class="number">-1</span>) &#123;</span><br><span class="line">            status[key] = i + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            max = <span class="built_in">Math</span>.max(max, i + <span class="number">1</span> - status[key])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_680. 验证回文字符串 Ⅱ（双指针）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_680.%20%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2%20%E2%85%A1%EF%BC%88%E5%8F%8C%E6%8C%87%E9%92%88%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_680.%20%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2%20%E2%85%A1%EF%BC%88%E5%8F%8C%E6%8C%87%E9%92%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: &quot;aba&quot;</span><br><span class="line">输出: True</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: &quot;abca&quot;</span><br><span class="line">输出: True</span><br><span class="line">解释: 你可以删除c字符。</span><br><span class="line">注意:</span><br><span class="line"></span><br><span class="line">字符串只包含从 a-z 的小写字母。字符串的最大长度是50000。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li>回文字符串，字符串<code>正序反序都一样</code>。同样也是<code>对称</code>的。</li><li>正反指针，一个从<code>头</code>，一个从<code>末尾</code>，对比。</li><li>找到不同的位置，去掉该位置的值。（可能为<code>i</code>，也可能为<code>length-1-i</code>）</li><li>若两种情况中<code>有一种</code>是回文。那就返回<code>true</code>。否则返回<code>false</code></li><li>找不到不同的值当然也返回<code>true</code></li></ol><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> validPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sArr = s.split(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= (sArr.length &gt;&gt; <span class="number">1</span>); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sArr[i] !== sArr[sArr.length - i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">let</span> f = [...sArr];</span><br><span class="line">            f.splice(i,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">let</span> f2 = [...sArr]; </span><br><span class="line">            f2.splice(sArr.length - i - <span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> ((f+<span class="string">''</span>) == ([...f].reverse()+<span class="string">''</span>) || (f2 + <span class="string">''</span>) == ([...f2].reverse() + <span class="string">''</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_152. 乘积最大子数组（动态规划）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_152.%20%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_152.%20%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [2,3,-2,4]</span><br><span class="line">输出: 6</span><br><span class="line">解释: 子数组 [2,3] 有最大乘积 6。</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: [-2,0,-1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li>该题与之前所写的<a href="https://blog.csdn.net/lunhui1994_/article/details/106136488" target="_blank" rel="noopener">560.和为K的子数组</a>很相似，解法也都是一样的。</li><li>依旧是对前缀进行操作。不同的是，我们这次不需要保留所有的结果，只需要保留本次结果的最大值<code>nowMax</code> 和最小值<code>nowMin</code> 。取min主要是为了复数的情况。</li><li>我们依赖于上一次的状态，求出本次的最大最小值。然后传入下一次状态。<pre><code>1. `nowMax = Math.max(res[0] * nums[i], res[1] * nums[i], nums[i]);` 2. `nowMin = Math.min(res[0] * nums[i], res[1] * nums[i], nums[i]);`   3. `res = [nowMax, nowMin  ]`</code></pre></li><li>在此过程中我们可以求出最大值max</li></ol><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProduct = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!nums.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> max = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> min = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> res = [nums[<span class="number">0</span>], nums[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span> ; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> nowMax = <span class="built_in">Math</span>.max(res[<span class="number">0</span>] * nums[i], res[<span class="number">1</span>] * nums[i], nums[i]);</span><br><span class="line">        <span class="keyword">let</span> nowMin = <span class="built_in">Math</span>.min(res[<span class="number">0</span>] * nums[i], res[<span class="number">1</span>] * nums[i], nums[i]);</span><br><span class="line">        max = <span class="built_in">Math</span>.max(nowMax, max);</span><br><span class="line">        <span class="comment">// min = Math.min(nowMin, min);</span></span><br><span class="line">        res = [nowMax, nowMin];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_210. 课程表 II</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_210.%20%E8%AF%BE%E7%A8%8B%E8%A1%A8%20II%EF%BC%88BFS%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_210.%20%E8%AF%BE%E7%A8%8B%E8%A1%A8%20II%EF%BC%88BFS%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">现在你总共有 n 门课需要选，记为 0 到 n-1。</span><br><span class="line"></span><br><span class="line">在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]</span><br><span class="line"></span><br><span class="line">给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。</span><br><span class="line"></span><br><span class="line">可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: 2, [[1,0]] </span><br><span class="line">输出: [0,1]</span><br><span class="line">解释: 总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: 4, [[1,0],[2,0],[3,1],[3,2]]</span><br><span class="line">输出: [0,1,2,3] or [0,2,1,3]</span><br><span class="line">解释: 总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。</span><br><span class="line">     因此，一个正确的课程顺序是 [0,1,2,3] 。另一个正确的排序是 [0,2,1,3] 。</span><br><span class="line">说明:</span><br><span class="line"></span><br><span class="line">输入的先决条件是由边缘列表表示的图形，而不是邻接矩阵。详情请参见图的表示法。</span><br><span class="line">你可以假定输入的先决条件中没有重复的边。</span><br><span class="line">提示:</span><br><span class="line"></span><br><span class="line">这个问题相当于查找一个循环是否存在于有向图中。如果存在循环，则不存在拓扑排序，因此不可能选取所有课程进行学习。</span><br><span class="line">通过 DFS 进行拓扑排序 - 一个关于Coursera的精彩视频教程（21分钟），介绍拓扑排序的基本概念。</span><br><span class="line">拓扑排序也可以通过 BFS 完成。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li>首先要理解题意，该题的目的是要我们按依赖顺序排序。</li><li>二维数组中，首位表示一门课程，数组余下的值表示，学习该课程之前所要完成的。例如[3,1],[3,2] 表示，最后的序列，<code>3要在2和1</code>的后面</li><li>所以的我的做法是：以 <code>4, [[1,0],[2,0],[3,1],[3,2]]</code>为例<ol><li>利用hash收集每门课程的前置课程：<code>{1:[0], 2:[0], 3:[1, 2], 0:[]}</code>,[]表示该门课程不需要前序课程，这种课程就可以直接放入序列中了。</li><li>第二步要做两件事：1. 将<code>前序为空</code>的课程<code>放入序列</code>，<code>删除</code>已经放入序列的课程。2. <code>遍历hash</code>，在各课程的前序课程中，<code>去掉</code>已经<code>放入序列</code>的<code>课程</code>。结果：hash：<code>{1:[], 2:[], 3:[1, 2]}</code>,序列res：<code>[0]</code></li><li>while循环直到res中包含了所有的课程<code>res.length === numCourses</code></li></ol></li><li>以上是我们的大体思路，但是该题中还有一个问题。存在<code>循环前置</code>例如<code>[[0,1],[1,0]]</code>或者<code>[0,1][1,2][2,0]</code>等等，当课程存在这样的循环时，我们<code>无法得知</code>到底该<code>先学习</code>哪门课程。需要直接返回[]代表无法完成。</li><li>该问题也很好解决，当我们<code>遍历hash找不到</code>任何一个前置课程为<code>[]</code>的课程时，表示存在循环引用了！这时候就可以返回<code>[]</code>了</li></ol><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">numCourses</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">prerequisites</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findOrder = <span class="function"><span class="keyword">function</span>(<span class="params">numCourses, prerequisites</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hash = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="comment">//初始化hash表</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">        hash[i] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//收集课程的前置课程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; prerequisites.length; i++) &#123;</span><br><span class="line">        hash[prerequisites[i][<span class="number">0</span>]] = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([...hash[prerequisites[i][<span class="number">0</span>]], ...prerequisites[i].slice(<span class="number">1</span>)]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历直到res排满</span></span><br><span class="line">    <span class="keyword">while</span> (res.length &lt; numCourses) &#123;</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span>;<span class="comment">//标记hash中的前序为空的课程。</span></span><br><span class="line">        <span class="comment">//遍历hash，碰到前序为空的，放入res，然后删除，最后在hash各课程的前序中去掉它。</span></span><br><span class="line">        <span class="keyword">for</span> (key <span class="keyword">in</span> hash) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hash[key].length === <span class="number">0</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                res.push(<span class="built_in">Number</span>(key));</span><br><span class="line">                <span class="keyword">delete</span> hash[key]</span><br><span class="line">                <span class="keyword">for</span> (key2 <span class="keyword">in</span> hash) &#123;</span><br><span class="line">                    hash[key2].indexOf(<span class="built_in">Number</span>(key)) &gt; <span class="number">-1</span> ? hash[key2].splice(hash[key2].indexOf(<span class="built_in">Number</span>(key)), <span class="number">1</span>) : <span class="string">''</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果遍历hash没有找到前置为空的课程，表示存在循环，返回[]</span></span><br><span class="line">        <span class="keyword">if</span> (!count) &#123;</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_560. 和为K的子数组（前序和）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_560.%20%E5%92%8C%E4%B8%BAK%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%EF%BC%88%E5%89%8D%E5%BA%8F%E5%92%8C%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_560.%20%E5%92%8C%E4%B8%BAK%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%EF%BC%88%E5%89%8D%E5%BA%8F%E5%92%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。</span><br><span class="line"></span><br><span class="line">示例 1 :</span><br><span class="line"></span><br><span class="line">输入:nums = [1,1,1], k = 2</span><br><span class="line">输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。</span><br><span class="line">说明 :</span><br><span class="line"></span><br><span class="line">数组的长度为 [1, 20,000]。</span><br><span class="line">数组中元素的范围是 [-1000, 1000] ，且整数 k 的范围是 [-1e7, 1e7]。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li>该题可以使用前序和进行计算和为k的个数，也可以用动态规划的思路来理解</li><li>我们记录该元素之前的所有前缀和。</li><li>然后利用上一次的结果，分别加上该元素的值，获取该元素所有的前缀和。（注意不要漏掉只有本身的结果）。</li><li>判断前缀和集合中有几个值为k的情况。就是该元素对k个数的解。</li><li>记录所有元素的解的个数，求和。即为结果</li></ol><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> subarraySum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> kNums = nums[<span class="number">0</span>] === k ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> now = [nums[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        now = now.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (item + nums[i] == k) &#123;</span><br><span class="line">                kNums++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> item + nums[i];</span><br><span class="line">        &#125;)</span><br><span class="line">        nums[i] === k ? kNums++ : <span class="string">""</span></span><br><span class="line">        now.push(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> kNums</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_102. 二叉树的层序遍历（1. 层序遍历 + 深度遍历 2. 动态规划）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_102.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%881.%20%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%20+%20%E6%B7%B1%E5%BA%A6%E9%81%8D%E5%8E%86%202.%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_102.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%881.%20%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%20+%20%E6%B7%B1%E5%BA%A6%E9%81%8D%E5%8E%86%202.%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">二叉树：[3,9,20,null,null,15,7],</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br><span class="line">返回其层次遍历结果：</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [9,20],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>该题对于我来说一共有两种思路，四种方案。<br><a id="more"></a></p><h3 id="解题思路一-（层序-深度）"><a href="#解题思路一-（层序-深度）" class="headerlink" title="解题思路一 （层序+深度）"></a>解题思路一 （层序+深度）</h3><ol><li>该题如果去掉分组，就是一个层序遍历的问题。加上分组也不过是多深度遍历一遍</li></ol><h3 id="代码实现一-1"><a href="#代码实现一-1" class="headerlink" title="代码实现一 (1)"></a>代码实现一 (1)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">         <span class="keyword">return</span> []</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">let</span> res = [];</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">deepNode</span>(<span class="params">root, node</span>) </span>&#123;</span><br><span class="line">         node.deep = root.deep + <span class="number">1</span>;</span><br><span class="line">         node.left &amp;&amp; deepNode(node, node.left);</span><br><span class="line">         node.right &amp;&amp; deepNode(node, node.right);</span><br><span class="line">     &#125;</span><br><span class="line">     deepNode(&#123;<span class="attr">deep</span>: <span class="number">-1</span>&#125;, root);</span><br><span class="line">     <span class="keyword">let</span> help = [root]</span><br><span class="line">     <span class="keyword">while</span>(help.length) &#123;</span><br><span class="line">         <span class="keyword">let</span> node = help.shift();</span><br><span class="line">         node.right &amp;&amp; help.unshift(node.right);</span><br><span class="line">         node.left &amp;&amp; help.unshift(node.left);</span><br><span class="line">         <span class="keyword">if</span> (!res[node.deep]) &#123;</span><br><span class="line">             res[node.deep] = [];</span><br><span class="line">         &#125;</span><br><span class="line">         res[node.deep].push(node.val);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> res;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h3 id="代码实现一-2"><a href="#代码实现一-2" class="headerlink" title="代码实现一 (2)"></a>代码实现一 (2)</h3><p>可以看到实现方式二去掉了while遍历，使用了一组数组。因为数组的顺序是<code>前序</code>遍历的结果，所以标记过每个节点的层级之后，我们其实按顺序将它分别放到二维数组中就可以了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> nodeList = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">deepNode</span>(<span class="params">root, node, nodeList</span>) </span>&#123;</span><br><span class="line">        node.deep = root.deep + <span class="number">1</span>;</span><br><span class="line">        nodeList.push(&#123;</span><br><span class="line">            val: node.val,</span><br><span class="line">            deep: node.deep</span><br><span class="line">        &#125;)</span><br><span class="line">        node.left &amp;&amp; deepNode(node, node.left, nodeList);</span><br><span class="line">        node.right &amp;&amp; deepNode(node, node.right, nodeList);</span><br><span class="line">    &#125;</span><br><span class="line">    deepNode(&#123;<span class="attr">deep</span>: <span class="number">-1</span>&#125;, root, nodeList);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nodeList.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!res[nodeList[i].deep]) &#123;</span><br><span class="line">            res[nodeList[i].deep] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        res[nodeList[i].deep].push(nodeList[i].val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="解题思路二-（递归-动态规划）"><a href="#解题思路二-（递归-动态规划）" class="headerlink" title="解题思路二 （递归 + 动态规划）"></a>解题思路二 （递归 + 动态规划）</h3><ol><li>首先我们可以这么想：根节点属于数组的第一层。</li><li>那么第二层该如何得到呢，其实就是按顺序遍历第一层所有节点的左右节点。</li><li>第三层就是遍历第二层的所有左右节点。</li><li>按照这样理解，这个题就更加清晰了。 </li><li>状态转移的方式是将<code>当前层</code>的所有<code>子节点</code>放入<code>下一层</code>。</li></ol><h3 id="代码实现二-1"><a href="#代码实现二-1" class="headerlink" title="代码实现二 (1)"></a>代码实现二 (1)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">         <span class="keyword">return</span> []</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">let</span> nodeList = [[root]];</span><br><span class="line">     <span class="keyword">let</span> res = [[root.val]];</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">deepNode</span>(<span class="params">nodeList, row, res</span>) </span>&#123;</span><br><span class="line">         nodeList[row + <span class="number">1</span>] = [];</span><br><span class="line">         res[row + <span class="number">1</span>] = [];</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nodeList[row].length; i++) &#123;</span><br><span class="line">             nodeList[row][i].left &amp;&amp; (nodeList[row + <span class="number">1</span>].push(nodeList[row][i].left), res[row+<span class="number">1</span>].push(nodeList[row][i].left.val));</span><br><span class="line">             nodeList[row][i].right &amp;&amp; (nodeList[row + <span class="number">1</span>].push(nodeList[row][i].right), res[row+<span class="number">1</span>].push(nodeList[row][i].right.val));</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (nodeList[row + <span class="number">1</span>].length) &#123;</span><br><span class="line">             deepNode(nodeList, row + <span class="number">1</span>, res)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     deepNode(nodeList, <span class="number">0</span>, res);</span><br><span class="line">     res.length -= <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">return</span> res;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h3 id="代码实现二-2"><a href="#代码实现二-2" class="headerlink" title="代码实现二 (2)"></a>代码实现二 (2)</h3><p>去掉了递归，使用了for循环。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> nodeList = [[root]];</span><br><span class="line">    <span class="keyword">let</span> res = [[root.val]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; ; i++) &#123;</span><br><span class="line">        nodeList[i + <span class="number">1</span>] = [];</span><br><span class="line">        res[i + <span class="number">1</span>] = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; nodeList[i].length; j++) &#123;</span><br><span class="line">            nodeList[i][j].left &amp;&amp; (nodeList[i + <span class="number">1</span>].push(nodeList[i][j].left), res[i + <span class="number">1</span>].push(nodeList[i][j].left.val));</span><br><span class="line">            nodeList[i][j].right &amp;&amp; (nodeList[i + <span class="number">1</span>].push(nodeList[i][j].right), res[i + <span class="number">1</span>].push(nodeList[i][j].right.val));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!nodeList[i + <span class="number">1</span>].length) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.length -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_136. 只出现一次的数字（异或运算）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_136.%20%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97%EF%BC%88%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_136.%20%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97%EF%BC%88%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line">你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [2,2,1]</span><br><span class="line">输出: 1</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: [4,1,2,1,2]</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><p>主要看一下题目的要求，线性复杂度，不适用额外的空间。</p><ol><li>这里可以巧妙的使用异或运算符的特性，<code>相同值的异或为0；所有的值，异或0都是本身。</code>数组的所有项向异或之后的结果就是只出现一次的值</li><li>我使用了reduce的数组方法，事实上可能也新开辟了空间，我们完全按照题意的话，可以直接使用数组第1项进行代替。</li></ol><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nums.reduce(<span class="function">(<span class="params">sum, item, key, arr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (sum ^= item)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_155. 最小栈（辅助栈）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_155.%20%E6%9C%80%E5%B0%8F%E6%A0%88%EF%BC%88%E8%BE%85%E5%8A%A9%E6%A0%88%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_155.%20%E6%9C%80%E5%B0%8F%E6%A0%88%EF%BC%88%E8%BE%85%E5%8A%A9%E6%A0%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。</span><br><span class="line"></span><br><span class="line">push(x) —— 将元素 x 推入栈中。</span><br><span class="line">pop() —— 删除栈顶的元素。</span><br><span class="line">top() —— 获取栈顶元素。</span><br><span class="line">getMin() —— 检索栈中的最小元素。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">[&quot;MinStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;getMin&quot;,&quot;pop&quot;,&quot;top&quot;,&quot;getMin&quot;]</span><br><span class="line">[[],[-2],[0],[-3],[],[],[],[]]</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[null,null,null,null,-3,null,0,-2]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">MinStack minStack = new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.getMin();   --&gt; 返回 -3.</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();      --&gt; 返回 0.</span><br><span class="line">minStack.getMin();   --&gt; 返回 -2.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">pop、top 和 getMin 操作总是在 非空栈 上调用。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li>首先确定栈的特点吧，<code>先进后出</code>，只能从<code>栈顶进栈出栈</code>，然后我们用数组来模拟他，将<code>数组末尾</code>当作<code>栈顶</code>，在此进栈出栈。</li><li>其实就是实现一个数组的<code>push，pop</code>功能，然后增加获取<code>最小值</code>的api和返回数组<code>最后一位</code>的api</li><li>由于最开始栈为空，所以栈是通过<code>push</code>，或者<code>pop</code>得到的。并且题目要求最小值要通过常数次操作得到，也就<code>getMin</code>的时间复杂度为<code>O(1)</code>.那我们可以在push，pop的过程中，确定最小值。<h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * initialize your data structure here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> MinStack = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">void</span> (</span><br><span class="line">            <span class="keyword">this</span>.stack = [],</span><br><span class="line">            <span class="keyword">this</span>.min = [<span class="built_in">Number</span>.MAX_SAFE_INTEGER], <span class="comment">//整数类型的最大值</span></span><br><span class="line">            <span class="keyword">this</span>.topValue = <span class="literal">null</span></span><br><span class="line">        );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">void</span> (<span class="keyword">this</span>.stack[<span class="keyword">this</span>.stack.length] = x, <span class="keyword">this</span>.topValue = x, <span class="keyword">this</span>.min[<span class="keyword">this</span>.min.length] = (x &gt; <span class="keyword">this</span>.min[<span class="keyword">this</span>.min.length - <span class="number">1</span>] ? <span class="keyword">this</span>.min[<span class="keyword">this</span>.min.length - <span class="number">1</span>] : x));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">void</span> (<span class="keyword">this</span>.stack.length -= <span class="number">1</span>, <span class="keyword">this</span>.topValue = <span class="keyword">this</span>.stack[<span class="keyword">this</span>.stack.length - <span class="number">1</span>], <span class="keyword">this</span>.min.length -= <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.top = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.topValue;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.getMin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.min[<span class="keyword">this</span>.min.length - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new MinStack()</span></span><br><span class="line"><span class="comment"> * obj.push(x)</span></span><br><span class="line"><span class="comment"> * obj.pop()</span></span><br><span class="line"><span class="comment"> * var param_3 = obj.top()</span></span><br><span class="line"><span class="comment"> * var param_4 = obj.getMin()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_50. Pow(x, N)（幂计算）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_50.%20Pow(x,%20n)%EF%BC%88%E5%B9%82%E8%AE%A1%E7%AE%97%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_50.%20Pow(x,%20n)%EF%BC%88%E5%B9%82%E8%AE%A1%E7%AE%97%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1.实现 pow(x, n) ，即计算 x 的 n 次幂函数。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: 2.00000, 10</span><br><span class="line">输出: 1024.00000</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: 2.10000, 3</span><br><span class="line">输出: 9.26100</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入: 2.00000, -2</span><br><span class="line">输出: 0.25000</span><br><span class="line">解释: 2-2 = 1/22 = 1/4 = 0.25</span><br><span class="line">说明:</span><br><span class="line"></span><br><span class="line">-100.0 &lt; x &lt; 100.0</span><br><span class="line">n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li>计算X的n次幂。首先要理解<ol><li><strong>x^n^ === (x^2^)^n/2^</strong>  理解幂计算就可以了。</li><li>当n为奇数的时候，我们记得计算完平方之后再乘以 x</li></ol></li><li>请看代码实现。 </li></ol><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment">//  */</span></span><br><span class="line"><span class="keyword">var</span> myPow = <span class="function"><span class="keyword">function</span>(<span class="params">x, n</span>) </span>&#123;</span><br><span class="line">    n &lt; <span class="number">0</span> ? (x = <span class="number">1</span>/x ,n = -n) : <span class="string">''</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) res = res * x; <span class="comment">// 当n为奇数时，我们需要收集一下落单的x</span></span><br><span class="line">        x = x * x;</span><br><span class="line">        n = <span class="built_in">Math</span>.floor(n / <span class="number">2</span>)</span><br><span class="line">        <span class="comment">// n &gt;&gt;&gt;= 1 ; 需要用&gt;&gt;&gt; 因为数字2147483648 用二进制 2^32 - 1 位表示不了了，所以要</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_236. 二叉树的最近公共祖先（1. 层序遍历 + 二叉树任意遍历方法 2. 二叉树遍历 + 动态规划）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_236.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%EF%BC%881.%20%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%20+%20%E4%BA%8C%E5%8F%89%E6%A0%91%E4%BB%BB%E6%84%8F%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95%202.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%20+%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_236.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%EF%BC%881.%20%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%20+%20%E4%BA%8C%E5%8F%89%E6%A0%91%E4%BB%BB%E6%84%8F%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95%202.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%20+%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</span><br><span class="line"></span><br><span class="line">百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，</span><br><span class="line">满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</span><br><span class="line"></span><br><span class="line">例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200510171131762.png" alt="在这里插入图片描述"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1</span><br><span class="line">输出: 3</span><br><span class="line">解释: 节点 5 和节点 1 的最近公共祖先是节点 3。</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4</span><br><span class="line">输出: 5</span><br><span class="line">解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line"></span><br><span class="line">所有节点的值都是唯一的。</span><br><span class="line">p、q 为不同节点且均存在于给定的二叉树中。</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li><code>层序</code>遍历二叉树，每遍历到一个节点，就<code>收集</code>该节点在内的<code>所有子节点</code>。</li><li>该节点<code>子节点集合</code>中是否同时<code>存在p,q</code>，如果<code>存在</code>，标记该节点，<code>flag为true</code>代表：该节点是p，q的一个<code>公共祖先</code>，然后依次遍历其<code>左右节点</code>的<code>子节点集合</code>。</li><li>若不存在，说明其子节点的集合肯定也不存在，就中断递归，没必要再继续了。</li><li>最终递归会在左右节点都不存在的情况下终止遍历。形成一个带有标记的树，每个节点上标记有<code>flag为true</code>的都是p，q的<code>公共祖先</code></li><li>最后再进行一次层序遍历，收集<code>flag为true</code>的节点，然后数组的末尾一位就是他们的最近公共祖先。</li></ol><blockquote><p>注意： 题目中的5，步骤也可以放在 2-3步骤中同时进行收集。<br>代码实现中，我使用了unshift(),所以输出的是第一位。</p></blockquote><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">p</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">q</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 注意是返回节点，不是返回节点的值！！！</span></span><br><span class="line"><span class="keyword">var</span> lowestCommonAncestor = <span class="function"><span class="keyword">function</span>(<span class="params">root, p, q</span>) </span>&#123;</span><br><span class="line">    p = p.val;</span><br><span class="line">    q = q.val;</span><br><span class="line">    find(root, p, q);</span><br><span class="line">    <span class="keyword">let</span> help = [root]</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">while</span> (help.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> now = help.shift();</span><br><span class="line">        <span class="keyword">if</span>(now.flag) &#123;</span><br><span class="line">            res.unshift(now);</span><br><span class="line">            now.left &amp;&amp; help.push(now.left);</span><br><span class="line">            now.right &amp;&amp; help.push(now.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res[<span class="number">0</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">root, p, q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> help = [root]</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">while</span> (help.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> now = help.shift();</span><br><span class="line">        res.push(now.val);</span><br><span class="line">        now.left &amp;&amp; help.push(now.left);</span><br><span class="line">        now.right &amp;&amp; help.push(now.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (res.indexOf(p) !== <span class="number">-1</span> &amp;&amp; res.indexOf(q) !== <span class="number">-1</span>) &#123;</span><br><span class="line">        root.flag = <span class="literal">true</span>;</span><br><span class="line">        root.left &amp;&amp; (find(root.left, p, q))</span><br><span class="line">        root.right &amp;&amp; (find(root.right, p, q))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><ol><li>收集所有的节点的祖先节点，类似于动态规划，<code>每个节点</code>的所有公共祖先都是<code>父节点所有公共祖先</code>的加上该<code>节点本身</code>。</li><li>通过动态规划和递归进行收集。</li><li>判断该节点是否是<code>p</code>或者<code>q</code>，<code>收集</code>到对象中。</li><li>二叉树遍历完成后，将收集到的p，q所有的祖先节点进行遍历，<code>倒序遍历</code>到<code>第一个相同</code>的节点就是他们的<code>最近公共祖先</code></li></ol><blockquote><p>这个方法在实际提交中，超内存了。。。但是思路应该是没毛病的。</p></blockquote><h3 id="代码实现一-1"><a href="#代码实现一-1" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">p</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">q</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 注意是返回节点，不是返回节点的值！！！</span></span><br><span class="line"><span class="keyword">var</span> lowestCommonAncestor = <span class="function"><span class="keyword">function</span>(<span class="params">root, p, q</span>) </span>&#123;</span><br><span class="line">    p = p.val;</span><br><span class="line">    q = q.val;</span><br><span class="line">    <span class="keyword">let</span> res = &#123;</span><br><span class="line">        p: [],</span><br><span class="line">        q: []</span><br><span class="line">    &#125;</span><br><span class="line">    find(root, p, q, [], res);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = res.q.length; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.p.indexOf(res.q[i]) !== <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.q[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">root, p, q, prev, res</span>) </span>&#123;</span><br><span class="line">    prev = [...prev, root];</span><br><span class="line">    <span class="keyword">if</span> (root.val === p) &#123;</span><br><span class="line">       res.p = [...prev]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.val === q) &#123;</span><br><span class="line">       res.q = [...prev]</span><br><span class="line">    &#125;</span><br><span class="line">    root.left &amp;&amp; (find(root.left, p, q, prev, res));</span><br><span class="line">    root.right &amp;&amp; (find(root.right, p, q, prev, res));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_69. X 的平方根</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_69.%20x%20%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_69.%20x%20%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">实现 int sqrt(int x) 函数。</span><br><span class="line"></span><br><span class="line">计算并返回 x 的平方根，其中 x 是非负整数。</span><br><span class="line"></span><br><span class="line">由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: 4</span><br><span class="line">输出: 2</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: 8</span><br><span class="line">输出: 2</span><br><span class="line">说明: 8 的平方根是 2.82842..., </span><br><span class="line">     由于返回类型是整数，小数部分将被舍去。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li>求平方根，一种是利用我们Math.sqrt()直接求，这种就不说了。</li><li>然后说我们手动求的方式，最简单的方式，就是for循环遍历从1到x，求出x/i === i 那么这个i就是他的平方根。</li><li>问题是你遇到非整平方根你可就求不出来了。</li><li>所以再进行一次判断<code>(i * i &gt; x &amp;&amp; (i-1)*(i-1) &lt; x)</code>判断x是否存在于这个范围内，如果再，取i-1，因为我们是向下取整的。<h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mySqrt = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> length = (<span class="built_in">String</span>(x).length &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> max = ((<span class="keyword">new</span> <span class="built_in">Array</span>(length).fill((<span class="built_in">String</span>(x)[<span class="number">0</span>] - <span class="number">0</span> &gt;&gt; <span class="number">1</span>) + <span class="number">2</span>).fill(<span class="number">0</span>,<span class="number">1</span>)).join(<span class="string">''</span>)) - <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = max; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i * i === x) &#123;</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((i * i &gt; x &amp;&amp; (i<span class="number">-1</span>)*(i<span class="number">-1</span>) &lt; x)) &#123;</span><br><span class="line">            <span class="keyword">return</span> i - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_72. 编辑距离（动态规划，Vue，react的类似diff算法）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_72.%20%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%8Cvue%EF%BC%8Creact%E7%9A%84%E7%B1%BB%E4%BC%BCdiff%E7%AE%97%E6%B3%95%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_72.%20%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%8Cvue%EF%BC%8Creact%E7%9A%84%E7%B1%BB%E4%BC%BCdiff%E7%AE%97%E6%B3%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2 所使用的最少操作数 。</span><br><span class="line"></span><br><span class="line">你可以对一个单词进行如下三种操作：</span><br><span class="line"></span><br><span class="line">插入一个字符</span><br><span class="line">删除一个字符</span><br><span class="line">替换一个字符</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：word1 = &quot;horse&quot;, word2 = &quot;ros&quot;</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">horse -&gt; rorse (将 &apos;h&apos; 替换为 &apos;r&apos;)</span><br><span class="line">rorse -&gt; rose (删除 &apos;r&apos;)</span><br><span class="line">rose -&gt; ros (删除 &apos;e&apos;)</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：word1 = &quot;intention&quot;, word2 = &quot;execution&quot;</span><br><span class="line">输出：5</span><br><span class="line">解释：</span><br><span class="line">intention -&gt; inention (删除 &apos;t&apos;)</span><br><span class="line">inention -&gt; enention (将 &apos;i&apos; 替换为 &apos;e&apos;)</span><br><span class="line">enention -&gt; exention (将 &apos;n&apos; 替换为 &apos;x&apos;)</span><br><span class="line">exention -&gt; exection (将 &apos;n&apos; 替换为 &apos;c&apos;)</span><br><span class="line">exection -&gt; execution (插入 &apos;u&apos;)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>此题是一个最短编辑距离问题，我们在工作中用到工具和框架有很多也是类似的算法。比如<code>Git</code>提交，对比差异。<code>vue</code>中将更新前的<code>虚拟dom</code>改成更新后的虚拟dom（vue中对此做了取舍，有优化）</p><p>首先对题意要有个理解：</p><h4 id="一"><a href="#一" class="headerlink" title="一"></a>一</h4><p>三种操作，<code>增，删，改</code>，都是针对<code>word1</code>的。但是其实此题目中只要求求出<code>最短操作</code>。所以<br><code>word1</code>和<code>word2</code>之间，<code>操作互换</code>一样可以达到同样的效果。</p><p>比如<code>word1</code>为<code>people</code>，<code>word2</code>为<code>peopl</code>，此时，<code>word1</code>末尾<code>删除e</code> 或者 <code>word2</code>末尾<code>增加e</code>都可以达到 <code>word1 == word2</code> 的效果。 </p><p>所以针对<code>word1</code>的<code>增删</code>操作可以转化为对<code>word1</code>或者<code>word2</code>的<code>增</code>操作<br>再加上对<code>word1</code>的<code>改</code>操作</p><h4 id="二"><a href="#二" class="headerlink" title="二"></a>二</h4><p>假如当word1和word2末尾相同的时候，其实是相当于没有操作。 比如 <code>people 到peopl</code> 和<code>peoplee到people</code> 二者所需要的操作都是<code>相同</code>的。</p><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><p>根据题目意思，我们需要找到最少操作数，最少最优，基本上都和贪心及动态规划有关系。此题需要对比word1和word2进行对比操作。先使用动态规划解决。</p><ol><li>首先构建一个二维数组用来记录子问题的解。</li></ol><table><thead><tr><th>dp</th><th>“”</th><th><strong>r</strong></th><th>(ro) <strong>o</strong></th><th>(ros) <strong>s</strong> </th></tr></thead><tbody><tr><td>“”</td><td>0</td><td>1</td><td>2</td><td>3</td></tr><tr><td><strong>h</strong></td><td>1</td></tr><tr><td>(ho) <strong>o</strong></td><td>2</td></tr><tr><td>(hor)<strong>r</strong></td><td>3</td></tr><tr><td> (hors)<strong>s</strong></td><td>4</td></tr><tr><td>(horse)<strong>e</strong></td><td>5</td></tr></tbody></table><blockquote><p><code>dp[i][j]</code> 表示 <code>i</code> 到 <code>j</code> 所需要的步数，以<code>dp[2][1]</code>为例子，表示<code>“ho”</code>转换到<code>“r”</code> 所需要的操作数</p></blockquote><p>如表，是我们要初始化出来的<code>dp二维数组</code>。表内数字，分别代表<code>竖列</code>到达<code>横排</code>所需要的操作数。<br>有了dp数组，我们先来操作一次。求出<code>dp[1][1]</code>的值。</p><ol><li>dp[1][1]处，<code>word1</code>为<code>h</code>，<code>word2</code>为<code>r</code>。两位<code>不同</code>,那么有三种处理方式<ol><li><code>h -&gt; r</code> 更改<code>h</code>,操作数为<code>1</code>，修改之后变成了 <code>r</code>和<code>r</code>，参照<code>说明中的第二条</code>，我们再加上<code>dp[0][0]</code>即可</li><li><code>word2</code>增加<code>h</code>变为<code>rh</code>,操作数为<code>1</code>, <code>h</code>和<code>rh</code>参照<code>说明中的第二条</code>，就变成了<code>‘’ =&gt; &quot;r&quot;</code>所用的步数，<code>dp[0][1]</code></li><li><code>word1</code>增加<code>r</code>变为<code>hr</code>,操作数为<code>1</code>, <code>hr</code>和<code>r</code>参照<code>说明中的第二条</code>，就变成了<code>‘h’ =&gt; &quot;&quot;</code>所用的步数，<code>dp[1][0]</code></li></ol></li><li>当我们分析出了以上三种情况后，我们肯定要取最小值作为我们此次dp[1][1]所要求出来的值了。</li><li>转换为代码就是 <code>1 + Math.min(dp[0][0],dp[0][1],dp[1][0])</code> </li><li>以上是末尾不相同的情况，如果相同，请参照<code>说明第二条</code>。实际上就是和横纵各退一步的情况相同</li><li>最后我们将<code>dp[i][j]</code>看作此次<code>dp[1][1]</code>时。实际代码就出来了<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = word1[i<span class="number">-1</span>] === word2[j<span class="number">-1</span>] ? </span><br><span class="line">dp[i<span class="number">-1</span>][j<span class="number">-1</span>] : </span><br><span class="line">(<span class="number">1</span> + <span class="built_in">Math</span>.min(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>],dp[i<span class="number">-1</span>][j<span class="number">-1</span>]))</span><br></pre></td></tr></table></figure></li></ol><h4 id="最终完成的dp"><a href="#最终完成的dp" class="headerlink" title="最终完成的dp"></a>最终完成的dp</h4><table><thead><tr><th>dp</th><th>“”</th><th><strong>r</strong></th><th>(ro) <strong>o</strong></th><th>(ros) <strong>s</strong> </th></tr></thead><tbody><tr><td>“”</td><td>0</td><td>1</td><td>2</td><td>3</td></tr><tr><td><strong>h</strong></td><td>1</td><td>1</td><td>2</td><td>3</td></tr><tr><td>(ho) <strong>o</strong></td><td>2</td><td>2</td><td>1</td><td>2</td></tr><tr><td>(hor)<strong>r</strong></td><td>3</td><td>2</td><td>2</td><td>2</td></tr><tr><td> (hors)<strong>s</strong></td><td>4</td><td>3</td><td>3</td><td>2</td></tr><tr><td>(horse)<strong>e</strong></td><td>5</td><td>4</td><td>4</td><td>3</td></tr></tbody></table><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">word1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">word2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minDistance = <span class="function"><span class="keyword">function</span>(<span class="params">word1, word2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> length1 = word1.length;</span><br><span class="line">    <span class="keyword">let</span> length2 = word2.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(length1 + <span class="number">1</span>).fill(<span class="number">0</span>).map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>(length2 + <span class="number">1</span>).fill(<span class="number">0</span>)&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dp[<span class="number">0</span>].length; i++) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化工作结束</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= length1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= length2; j++) &#123;</span><br><span class="line">            dp[i][j] = word1[i<span class="number">-1</span>] === word2[j<span class="number">-1</span>] ? dp[i<span class="number">-1</span>][j<span class="number">-1</span>] : (<span class="number">1</span> + <span class="built_in">Math</span>.min(</span><br><span class="line">                dp[i<span class="number">-1</span>][j], </span><br><span class="line">                dp[i][j<span class="number">-1</span>],</span><br><span class="line">                dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">            ))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[length1][length2]</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我们知道vue的diff算法被优化到了O(n)而此题我们观察发现除了两层循环对比每个元素，还需要min操作。实际时间复杂度到达了O(n^3)。 那么vue是如何做到的呢？还记得我们循环节点时需要设置的key。通过这个key，我们就可以一一对应前后节点之间的关系。那我们只需要遍历一次节点就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_572. 另一个树的子树（广度遍历+深度遍历）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_572.%20%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%A0%91%E7%9A%84%E5%AD%90%E6%A0%91%EF%BC%88%E5%B9%BF%E5%BA%A6%E9%81%8D%E5%8E%86+%E6%B7%B1%E5%BA%A6%E9%81%8D%E5%8E%86%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_572.%20%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%A0%91%E7%9A%84%E5%AD%90%E6%A0%91%EF%BC%88%E5%B9%BF%E5%BA%A6%E9%81%8D%E5%8E%86+%E6%B7%B1%E5%BA%A6%E9%81%8D%E5%8E%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">给定两个非空二叉树 s 和 t，检验 s 中是否包含和 t 具有相同结构和节点值的子树。</span><br><span class="line">s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">给定的树 s:</span><br><span class="line"></span><br><span class="line">     3</span><br><span class="line">    / \</span><br><span class="line">   4   5</span><br><span class="line">  / \</span><br><span class="line"> 1   2</span><br><span class="line">给定的树 t：</span><br><span class="line"></span><br><span class="line">   4 </span><br><span class="line">  / \</span><br><span class="line"> 1   2</span><br><span class="line">返回 true，因为 t 与 s 的一个子树拥有相同的结构和节点值。</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">给定的树 s：</span><br><span class="line"></span><br><span class="line">     3</span><br><span class="line">    / \</span><br><span class="line">   4   5</span><br><span class="line">  / \</span><br><span class="line"> 1   2</span><br><span class="line">    /</span><br><span class="line">   0</span><br><span class="line">给定的树 t：</span><br><span class="line"></span><br><span class="line">   4</span><br><span class="line">  / \</span><br><span class="line"> 1   2</span><br><span class="line">返回 false。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>解题之间看清除问题中的两个例子，什么是子树。<br>树中的某节点及其<code>所有子节点</code>组成的树，叫子树。不可以漏掉一个的。所以看例2，是返回false的哦。</p><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><p>广度优先找子树根，深度优先对比s，t。我这种思路可能稍麻烦些，但是好在容易理解。符合人脑回路。</p><ol><li>广度优先遍历S树。依赖队列实现（<code>push</code>和<code>shift</code>配合实现队列先进先出的特点）</li><li>直到S树某节点的val值和T树的根节点val值相同时。<code>(s.val === t.val)</code></li><li>深度遍历做对比。使用<code>递归</code></li></ol><p>还有一种思路是依赖<code>JSON.stingify</code>将对象转换成字符串，再判断字符串之间是否包含。投机取巧不太可取就不做展示了。</p><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">t</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isSubtree = <span class="function"><span class="keyword">function</span>(<span class="params">s, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sArr = [];</span><br><span class="line">    <span class="keyword">let</span> tArr = [];</span><br><span class="line">    <span class="keyword">let</span> dp = [s];</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="string">'default'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">frontTree</span>(<span class="params">s, t</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//这个判断有点多，哈哈</span></span><br><span class="line">        <span class="keyword">if</span> (t === <span class="literal">null</span> || s === <span class="literal">null</span> || s.val !== t.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> (flag = <span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((s.left &amp;&amp; !t.left) || (!s.left &amp;&amp; t.left)) &#123;</span><br><span class="line">            <span class="keyword">return</span> (flag = <span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((s.right &amp;&amp; !t.right) || (!s.right &amp;&amp; t.right)) &#123;</span><br><span class="line">            <span class="keyword">return</span> (flag = <span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s.left &amp;&amp; t.left) &#123;</span><br><span class="line">            frontTree(s.left, t.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s.right &amp;&amp; t.right) &#123;</span><br><span class="line">            frontTree(s.right, t.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">while</span> (dp.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> s = dp.shift();</span><br><span class="line">        <span class="keyword">if</span>(s.val === t.val) &#123;</span><br><span class="line">           flag = <span class="literal">true</span>; <span class="comment">//开始深度对比，默认为true</span></span><br><span class="line">           frontTree(s, t);<span class="comment">//如果不匹配，flag会设置为false</span></span><br><span class="line">           <span class="keyword">if</span> (flag) &#123; <span class="comment">//如果匹配，返回true, 如果不匹配，继续往下找，一直到最后。</span></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s.left &amp;&amp; dp.push(s.left)</span><br><span class="line">        s.right &amp;&amp; dp.push(s.right)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若flag为default,说明没有找到和t根节点相同的节点，返回false</span></span><br><span class="line">    <span class="keyword">return</span> flag === <span class="string">'default'</span> ? <span class="literal">false</span> : flag</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_983. 最低票价（动态规划）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_983.%20%E6%9C%80%E4%BD%8E%E7%A5%A8%E4%BB%B7%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_983.%20%E6%9C%80%E4%BD%8E%E7%A5%A8%E4%BB%B7%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。在接下来的一年里，你要旅行的日子将以一个名为 days 的数组给出。每一项是一个从 1 到 365 的整数。</span><br><span class="line"></span><br><span class="line">火车票有三种不同的销售方式：</span><br><span class="line"></span><br><span class="line">一张为期一天的通行证售价为 costs[0] 美元；</span><br><span class="line">一张为期七天的通行证售价为 costs[1] 美元；</span><br><span class="line">一张为期三十天的通行证售价为 costs[2] 美元。</span><br><span class="line">通行证允许数天无限制的旅行。 例如，如果我们在第 2 天获得一张为期 7 天的通行证，那么我们可以连着旅行 7 天：第 2 天、第 3 天、第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。</span><br><span class="line"></span><br><span class="line">返回你想要完成在给定的列表 days 中列出的每一天的旅行所需要的最低消费。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：days = [1,4,6,7,8,20], costs = [2,7,15]</span><br><span class="line">输出：11</span><br><span class="line">解释： </span><br><span class="line">例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：</span><br><span class="line">在第 1 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 1 天生效。</span><br><span class="line">在第 3 天，你花了 costs[1] = $7 买了一张为期 7 天的通行证，它将在第 3, 4, ..., 9 天生效。</span><br><span class="line">在第 20 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 20 天生效。</span><br><span class="line">你总共花了 $11，并完成了你计划的每一天旅行。</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]</span><br><span class="line">输出：17</span><br><span class="line">解释：</span><br><span class="line">例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划： </span><br><span class="line">在第 1 天，你花了 costs[2] = $15 买了一张为期 30 天的通行证，它将在第 1, 2, ..., 30 天生效。</span><br><span class="line">在第 31 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 31 天生效。 </span><br><span class="line">你总共花了 $17，并完成了你计划的每一天旅行。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">1 &lt;= days.length &lt;= 365</span><br><span class="line">1 &lt;= days[i] &lt;= 365</span><br><span class="line">days 按顺序严格递增</span><br><span class="line">costs.length == 3</span><br><span class="line">1 &lt;= costs[i] &lt;= 1000</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><p>动态规划的问题。</p><p>好多题解是倒着来算的，对于书写是更简洁了，但是对于思维，太别扭了。。我脑子实在转不过来。</p><p>所以我就换成正序规划，这样好理解一点。</p><p>此题有点类似于背包算法。但是又不太一样。</p><ol><li>打点 days[0] 到 days[days.length - 1]的每一天。 所以初始化 dp = new Array(days.length).fill(0),代表的是<code>一年的第一天</code>到<code>计划旅行的最后一天</code></li><li>days[0]的值为计划开始旅行的第一天的日期，所以当开始第一天时，当然是2块钱最划算，所以dp[days[0]] = 2</li><li>第三步就比较核心了!!!!<ol><li>当我们算到第二天的时候，是不是要比较买什么票合适呢？</li><li>买如果只买一天的票，那就是今天之前所有的money加上今天的2块钱，<code>dp[i-1] + costs[0]</code></li><li>如果买7天的票，那就是今天往前划拉7天的money加上今天的7块钱，<code>dp[i-7] + costs[1]</code></li><li>同理买30天的票，划拉30天<code>dp[i-30] + costs[2]</code></li><li>好嘞，我们又三种选择了，根据题意和常识，我们选择最<code>便宜的。</code>用<code>Math.min(dp[i-1] + costs[0],dp[i-7] + costs[1],dp[i-30] + costs[2])</code></li></ol></li></ol><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">days</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">costs</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mincostTickets = <span class="function"><span class="keyword">function</span>(<span class="params">days, costs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(days[days.length<span class="number">-1</span>]).fill(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = days[<span class="number">0</span>], k = <span class="number">0</span>; i &lt;= days[days.length<span class="number">-1</span>]; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i === days[k]) &#123; <span class="comment">//确定今天是不是旅行日</span></span><br><span class="line">            dp[i] = <span class="built_in">Math</span>.min(dp[(i - <span class="number">1</span>)&gt;=<span class="number">0</span>?(i - <span class="number">1</span>):<span class="number">0</span>] + costs[<span class="number">0</span>],</span><br><span class="line">                             dp[(i - <span class="number">7</span>)&gt;=<span class="number">0</span>?(i - <span class="number">7</span>):<span class="number">0</span>] + costs[<span class="number">1</span>],</span><br><span class="line">                             dp[(i - <span class="number">30</span>)&gt;=<span class="number">0</span>?(i - <span class="number">30</span>):<span class="number">0</span>] + costs[<span class="number">2</span>]) <span class="comment">//如果是，就得用前面花的钱加上今天花的钱。</span></span><br><span class="line">            <span class="comment">//今天之前的钱数都是确定的且最小的。</span></span><br><span class="line">            k++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dp[i] = dp[i<span class="number">-1</span>] <span class="comment">//如果今天不旅行，那肯定不花钱，跟前一天的钱一样。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[dp.length<span class="number">-1</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue(2.x 和 3.0) 双向绑定原理及实现（Object.defineProperty 和 Proxy）以及常见错误区分</title>
      <link href="/Vue/Vue%EF%BC%9A%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
      <url>/Vue/Vue%EF%BC%9A%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>vue实现双向绑定原理，主要是利用Object.defineProperty 来给实例data的属性添加 setter和getter.<br>并通过发布订阅模式（一对多的依赖关系，当状态发生改变，它的所有依赖都将被通知）来实现响应。</p><p>这个环节中包含了三个部分</p><ul><li><p>Observer 用来监听拦截data的属性为监察者。 </p></li><li><p>Dep用来添加订阅者，为订阅器</p></li><li><p>Watcher 就是订阅者</p></li></ul><p>监察者通过 Dep 向 Watcher发布更新消息</p><h4 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h4><p>那么首先</p><ol><li>通过对set和get的拦截，在get阶段进行依赖收集，在set阶段对通知该属性上所啊绑定的依赖。</li></ol><p>如下我们就已经实现了一个简单的双向绑定了。</p><p>我们将data的value属性绑定上set和get，通过 _value 来进行操作。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML部分 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"inp"</span> <span class="attr">oninput</span>=<span class="string">"inputFn(this.value)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'div'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- JS部分 --&gt;</span><br><span class="line"><span class="keyword">var</span> inp = <span class="built_in">document</span>.getElementById(<span class="string">'inp'</span>);</span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    value:<span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(data, <span class="string">'value'</span>, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    <span class="keyword">set</span>: function (newValue) &#123;</span><br><span class="line">        <span class="keyword">this</span>._value = newValue; </span><br><span class="line">        div.innerText = data._value = value; <span class="comment">//watcher</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span>: function () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._value; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inputFn</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  data._value = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果只是实现一个简单的双向绑定那么上面的代码就已经实现了。</p><h4 id="进一步完善模拟vue实现"><a href="#进一步完善模拟vue实现" class="headerlink" title="进一步完善模拟vue实现"></a>进一步完善模拟vue实现</h4><p>首先我们将watcher抽出来 备用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watcher</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  div.innerText = inp.value = params; <span class="comment">// 派发watcher</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明一个vm来模拟vue的实例,并初始化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类似vue实例上的data</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        value: <span class="string">''</span></span><br><span class="line">    &#125;, </span><br><span class="line"></span><br><span class="line">    <span class="comment">// vue私有, _data的所有属性为data中的所有属性被改造为 getter/setter 之后的。</span></span><br><span class="line">    _data: &#123;</span><br><span class="line">        value: <span class="string">''</span></span><br><span class="line">    &#125;, </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代理到vm对象上，可以实现vm.value</span></span><br><span class="line">    value: <span class="string">''</span>, </span><br><span class="line"></span><br><span class="line">    <span class="comment">//value的订阅器用来收集订阅者 </span></span><br><span class="line">    valueWatchers:[] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历其data上的属性 进行改造 这里我们还是只举一个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用 Object.defineProperty 定义一个属性 (eg：value) 描述符为存取描述符的属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(vm._data, <span class="string">'value'</span>, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>, <span class="comment">//是否可枚举</span></span><br><span class="line">    configurable: <span class="literal">true</span>, <span class="comment">//是否可配置</span></span><br><span class="line">    <span class="keyword">set</span>: function (newValue) &#123; <span class="comment">//set 派发watchers</span></span><br><span class="line">      vm.data.value = newValue; </span><br><span class="line">      vm.valueWatchers.map(<span class="function"><span class="params">fn</span> =&gt;</span> fn(newValue));</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span>: function () &#123; </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 收集wachter vue中会在compile解析器中通过 显示调用 (this.xxx) 来触发get进行收集</span></span><br><span class="line">        vm.valueWatchers.length = <span class="number">0</span>; </span><br><span class="line">        vm.valueWatchers.push(watcher); </span><br><span class="line">        <span class="keyword">return</span> vm.data.value; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">  &lt;!--直接通过显示调用来触发<span class="keyword">get</span>进行绑定 vue中是在compile解析器中来进行这一步--&gt;</span><br><span class="line">  vm._data.value</span><br></pre></td></tr></table></figure><p>进行到这儿也已经实现了绑定，但是我们平时使用vue ，都是可以直接通过 this.xxx来获取和定义数据</p><p>那么我们还需要进行一步Proxy 代理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(vm, <span class="string">'value'</span>, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    <span class="keyword">set</span>: function (newValue) &#123;</span><br><span class="line">        <span class="keyword">this</span>._data.value = newValue; <span class="comment">//借助</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span>: function () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._data.value; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样我们就把vm._data.value 代理到vm.value上了，可以通过其直接操作了。</p><p>那么按照官方的写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxy</span> (<span class="params">target, sourceKey, key</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(target, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>[sourceKey][key];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>(val) &#123;</span><br><span class="line">            <span class="keyword">this</span>[sourceKey][key] = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">proxy(vm, <span class="string">'_data'</span>, <span class="string">'value'</span>);</span><br></pre></td></tr></table></figure><h4 id="完善后的完整代码"><a href="#完善后的完整代码" class="headerlink" title="完善后的完整代码"></a>完善后的完整代码</h4><p>以下为整个页面，可以直接运行<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>双向绑定简单实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"inp"</span> <span class="attr">oninput</span>=<span class="string">"inputFn(this.value)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"inp2"</span> <span class="attr">oninput</span>=<span class="string">"inputFn(this.value)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'div'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> inp = <span class="built_in">document</span>.getElementById(<span class="string">'inp'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> inp2 = <span class="built_in">document</span>.getElementById(<span class="string">'inp2'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'div'</span>);</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">inputFn</span><span class="params">(value)</span> </span>&#123;</span></span><br><span class="line">        div.innerText = vm.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">watcher</span><span class="params">(params)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span></span><br><span class="line"><span class="actionscript">        div.innerText = inp.value = params; <span class="comment">// 派发watcher</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">watcher2</span><span class="params">(params)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        div.innerText = inp2.value = params; <span class="comment">// 派发watcher</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">proxy</span> <span class="params">(target, sourceKey, key)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">Object</span>.defineProperty(target, key, &#123;</span></span><br><span class="line"><span class="actionscript">            enumerable: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">            configurable: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            <span class="keyword">get</span>() &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="keyword">this</span>[sourceKey][key];</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="keyword">set</span>(val) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>[sourceKey][key] = val;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> handler = &#123;</span></span><br><span class="line"><span class="actionscript">        enumerable: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">        configurable: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">set</span>: <span class="function"><span class="keyword">function</span> <span class="params">(newValue)</span> </span>&#123;</span></span><br><span class="line">            vm.data.value = newValue; </span><br><span class="line"><span class="javascript">            vm.valueWatchers.map(<span class="function"><span class="params">fn</span> =&gt;</span> fn(newValue));</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        <span class="keyword">get</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            vm.valueWatchers = []; <span class="comment">//防止重复添加, </span></span></span><br><span class="line">            vm.valueWatchers.push(watcher); </span><br><span class="line">            vm.valueWatchers.push(watcher2); </span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> vm.data.value; </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = &#123;</span></span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        _data: &#123;&#125;,</span><br><span class="line"><span class="actionscript">        value: <span class="string">''</span>, </span></span><br><span class="line">        valueWatchers: [] </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="built_in">Object</span>.defineProperty(vm._data, <span class="string">'value'</span>, handler)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    proxy(vm, <span class="string">'_data'</span>, <span class="string">'value'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    vm.value;  <span class="comment">//显示调用绑定</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>再多讲一点。实际上vue在初始化的时候是用解析器解析过程中将wathcer进行绑定的。</p><p>它会利用一个全局的Dep.target = watcher </p><p>然后在get收集中，只收集全局上Dep.target, 添加完毕后会重新初始化全局Dep.target = null;</p><p>类似如下操作<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Dep.target = watcher;</span><br><span class="line">vm.value;    <span class="comment">// 触发get =&gt; Dep.target &amp;&amp; valueWatchers.push(Dep.target);</span></span><br><span class="line">Dep.target = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p><p>这样也会防止我们在调用时触发get重复去添加watcher。</p><p>而我们的例子中只是每次都初始化为[]. 实际订阅器也不只是一个watcher数组。 </p><p>此例跟官方实现还是有很多差距，只是简单模拟。</p><h4 id="vue3-0-使用-Proxy"><a href="#vue3-0-使用-Proxy" class="headerlink" title="vue3.0 使用 Proxy"></a>vue3.0 使用 Proxy</h4><blockquote><p>在vue3.0中，使用proxy这个功能更加强大的函数，它可以定义对象的基本操作的自定义行为。对比defineProperty只能拦截对象的某一属性，proxy的功能更方便。所提供的可自定义的操作也更多。</p></blockquote><p>上面，我用defineProperty实现了vue的双向绑定，接下来我们用proxy来实现。</p><p>首先我们可以先了解一下<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noopener">proxy的作用和用法</a></p><p>首先 <code>defineProperty</code> 的用法是<code>Object.defineProperty(obj, prop, descriptor)</code></p><p><strong>proxy</strong>的用法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure></p><p>我们用proxy来实现一下双向绑定：</p><p>核心代码就像这样，在我们这个需求下分析</p><ol><li><code>set</code>函数中<ol><li><code>target</code> 为所拦截的对象</li><li><code>key</code> 为属性名</li><li><code>newValue</code>为所赋予的值</li><li>set中需要<code>return true</code>代表设置成功，返回flase在严格模式下报TypeError （代表该值与期望值类型不同）</li></ol></li><li><code>get</code>函数中<ol><li><code>target</code> 为所拦截的对象</li><li><code>key</code> 为属性名</li><li>get可返回任意值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;<span class="attr">value</span>: <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;<span class="attr">value</span>: <span class="number">0</span> &#125;, &#123;</span><br><span class="line"><span class="keyword">set</span>: function(target, key, newValue)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(key + <span class="string">'被赋值为'</span> + newValue)</span><br><span class="line">target[key] = newValue</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;，</span><br><span class="line"><span class="keyword">get</span>: function(target, key) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(target[key])</span><br><span class="line">        <span class="keyword">return</span> target[key]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.value = <span class="number">1</span> <span class="comment">// 0; value被赋值为1</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="proxy双向绑定具体实现"><a href="#proxy双向绑定具体实现" class="headerlink" title="proxy双向绑定具体实现"></a>proxy双向绑定具体实现</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"enter"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> content = <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> enter_input = <span class="built_in">document</span>.getElementById(<span class="string">'enter'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> data = &#123;</span></span><br><span class="line"><span class="actionscript">        enter_input: <span class="string">''</span>,</span></span><br><span class="line">        enter_input_watchers: []</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> watcher = <span class="function"><span class="keyword">function</span> <span class="title">watcherFn</span>(<span class="params">value</span>) </span>&#123;</span></span><br><span class="line">        content.innerText = value</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> watcher2 = <span class="function"><span class="keyword">function</span> <span class="title">watcher2Fn</span>(<span class="params">value</span>) </span>&#123;</span></span><br><span class="line">        enter_input.value = value</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> handler = &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">set</span>: <span class="function"><span class="keyword">function</span><span class="params">(target, key, value)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (key === <span class="string">'enter_input'</span>) &#123;</span></span><br><span class="line">                target[key] = value;</span><br><span class="line"><span class="actionscript">                target[key + <span class="string">"_watchers"</span>].map(<span class="function"><span class="keyword">function</span> <span class="params">(watcher)</span> </span>&#123;</span></span><br><span class="line">                    watcher(value)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        <span class="keyword">get</span>: <span class="function"><span class="keyword">function</span><span class="params">(target, key)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            target[key + <span class="string">"_watchers"</span>] = [watcher, watcher2];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> target[key]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> db = <span class="keyword">new</span> <span class="built_in">Proxy</span>(data, handler);</span></span><br><span class="line"><span class="actionscript">    db.enter_input; <span class="comment">//收集监听</span></span></span><br><span class="line"><span class="actionscript">    enter_input.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line">        db.enter_input = e.target.value;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="错误类型扩展"><a href="#错误类型扩展" class="headerlink" title="错误类型扩展"></a>错误类型扩展</h4><p>平时我们常见的错误类型分为<code>ReferenceError</code>，<code>TypeError</code>，<code>SyntaxError</code> 这三种。</p><h5 id="一、-ReferenceError-代表我们的作用域查找错误。"><a href="#一、-ReferenceError-代表我们的作用域查找错误。" class="headerlink" title="一、  ReferenceError 代表我们的作用域查找错误。"></a>一、  <strong>ReferenceError 代表我们的作用域查找错误。</strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//ReferenceError</span></span><br></pre></td></tr></table></figure><ol><li><p>我们在全局定义了<code>b</code>，所以<code>console.log(b)为1</code>，但是我们没有定义<code>a</code>，所以我们在全局作用域下找不到a，就会报<code>ReferenceError</code></p></li><li><p>如果是在函数中定义，则在函数中查找不到时，会去父作用域查找，一直到全局，都找不到，才会报<code>ReferenceError</code></p></li></ol><h5 id="二、-TypeError代表数据类型与预期不符。"><a href="#二、-TypeError代表数据类型与预期不符。" class="headerlink" title="二、  TypeError代表数据类型与预期不符。"></a>二、  <strong>TypeError代表数据类型与预期不符。</strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line">b() <span class="comment">//TypeError</span></span><br></pre></td></tr></table></figure><ol><li>我们在全局定义了<code>b</code>，其类型为Number，但是我们用()来执行它，把它当作了函数用，所以就会报<code>TypeError</code></li></ol><h5 id="三、-SyntaxError代表语法错误。"><a href="#三、-SyntaxError代表语法错误。" class="headerlink" title="三、  SyntaxError代表语法错误。"></a>三、  <strong>SyntaxError代表语法错误。</strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b &gt; <span class="number">1</span>;<span class="comment">//SyntaxError</span></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">let</span> b<span class="comment">//SyntaxError</span></span><br></pre></td></tr></table></figure><ol><li>很明显，我们不可以这么使用let，语法就错误了，所以就会报<code>SyntaxError</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_98. 验证二叉搜索树（递归）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_98.%20%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%EF%BC%88%E9%80%92%E5%BD%92%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_98.%20%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%EF%BC%88%E9%80%92%E5%BD%92%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">给定一个二叉树，判断其是否是一个有效的二叉搜索树。</span><br><span class="line"></span><br><span class="line">假设一个二叉搜索树具有如下特征：</span><br><span class="line"></span><br><span class="line">节点的左子树只包含小于当前节点的数。</span><br><span class="line">节点的右子树只包含大于当前节点的数。</span><br><span class="line">所有左子树和右子树自身必须也是二叉搜索树。</span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入:</span><br><span class="line">    2</span><br><span class="line">   / \</span><br><span class="line">  1   3</span><br><span class="line">输出: true</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入:</span><br><span class="line">    5</span><br><span class="line">   / \</span><br><span class="line">  1   4</span><br><span class="line">     / \</span><br><span class="line">    3   6</span><br><span class="line">输出: false</span><br><span class="line">解释: 输入为: [5,1,4,null,null,3,6]。</span><br><span class="line">     根节点的值为 5 ，但是其右子节点值为 4 。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><p>解决树的问题，最常用的还是递归的方法。<br>此题的关键就是找到node.val的取值范围。</p><p>其左右树的取值范围是以<code>根节点为分界线</code>，<code>左集合</code>为<code>左树取值范围</code>，<code>右集合</code>为<code>右树取值范围。</code></p><p>如下 左树取值范围是<code>[-∞，4]</code>,右树取值范围是<code>[6，+∞]</code>，以此类推。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  5</span><br><span class="line"> / \</span><br><span class="line">1   8</span><br><span class="line">   / \</span><br><span class="line">  6   9</span><br></pre></td></tr></table></figure></p><ol><li>以此为例，因为5为根节点，所以，他的取值范围 是<code>[-∞，+∞]</code>，也就是没有限制</li><li>然后观察左树，左树根节点为1，符合题目要求，要小于其根节点，也就是说其取值范围是<code>[-∞，4]</code></li><li>然后观察右树，右树根节点为4，符合题目要求，要大于其根节点，也就是说其取值范围是<code>[6，+∞]</code></li><li>观察右树左节点，按要求，它要小于右树根节点（8），并且大于树根节点（5），所以其取值范围是<code>[6，7]</code>，同理其右树右节点范围是<code>[9，+∞]</code>。</li><li>递归…</li></ol><p>了解了以上步骤，那么接下来再看代码实现可能会比较清晰。</p><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">//Number.MIN_SAFE_INTEGER  代表 -∞</span></span><br><span class="line"> <span class="comment">//Number.MAX_SAFE_INTEGER  代表 +∞</span></span><br><span class="line"><span class="keyword">let</span> flag</span><br><span class="line"><span class="keyword">let</span> isValidBST = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">    root &amp;&amp; findTree(root, <span class="built_in">Number</span>.MIN_SAFE_INTEGER, <span class="built_in">Number</span>.MAX_SAFE_INTEGER);</span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findTree</span>(<span class="params">node, min, max</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node.val &lt;= min || node.val &gt;= max) &#123;</span><br><span class="line">        <span class="keyword">return</span> flag = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    node.left &amp;&amp; findTree(node.left, min, node.val) <span class="comment">//递归时，传入其左树总的取值范围</span></span><br><span class="line">    node.right &amp;&amp; findTree(node.right, node.val, max)<span class="comment">//递归时，传入其右树总的取值范围</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_45. 跳跃游戏 II（贪心算法）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_45.%20%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F%20II%EF%BC%88%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_45.%20%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F%20II%EF%BC%88%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">给定一个非负整数数组，你最初位于数组的第一个位置。</span><br><span class="line"></span><br><span class="line">数组中的每个元素代表你在该位置可以跳跃的最大长度。</span><br><span class="line"></span><br><span class="line">你的目标是使用最少的跳跃次数到达数组的最后一个位置。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入: [2,3,1,1,4]</span><br><span class="line">输出: 2</span><br><span class="line">解释: 跳到最后一个位置的最小跳跃数是 2。</span><br><span class="line">     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。</span><br><span class="line">说明:</span><br><span class="line"></span><br><span class="line">假设你总是可以到达数组的最后一个位置。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><p>贪心算法。<br>首先我们要理解这个题目。<br>以 <code>[3,5,2,4,1,1,1,1,1]</code>为例子</p><p><code>index</code>表示我们所处<code>nums中的位置</code>，<code>maxLength</code>代表我们下一步<code>最远能到达</code>的位置。</p><ol><li>第0步时，我们处在index = 0，maxLength = 3，表示我们现在最远可以到达index = 3的位置。</li><li>当我们选择跳一步时，我们拥有了<code>5</code>，<code>maxLength</code>就变成了<code>index（1,5的下标）+ 5 = 6</code>，相当于从<code>0-6</code>的位置尽在我们掌握了</li><li>当我们选择跳二步时，我们拥有的是<code>2</code>，<code>maxLength</code>就变成了<code>index（2，2的下标）+ 2 = 4</code>，显然没有6大呀，不可取，不可取。</li><li>当我们选择跳三步时，我们拥有的是<code>4</code>，<code>maxLength</code>就变成了<code>index（3，4的下标）+4 = 7</code>，比6大，可以走的更远了，不错不错，就要他了。现在我们掌握了从 <code>0 - 7</code> 的位置跳转的权力了，所以它是目前的最优解，包含了其他的所以情况。</li><li>这个时候我们的位置就变成了，<code>index = 3， maxLength = 7</code></li><li>然后我们判断一下，我们现在的最远距离能不能到达结尾<code>(maxLength &gt;= (nums.length - 1)) ?</code>，如果可以，那就结束啦，目前我们走了<code>1</code>步，那么<code>下一步就可以到</code>了，所以就是<code>一共要走 1 + 1 步</code>，返回 <code>2</code> 就好啦。</li><li>如果不可以，那还得从<code>步骤 1 到步骤 5</code> 再来一遍。</li></ol><p>上面的过程，表示了我们正常处理的流程，符合我们的的思考习惯。所以问题其实就转化为了，求 可跳跃范围内的<code>下标index + nums[index]的最大值</code>，取出这个值，作为下一次的起点。</p><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> jump = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nums.length === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((nums.length - <span class="number">1</span>) &lt;= nums[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> step = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> maxLength = index + nums[index];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length;) &#123;</span><br><span class="line">       index = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt;= i + nums[i]; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((j + nums[j]) &gt; maxLength) &#123;</span><br><span class="line">                index = j</span><br><span class="line">                maxLength = (index + nums[index])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        step++;</span><br><span class="line">        i = index;</span><br><span class="line">        <span class="keyword">if</span> (maxLength &gt;= (nums.length - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ++step</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> step</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_53. 最大子序和（贪心，分治）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_53.%20%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C%EF%BC%88%E8%B4%AA%E5%BF%83%EF%BC%8C%E5%88%86%E6%B2%BB%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_53.%20%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C%EF%BC%88%E8%B4%AA%E5%BF%83%EF%BC%8C%E5%88%86%E6%B2%BB%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">输出: 6</span><br><span class="line">解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</span><br><span class="line">进阶:</span><br><span class="line"></span><br><span class="line">如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><p>贪心算法。</p><ol><li>依次求数组前i项的和，再求和之前，判断sum的值是否小于0，若小于零，直接抛弃。</li><li>若大于0，就sum+=nums[i]</li><li>由于子序列是必须要连续的，所以我们需要一个记录最大值的变量,maxSum.</li><li>每次sum求和之后，用maxSum记录最大值 <code>maxSum= Math.max(sum, maxSum)</code>;最终返回max即可</li></ol><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> maxSum = <span class="built_in">Number</span>.MIN_SAFE_INTEGER;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            sum = nums[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        maxSum = <span class="built_in">Math</span>.max(maxSum, sum)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><p>分治法。</p><ol><li>将nums分为3个部分：<ol><li>从nums[mid]处向两边求和，取得最大值。</li><li>nums的左半边 （仿照1的方式求得左半边的和）</li><li>nums的右半边（仿照1的方式求得右半边的和）</li></ol></li><li>求出这三个和之后，返回其最大的一个值。</li><li>从步骤一得出，我们需用使用递归计算。</li></ol><h3 id="代码实现一-1"><a href="#代码实现一-1" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> fz(<span class="number">0</span>, nums.length<span class="number">-1</span>, nums)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fz</span>(<span class="params">left, right, nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left === right) &#123;</span><br><span class="line">       <span class="keyword">return</span> nums[left]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> leftMax = <span class="built_in">Number</span>.MIN_SAFE_INTEGER</span><br><span class="line">    <span class="keyword">let</span> rightMax = <span class="built_in">Number</span>.MIN_SAFE_INTEGER</span><br><span class="line">    <span class="keyword">let</span> midMax = crossNum(left, right, nums)</span><br><span class="line">    leftMax = fz(left, mid, nums)</span><br><span class="line">    rightMax = fz(mid+<span class="number">1</span>, right, nums)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(<span class="built_in">Math</span>.max(midMax, rightMax), leftMax);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">crossNum</span>(<span class="params">left, right, nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left === right) &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[left]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> leftSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> leftMax = <span class="built_in">Number</span>.MIN_SAFE_INTEGER;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = mid; i &gt;= left; i--) &#123;</span><br><span class="line">        leftSum += nums[i];</span><br><span class="line">        leftMax = <span class="built_in">Math</span>.max(leftMax, leftSum)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> rightSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> rightMax = <span class="built_in">Number</span>.MIN_SAFE_INTEGER;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = mid + <span class="number">1</span>; i &lt;= right; i++) &#123;</span><br><span class="line">        rightSum += nums[i];</span><br><span class="line">        rightMax = <span class="built_in">Math</span>.max(rightMax, rightSum)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rightMax + leftMax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_3. 无重复字符的最长子串（滑动窗口）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_3.%20%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2%EF%BC%88%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_3.%20%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2%EF%BC%88%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入: &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><a id="more"></a><p>这个题是我昨天晚上做的，没想到今天变成每日一题了。。我这个也算神预言了~</p><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><p>通过滑动窗口去解决它，</p><ol><li>建立一个空字符串str，遍历原始字符串s每个位置的值s[i]</li><li>若str中不存在s[i]，str+=s[i]</li><li>若存在，滑动窗口，寻找str中s[i]的位置str.indexOf(s[i])，截取该位置之后的str部分，然后str+=s[i].</li><li>进行第三步时，需要取max(length, str.length) ，length为之前截取时记录的str.length的最大值。</li><li>最后返回最大值即可。<h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">       <span class="keyword">if</span> (str.indexOf(s[i]) == <span class="number">-1</span>) &#123;</span><br><span class="line">           str += s[i]</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           length = <span class="built_in">Math</span>.max(length, str.length);</span><br><span class="line">           str = str.slice(str.indexOf(s[i]) + <span class="number">1</span>) + s[i];</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  <span class="built_in">Math</span>.max(length, str.length);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_21. 合并两个有序链表（递归归并）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_21.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%EF%BC%88%E9%80%92%E5%BD%92%E5%BD%92%E5%B9%B6%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_21.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%EF%BC%88%E9%80%92%E5%BD%92%E5%BD%92%E5%B9%B6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"></span><br><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><p>其实就是归并排序的最后一步。合成两个有序序列。只不过用递归的方式去遍历链表。</p><ol><li>递归，把min(t1，t2),加入新链。</li><li>若t1小，迭代t1 = t1.next，进入下一轮。<h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mergeTwoLists = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (l1 &amp;&amp; l2) &#123;</span><br><span class="line">        mergeL(l1,l2,res)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l1 || l2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeL</span>(<span class="params">l1, l2, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l1.val &lt;= l2.val) &#123;</span><br><span class="line">        res.next = l1</span><br><span class="line">        res.next.next = l2</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.next = l2</span><br><span class="line">        res.next.next = l1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l1.next &amp;&amp; l2.next) &#123;</span><br><span class="line">        mergeL(l1.next, l2.next, res.next.next)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：202. 快乐数（快慢指针）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9A202.%20%E5%BF%AB%E4%B9%90%E6%95%B0%EF%BC%88%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9A202.%20%E5%BF%AB%E4%B9%90%E6%95%B0%EF%BC%88%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">给定一个 没有重复 数字的序列，返回其所有可能的全排列。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入: [1,2,3]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [2,3,1],</span><br><span class="line">  [3,1,2],</span><br><span class="line">  [3,2,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><p>广度优先遍历方法，递归解决</p><p><img src="https://img-blog.csdnimg.cn/20200425150234903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如图所示， 我们需要3个信息：</p><pre><code>1. 和已确定序列，2. 剩余序列</code></pre><h3 id="题解一："><a href="#题解一：" class="headerlink" title="题解一："></a>题解一：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> permute = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> copy = [...nums];</span><br><span class="line">        join(copy.splice(i,<span class="number">1</span>), copy, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// preArr为已确认的前序列</span></span><br><span class="line"><span class="comment">// arr为剩余的序列</span></span><br><span class="line"><span class="keyword">var</span> join = <span class="function"><span class="keyword">function</span>(<span class="params">preArr, arr, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.push(preArr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> copy = [...arr];</span><br><span class="line">        join(preArr.concat(copy.splice(i,<span class="number">1</span>)), copy, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：617. 合并二叉树（递归合并）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9A617.%20%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E9%80%92%E5%BD%92%E5%90%88%E5%B9%B6%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9A617.%20%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E9%80%92%E5%BD%92%E5%90%88%E5%B9%B6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。</span><br><span class="line"></span><br><span class="line">你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: </span><br><span class="line">Tree 1                     Tree 2                  </span><br><span class="line">          1                         2                             </span><br><span class="line">         / \                       / \                            </span><br><span class="line">        3   2                     1   3                        </span><br><span class="line">       /                           \   \                      </span><br><span class="line">      5                             4   7                  </span><br><span class="line">输出: </span><br><span class="line">合并后的树:</span><br><span class="line">     3</span><br><span class="line">    / \</span><br><span class="line">   4   5</span><br><span class="line">  / \   \ </span><br><span class="line"> 5   4   7</span><br><span class="line">注意: 合并必须从两个树的根节点开始。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li>又是一道二叉树的题，题目要求合并二叉树，即相同位置的val值相加，不同位置的val值互相替换。</li><li>一般思路是创建一个新树，去取两树之和。</li><li>但是题目没有要求不能改变原来的两棵树，那么我们以t1树为基准，观察t2树。</li><li>若t1树对应t2树的位置都有值，则相加，若t1无，t2有，则t2替换t1节点，若t1有，t2无则无需操作。<h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">t1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">t2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> mergeTrees = <span class="function">(<span class="params">t1, t2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (t1 &amp;&amp; t2) &#123;</span><br><span class="line">        mergeNode(t1,t2) </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t1 || t2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mergeNode = <span class="function">(<span class="params">t1, t2, root</span>) =&gt;</span> &#123;</span><br><span class="line">    t1.val += t2.val;</span><br><span class="line">    <span class="keyword">if</span> (t1.left === <span class="literal">null</span>) &#123;</span><br><span class="line">        t1.left = t2.left</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>( t2.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">         mergeNode(t1.left,t2.left)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (t1.right === <span class="literal">null</span>) &#123;</span><br><span class="line">        t1.right = t2.right</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t2.right !== <span class="literal">null</span>) &#123;</span><br><span class="line">        mergeNode(t1.right,t2.right)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>同样的我们使用递归的方法去遍历。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript:一道题，带你搞定二分法!</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9A%E4%B8%80%E9%81%93%E9%A2%98%EF%BC%8C%E5%B8%A6%E4%BD%A0%E6%90%9E%E5%AE%9A%E4%BA%8C%E5%88%86%E6%B3%95!%20/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9A%E4%B8%80%E9%81%93%E9%A2%98%EF%BC%8C%E5%B8%A6%E4%BD%A0%E6%90%9E%E5%AE%9A%E4%BA%8C%E5%88%86%E6%B3%95!%20/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>题目有点长，我就截个图展示了。<br><img src="https://img-blog.csdnimg.cn/20200429104354570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>这跟我之前做的那个旋转数组有相似之处，都是两个有序序列的组合。<br><a href="https://blog.csdn.net/lunhui1994_/article/details/105791551" target="_blank" rel="noopener">JavaScript：leetcode_33. 搜索旋转排序数组（二分法）</a></p><p>看题目限制，肯定又是不能用遍历的O(n)。而且对获取mountain的值有100次的限制。</p><p>那么自然就想到了<strong>二分法</strong>，结合题目，mountain长度为10000那么大概分十几次就完事儿了。基本不会把一百次用完。</p><p>我的思路是，用<strong>二分法</strong>找到mountain的山顶<strong>top</strong>，将其分为<strong>两个有序</strong>序列，然后分别用<strong>二分法</strong>查找。</p><p>最终算法时间复杂度为 O(log n)</p><ol><li>findTop 查找山顶top</li><li>findLeftTarget 左序查找target，左序列为升序序列。</li><li>findRightTarget 右序列查找target，右序列为降序序列。(也只是在判断条件上有所区别)</li></ol><p>如果不太清楚二分法,那么请先看一下 <a href="#kz"><strong>文末扩展</strong></a> </p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // This is the MountainArray's API interface.</span></span><br><span class="line"><span class="comment"> * // You should not implement it, or speculate about its implementation</span></span><br><span class="line"><span class="comment"> * function MountainArray() &#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">index</span></span></span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> *     this.get = function(index) &#123;</span></span><br><span class="line"><span class="comment"> *         ...</span></span><br><span class="line"><span class="comment"> *     &#125;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> *     this.length = function() &#123;</span></span><br><span class="line"><span class="comment"> *         ...</span></span><br><span class="line"><span class="comment"> *     &#125;;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;MountainArray&#125;</span> <span class="variable">mountainArr</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findInMountainArray = <span class="function"><span class="keyword">function</span>(<span class="params">target, mountainArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> length = mountainArr.length();</span><br><span class="line">    <span class="keyword">let</span> left_v = mountainArr.get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">let</span> right_v = mountainArr.get(length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (target &lt; left_v &amp;&amp; target &lt; right_v) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> resMid = findTop(<span class="number">0</span>, length - <span class="number">1</span>, mountainArr)</span><br><span class="line">    <span class="keyword">let</span> top = resMid.mid;</span><br><span class="line">    <span class="keyword">let</span> topV = resMid.mid_v;</span><br><span class="line">    <span class="keyword">if</span> (target &gt; topV) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> left_target = findLeftTarget(<span class="number">0</span>, top, mountainArr, target);</span><br><span class="line">    <span class="keyword">return</span> left_target === <span class="number">-1</span> ? findRightTarget(top, length<span class="number">-1</span>, mountainArr, target) : left_target;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> findTop = <span class="function"><span class="keyword">function</span>(<span class="params">left, right, mountainArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> mid_lv = mountainArr.get(mid - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> mid_v = mountainArr.get(mid);</span><br><span class="line">    <span class="keyword">let</span> mid_rv = mountainArr.get(mid + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (mid_v &gt; mid_lv) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mid_v &gt; mid_rv) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                mid: mid,</span><br><span class="line">                mid_v: mid_v,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> findTop(mid, right, mountainArr)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mid_v &lt; mid_lv) &#123;</span><br><span class="line">        <span class="keyword">return</span> findTop(left, mid, mountainArr)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> findLeftTarget = <span class="function"><span class="keyword">function</span>(<span class="params">left, right, mountainArr, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (right - left &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> left_v = mountainArr.get(left);</span><br><span class="line">        <span class="keyword">if</span> (left_v === target) &#123;</span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> right_v = mountainArr.get(right);</span><br><span class="line">        <span class="keyword">if</span> (right_v === target) &#123;</span><br><span class="line">            <span class="keyword">return</span> right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> mid_v = mountainArr.get(mid);</span><br><span class="line">    <span class="keyword">if</span> (mid_v &lt; target) &#123;</span><br><span class="line">        <span class="keyword">return</span> findLeftTarget(mid+<span class="number">1</span>, right, mountainArr, target)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mid_v &gt; target) &#123;</span><br><span class="line">        <span class="keyword">return</span> findLeftTarget(left, mid, mountainArr, target)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> findRightTarget = <span class="function"><span class="keyword">function</span>(<span class="params">left, right, mountainArr, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (right - left &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> left_v = mountainArr.get(left);</span><br><span class="line">        <span class="keyword">if</span> (left_v === target) &#123;</span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> right_v = mountainArr.get(right);</span><br><span class="line">        <span class="keyword">if</span> (right_v === target) &#123;</span><br><span class="line">            <span class="keyword">return</span> right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> mid_v = mountainArr.get(mid);</span><br><span class="line">    <span class="keyword">if</span> (mid_v &gt; target) &#123;</span><br><span class="line">        <span class="keyword">return</span> findLeftTarget(mid+<span class="number">1</span>, right, mountainArr, target)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mid_v &lt; target) &#123;</span><br><span class="line">        <span class="keyword">return</span> findLeftTarget(left, mid, mountainArr, target)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展-二分法详解"><a href="#扩展-二分法详解" class="headerlink" title="扩展 二分法详解"></a><span id="kz">扩展 二分法详解</span></h3><h5 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h5><blockquote><p>算法：当数据量很大适宜采用该方法。采用二分法查找时，数据需是<strong>排好序</strong>的。</p></blockquote><ul><li>基本思想：假设数据是按升序排序的，对于给定值key，从序列的中间位置k开始比较， 如果当前位置arr[k]值等于key，则查找成功；<ul><li>若key小于当前位置值arr[k]，则在数列的前半段中查找,arr[low,mid-1]；</li><li>若key大于当前位置值arr[k]，则在数列的后半段中继续查找arr[mid+1,high]，</li><li>直到找到为止,时间复杂度:O(log(n))</li></ul></li></ul><h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><ul><li>序列必须是有序的，无序序列无法使用二分法。</li><li>通过递归查找，直至序列长度缩小到2或者1。</li></ul><h5 id="模拟实现"><a href="#模拟实现" class="headerlink" title="模拟实现"></a>模拟实现</h5><blockquote><p>以 nums[1,2,3,4,5]为例，找到数组中值为1的下标</p><ol><li>left为 0，right为 4, 声明函数<code>find(left,right)</code></li><li>求出中间点 <code>mid =  left + ((right - left) &gt;&gt; 1)</code> 。 （&gt;&gt; 为位运算，相当于缩小2倍）</li><li>得到 mid 为 2；判断 <code>nums[2] === 1 ?</code>，若等返回<code>mid</code>，nums[2] 为 3，不等 1 ，进入下一步</li><li>判断<code>nums[mid] &gt; 1</code>,由于nums[2] ===3 &gt; 1,进入左序列<code>find(0, 2)</code></li><li>求出中间点 <code>mid =  0+ ((2- 0) &gt;&gt; 1)</code>,</li><li>得到mid 为 1；判断 <code>nums[1] === 1 ?</code>，若等返回<code>mid</code>，nums[1] 为 2，不等 1 ，进入下一步 </li><li>判断<code>nums[mid] &gt; 1</code>,由于nums[1] ===2 &gt; 1,进入左序列<code>find(0, 1)</code></li><li>求出中间点 <code>mid =  0+ ((1 - 0) &gt;&gt; 1)</code>,</li><li>得到mid 为 0；判断 <code>nums[0] === 1 ?</code>，若等返回<code>mid</code>，nums[0] 为 1，等 1 ，return mid；</li></ol></blockquote><p>至此得到最后结果 下标为 0；</p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] ;</span><br><span class="line"><span class="keyword">let</span> target = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> find = <span class="function"><span class="keyword">function</span>(<span class="params">left, right, target, nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> mid = (left + ((right - left) &gt;&gt; <span class="number">1</span>));  </span><br><span class="line">    <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">    <span class="keyword">return</span> find(left, mid, target, nums);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">        <span class="keyword">return</span> find(mid + <span class="number">1</span>, right, target, nums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">find(<span class="number">0</span>,<span class="number">4</span>,<span class="number">1</span>, nums)</span><br></pre></td></tr></table></figure><p>这种是数组中一定包含target的情况下。如果不确定是否包含，需要在值只剩下1-2个的时候做出判断。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] ;</span><br><span class="line"><span class="keyword">let</span> target = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> find = <span class="function"><span class="keyword">function</span>(<span class="params">left, right, target, nums</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (right- left &lt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> nums[left] === target ? left : (nums[right] ===target ? right: <span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">let</span> mid = (left + ((right - left) &gt;&gt; <span class="number">1</span>));  </span><br><span class="line">    <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">    <span class="keyword">return</span> find(left, mid, target, nums);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">        <span class="keyword">return</span> find(mid + <span class="number">1</span>, right, target, nums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">find(<span class="number">0</span>,<span class="number">4</span>,<span class="number">1</span>, nums)</span><br></pre></td></tr></table></figure><p>这样如果不存在返回 -1 </p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_33. 搜索旋转排序数组（二分法）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_33.%20%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%EF%BC%88%E4%BA%8C%E5%88%86%E6%B3%95%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_33.%20%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%EF%BC%88%E4%BA%8C%E5%88%86%E6%B3%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">假设按照升序排序的数组在预先未知的某个点上进行了旋转。</span><br><span class="line"></span><br><span class="line">( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</span><br><span class="line"></span><br><span class="line">搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</span><br><span class="line"></span><br><span class="line">你可以假设数组中不存在重复的元素。</span><br><span class="line"></span><br><span class="line">你的算法时间复杂度必须是 O(log n) 级别。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: nums = [4,5,6,7,0,1,2], target = 0</span><br><span class="line">输出: 4</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: nums = [4,5,6,7,0,1,2], target = 3</span><br><span class="line">输出: -1</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><p>时间复杂度要O(log n) ，那么就不能直接用遍历了。遍历是O(n)</p><p>其实一个无序的序列，查找的最小时间复杂度就是O(n)</p><p>但是，根据题意，原序列为升序序列，那么旋转后的序列其实是两个有序的序列的拼接，且没有交集。</p><p>我的思路是<strong>找到旋转点</strong>，然后分别使用<strong>二分法</strong>查找。二分法的时间复杂度就是O(log n)。</p><p>寻找<strong>旋转点</strong>同样使用<strong>二分法</strong>。</p><p>寻找<strong>旋转点</strong>时，<strong>左右序列都要包含mid</strong>，进行判断，否则会出现正好在旋转点处分割左右序列的情况。</p><p>这样的方法时间复杂度为<strong>O(2 log n)</strong> 应该还是符合题意的。</p><h3 id="题解一："><a href="#题解一：" class="headerlink" title="题解一："></a>题解一：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> flag = ef1(left, right, nums);</span><br><span class="line">    <span class="keyword">let</span> leftV = ef(left, flag, target, nums)</span><br><span class="line">    <span class="keyword">let</span> rightV = ef(flag + <span class="number">1</span>, right, target, nums)</span><br><span class="line">    <span class="keyword">return</span> leftV &gt; <span class="number">-1</span> ? leftV : rightV</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 查找旋转点</span></span><br><span class="line"><span class="keyword">var</span> ef1 = <span class="function"><span class="keyword">function</span>(<span class="params">left, right, nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor(left + (right - left) / <span class="number">2</span>); </span><br><span class="line">    <span class="keyword">if</span> (right - left === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[left] &gt; nums[right]) &#123;</span><br><span class="line">            <span class="keyword">return</span> left</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 左序列 如果左大于右，那说明旋转点在左序列中。</span></span><br><span class="line">    <span class="keyword">if</span> (nums[left] &gt; nums[mid]) &#123;</span><br><span class="line">        <span class="keyword">return</span> ef1(left, mid, nums);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">// 右序列 如果左大于右，那说明旋转点在左序列中。</span></span><br><span class="line">    <span class="keyword">if</span> (nums[mid] &gt; nums[right]) &#123;</span><br><span class="line">        <span class="keyword">return</span> ef1(mid, right, nums);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查找target</span></span><br><span class="line"><span class="keyword">var</span> ef = <span class="function"><span class="keyword">function</span>(<span class="params">left, right, target, nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor(left + (right - left) / <span class="number">2</span>); </span><br><span class="line">    <span class="keyword">if</span> (right - left === <span class="number">1</span> || right - left === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target === nums[left]) &#123;</span><br><span class="line">            <span class="keyword">return</span> left</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (target === nums[right]) &#123;</span><br><span class="line">            <span class="keyword">return</span> right</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; nums[mid] &gt;= target) &#123;</span><br><span class="line">        <span class="keyword">return</span> ef(left, mid, target, nums);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nums[mid + <span class="number">1</span>] &lt;= target &amp;&amp; nums[right] &gt;= target) &#123;</span><br><span class="line">        <span class="keyword">return</span> ef(mid + <span class="number">1</span>, right, target, nums);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：leetcode_46. 全排列 (广度优先遍历)</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_46.%20%E5%85%A8%E6%8E%92%E5%88%97%20(%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86)/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_46.%20%E5%85%A8%E6%8E%92%E5%88%97%20(%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86)/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">给定一个 没有重复 数字的序列，返回其所有可能的全排列。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入: [1,2,3]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [2,3,1],</span><br><span class="line">  [3,1,2],</span><br><span class="line">  [3,2,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><p>广度优先遍历方法，递归解决</p><p><img src="https://img-blog.csdnimg.cn/20200425150234903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如图所示， 我们需要3个信息：</p><pre><code>1. 和已确定序列，2. 剩余序列</code></pre><h3 id="题解一："><a href="#题解一：" class="headerlink" title="题解一："></a>题解一：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> permute = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> copy = [...nums];</span><br><span class="line">        join(copy.splice(i,<span class="number">1</span>), copy, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// preArr为已确认的前序列</span></span><br><span class="line"><span class="comment">// arr为剩余的序列</span></span><br><span class="line"><span class="keyword">var</span> join = <span class="function"><span class="keyword">function</span>(<span class="params">preArr, arr, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.push(preArr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> copy = [...arr];</span><br><span class="line">        join(preArr.concat(copy.splice(i,<span class="number">1</span>)), copy, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：面56 - I. 数组中数字出现的次数（分组异或）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9A%E9%9D%A256%20-%20I.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%EF%BC%88%E5%88%86%E7%BB%84%E5%BC%82%E6%88%96%EF%BC%89/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9A%E9%9D%A256%20-%20I.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%EF%BC%88%E5%88%86%E7%BB%84%E5%BC%82%E6%88%96%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">一个整型数组 nums 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：nums = [4,1,4,6]</span><br><span class="line">输出：[1,6] 或 [6,1]</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：nums = [1,2,10,4,1,4,3,3]</span><br><span class="line">输出：[2,10] 或 [10,2]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">限制：</span><br><span class="line"></span><br><span class="line">2 &lt;= nums &lt;= 10000</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>求出数组异或的结果。因为相同值的异或为0，所以最后异或的结果为两个不同数的异或结果res。</li><li>将两个不同的值分别分割到两个不同的数组中。取res二进制中任意一位值为1的位置，作为区分标志flag。（1，说明两个不同值的二进制，在该位处的值一个为0，一个为1）</li><li>遍历数组  根据（nums[i] &amp; flag）的值区分为两个数组，并求出两个数组的异或结果。</li><li>由于两个不同值被分开，并且相同值对同一值的位与（&amp;）操作是相同的。所以，两个数组内除了不同值，其他都是由n对相同值构成，所以最后的异或操做是排除了n对相同值，最后分别得出了两个不同值。</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> singleNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length === <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">    nums.unshift(<span class="number">0</span>);</span><br><span class="line">    res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        res ^= nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>((flag &amp; res) == <span class="number">0</span>) &#123;</span><br><span class="line">        flag &lt;&lt;= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &amp; flag) &#123;</span><br><span class="line">            left ^= nums[i]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right ^= nums[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [left, right]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_面试题51. 数组中的逆序对（归并排序记录逆序对）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_%E9%9D%A2%E8%AF%95%E9%A2%9851.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_%E9%9D%A2%E8%AF%95%E9%A2%9851.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [7,5,6,4]</span><br><span class="line">输出: 5</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><p>N*N遍历求出逆序对的总数</p><h3 id="题解一："><a href="#题解一：" class="headerlink" title="题解一："></a>题解一：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> reversePairs = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i = nums.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &gt;=<span class="number">0</span>; j++) &#123;</span><br><span class="line">             <span class="keyword">if</span> (nums[j] &lt; nums[i]) &#123;</span><br><span class="line">                res++;</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> res;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>很简单，但是毫无疑问超时。</p><h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><p>归并排序算法，排序过程中记录逆序对的数量。最终nums还是一个升序序列。相当于我们在归并排序中顺手得到了逆序对的数量。</p><p>归并排序：它的思路就是，找到数组中间下标，然后排序左序列（left，middle）和右序列（middle+1，right）。结合递归一直分到序列长度为2，然后出栈排序。</p><p>归并排序的思路即：</p><ol><li>[4,2,3,1,8,7,6,5] =&gt; [4,2,3,1]和[8,7,6,5]</li><li>[4,2,3,1] =&gt; [4,2] 和 [3,1]</li><li>到length==2,递归到终点，排序[4,2] =&gt; [2,4]。[3,1] =&gt; [1,3]。</li><li>然后得到[2,4,1,3],再对其进行排序，因为子序列的顺序都是排好的。所以，我们只需要对比，[2,4]和[1,3]哪个序列中前面的值小，就摘出来，放在help中。<ol><li>比如1和2比，1小，那么help就变成了[1]，左序列还是[2,4],右序列变成了[3].</li><li>然后3和2比，2小，那么help就变成了[1,2], 左序列变成了[4],右序列还是[3].</li><li>一直比到左右序列有一个序列为空时，再将另外一个序列依次加入help。</li></ol></li></ol><h3 id="题解一：-1"><a href="#题解一：-1" class="headerlink" title="题解一："></a>题解一：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">nums, left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left === right) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor(left + ((right - left) &gt;&gt; <span class="number">1</span>));</span><br><span class="line">    mergeSort(nums, left, mid)</span><br><span class="line">    mergeSort(nums, mid + <span class="number">1</span>, right)</span><br><span class="line">    <span class="keyword">let</span> p1 = left;</span><br><span class="line">    <span class="keyword">let</span> p2 = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> help = [];</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p1 &lt;= mid &amp;&amp; p2 &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[p1] &lt;= nums[p2]) &#123;</span><br><span class="line">            res += p2 - (mid + <span class="number">1</span>)<span class="comment">//左序列的值，在赋值之前要看下help中，在它之前有几个右序列的值。就有几个逆序对。</span></span><br><span class="line">        &#125;</span><br><span class="line">        help[i++] = nums[p1] &gt; nums[p2] ? nums[p2++] : nums[p1++];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p1 &lt;= mid) &#123;</span><br><span class="line">        help[i++] = nums[p1++];</span><br><span class="line">        res += right - mid <span class="comment">//若左序列还有剩余，那么剩余的都比右序列大，所以每个都要加上右序列的长度。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p2 &lt;= right) &#123;</span><br><span class="line">        help[i++] = nums[p2++];</span><br><span class="line">    &#125;</span><br><span class="line">    nums.splice(left, right - left + <span class="number">1</span>, ...help);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reversePairs = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!nums.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="number">0</span>;</span><br><span class="line">    mergeSort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//nums此时是一个升序的序列</span></span><br><span class="line">    <span class="keyword">return</span> res </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_面试题 08.11. 硬币(数学方法，双百分)</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_%E9%9D%A2%E8%AF%95%E9%A2%98%2008.11.%20%E7%A1%AC%E5%B8%81/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_%E9%9D%A2%E8%AF%95%E9%A2%98%2008.11.%20%E7%A1%AC%E5%B8%81/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">硬币。给定数量不限的硬币，币值为25分、10分、5分和1分，编写代码计算n分有几种表示法。(结果可能会很大，你需要将结果模上1000000007)</span><br><span class="line"></span><br><span class="line">示例1:</span><br><span class="line"></span><br><span class="line"> 输入: n = 5</span><br><span class="line"> 输出：2</span><br><span class="line"> 解释: 有两种方式可以凑成总金额:</span><br><span class="line">5=5</span><br><span class="line">5=1+1+1+1+1</span><br><span class="line">示例2:</span><br><span class="line"></span><br><span class="line"> 输入: n = 10</span><br><span class="line"> 输出：4</span><br><span class="line"> 解释: 有四种方式可以凑成总金额:</span><br><span class="line">10=10</span><br><span class="line">10=5+5</span><br><span class="line">10=5+1+1+1+1+1</span><br><span class="line">10=1+1+1+1+1+1+1+1+1+1</span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line"></span><br><span class="line">你可以假设：</span><br><span class="line"></span><br><span class="line">0 &lt;= n (总金额) &lt;= 1000000</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>在这我只说一个硬刚的办法。没有算法，按照正常人类观察的思路：</p><ol><li>一共存在n/25个25分硬币。</li><li>求当存在1个25分硬币时，剩余部分由多少个10分硬币组成。<ol><li>在2的条件下，求1个10分硬币之外的部分由多少个5分硬币组成,有几个就加几个，再加上全1分的情况。</li></ol></li><li>求当存在1个25分硬币时，剩余部分由多少个5分硬币组成。有几个就加几个，再加上全1分的情况。</li></ol><p>至此我们求出了，组合中含有25分硬币的所有方法。然后按照上面的方法，求只存在10，5，1的方法，最后求只存在5，1的方法。其和即为我们所求的所有组合个数</p><h3 id="题解一："><a href="#题解一：" class="headerlink" title="题解一："></a>题解一：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> waysToChange = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//求 25分 10分 5分 1分组合情况</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">Math</span>.floor(n / <span class="number">25</span>); i++) &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">Math</span>.floor(( n - <span class="number">25</span> * i) / <span class="number">10</span>) ; j++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt;= <span class="built_in">Math</span>.floor((n - <span class="number">25</span> * i - <span class="number">10</span>*j) / <span class="number">5</span>); k++) &#123;</span><br><span class="line">               res++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> l = <span class="number">0</span>; l &lt;= <span class="built_in">Math</span>.floor(( n - <span class="number">25</span> * i) / <span class="number">5</span>) ; l++) &#123;</span><br><span class="line">            res++</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求 10分 5分 1分组合情况</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">Math</span>.floor(n / <span class="number">10</span>) ; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt;= <span class="built_in">Math</span>.floor((n - <span class="number">10</span>*j) / <span class="number">5</span>); k++) &#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求 5分 1分组合情况</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt;= <span class="built_in">Math</span>.floor(n / <span class="number">5</span>); k++) &#123;</span><br><span class="line">        res++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % <span class="number">1000000007</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个办法，相当的好理解吧。然鹅！！！超时咯~~~</p><p>那我就不会优化优化吗~~</p><ol><li>我们可以看出来求10，5，1 的情况和求5，1的情况，实际上是求当25分的个数为0时的情况。那我们合并一下，将i的值从0开始循环，那么就可以合并起来啦</li></ol><h4 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> waysToChange = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//求 25分 10分 5分 1分组合情况</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">Math</span>.floor(n / <span class="number">25</span>); i++) &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">Math</span>.floor(( n - <span class="number">25</span> * i) / <span class="number">10</span>) ; j++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt;= <span class="built_in">Math</span>.floor((n - <span class="number">25</span> * i - <span class="number">10</span>*j) / <span class="number">5</span>); k++) &#123;</span><br><span class="line">               res++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> l = <span class="number">0</span>; l &lt;= <span class="built_in">Math</span>.floor(( n - <span class="number">25</span> * i) / <span class="number">5</span>) ; l++) &#123;</span><br><span class="line">            res++</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> res % <span class="number">1000000007</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>再来看,这是求5，1分的。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (let l = 0; l &lt;= Math.floor(( n - 25 * i) / 5) ; l++) &#123;</span><br><span class="line">  res++</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><p>其实是求i = 0 到 Math.floor(( n - 25 <em> i) / 5) 的个数吧，那就是Math.floor(( n - 25 </em> i) / 5)+1个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let rest = Math.floor( n - 25 * i) ;</span><br><span class="line">res+= Math.floor(rest / 5) + 1;</span><br></pre></td></tr></table></figure><ol start="3"><li>同理我们把10，5，1 的for循环也提取一下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> for (let j = 1; j &lt;= Math.floor(( n - 25 * i) / 10) ; j++) &#123;</span><br><span class="line">           for (let k = 0; k &lt;= Math.floor((n - 25 * i - 10*j) / 5); k++) &#123;</span><br><span class="line">               res++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">// 先按照2中的方法把内循环优化一下</span><br><span class="line">let rest = Math.floor( n - 25 * i) ;</span><br><span class="line">let rest10 = Math.floor(rest / 10);</span><br><span class="line"> for (let j = 1; j &lt;= rest10 ; j++) &#123;</span><br><span class="line">           res+= Math.floor(rest / 5) + 1 - 2j;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li></ol><p>=&gt; 到这儿应该很清楚怎么优化了吧 (Math.floor(rest / 5) + 1)<em>rest10 - (2 + 2 </em> 2 + 2 <em> 3+….+2 </em> rest10)<br>=&gt; (Math.floor(rest / 5) + 1)<em>rest10 - (2+2</em>rest10)/2 再提取一下公因式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let rest = Math.floor( n - 25 * i) ;</span><br><span class="line">let rest10 = Math.floor(rest / 10);</span><br><span class="line"></span><br><span class="line">   res += rest10 * (Math.floor(rest / 5) - rest10)</span><br></pre></td></tr></table></figure></p><h3 id="题解二："><a href="#题解二：" class="headerlink" title="题解二："></a>题解二：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> waysToChange = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> length25 = <span class="built_in">Math</span>.floor(n / <span class="number">25</span>);</span><br><span class="line">     <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= length25; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> rest = <span class="built_in">Math</span>.floor(( n - <span class="number">25</span> * i));</span><br><span class="line">        <span class="keyword">let</span> rest10 = <span class="built_in">Math</span>.floor(rest / <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        res += rest10 * (<span class="built_in">Math</span>.floor(rest / <span class="number">5</span>) - rest10)</span><br><span class="line"></span><br><span class="line">        res += <span class="built_in">Math</span>.floor(rest / <span class="number">5</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res % <span class="number">1000000007</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>就这样完美解决了，并且时间和空间都秒杀了100%</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leecode_199. 二叉树的右视图(二叉树中右左遍历）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleecode_199.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleecode_199.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入: [1,2,3,null,5,null,4]</span><br><span class="line">输出: [1, 3, 4]</span><br><span class="line">解释:</span><br><span class="line"></span><br><span class="line">   1            &lt;---</span><br><span class="line"> /   \</span><br><span class="line">2     3         &lt;---</span><br><span class="line"> \     \</span><br><span class="line">  5     4       &lt;---</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>对二叉树进行<strong>中右左</strong>顺序遍历，以此顺序，记录每个层级第一个被遍历的节点。</p><a id="more"></a><h3 id="题解一："><a href="#题解一：" class="headerlink" title="题解一："></a>题解一：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> rightSideView = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> resArr = [];</span><br><span class="line">    <span class="keyword">let</span> level = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;<span class="keyword">return</span> []&#125;    </span><br><span class="line">    nodeFn(root, <span class="number">0</span>, resArr)</span><br><span class="line">    <span class="keyword">return</span> resArr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nodeFn = <span class="function"><span class="keyword">function</span> (<span class="params">node, level, resArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (resArr[level] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        resArr[level] = node.val;</span><br><span class="line">    &#125;</span><br><span class="line">    node.right &amp;&amp; nodeFn(node.right, level + <span class="number">1</span>, resArr)</span><br><span class="line">    node.left &amp;&amp; nodeFn(node.left, level + <span class="number">1</span>, resArr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于二叉树的后序遍历的反序（中右左），只不过需要标记一下每个层级的第一个遍历节点即可。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_200. 岛屿数量 (DFS)</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_200.%20%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_200.%20%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">给你一个由 &apos;1&apos;（陆地）和 &apos;0&apos;（水）组成的的二维网格，请你计算网格中岛屿的数量。</span><br><span class="line"></span><br><span class="line">岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</span><br><span class="line"></span><br><span class="line">此外，你可以假设该网格的四条边均被水包围。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入:</span><br><span class="line">11110</span><br><span class="line">11010</span><br><span class="line">11000</span><br><span class="line">00000</span><br><span class="line">输出: 1</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入:</span><br><span class="line">11000</span><br><span class="line">11000</span><br><span class="line">00100</span><br><span class="line">00011</span><br><span class="line">输出: 3</span><br><span class="line">解释: 每座岛屿只能由水平和/或竖直方向上相邻的陆地连接而成。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>遍历二维数组，遍历时只查找===’1‘的情况，设立大陆数量flag初始化为1</li><li>找到一块岛屿（===’1‘），此时将flag+1，并将该岛屿标记为flag（2）</li><li>深度遍历与该岛屿连接起来的所有岛屿（连起来的其他’1‘）</li><li>将其深度遍历到的岛屿标记为flag</li><li>深度遍历完成后，继续二维数组的遍历，如果在深度标记后，又找到一个’1‘，那这肯定是第二块大陆的一部分了，重复2-4的步骤。</li><li>返回flag-1就是大陆的数量。</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = [<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">let</span> y = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> mark = <span class="function"><span class="keyword">function</span>(<span class="params">i,j,flag,grid</span>)</span>&#123;</span><br><span class="line">    grid[i][j] = flag;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key = <span class="number">0</span>; key &lt; <span class="number">4</span>; key++) &#123;</span><br><span class="line">         (grid[i + x[key]][j + y[key]] === <span class="string">'1'</span>) &amp;&amp; (mark(i + x[key],j+y[key],flag,grid));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> numIslands = <span class="function"><span class="keyword">function</span>(<span class="params">grid</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!grid.length)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这一块操作是在二维数组外层包裹了一层’0‘，也就是一层海洋，方便处理边界问题。start</span></span><br><span class="line">    grid.unshift(<span class="keyword">new</span> <span class="built_in">Array</span>(grid[<span class="number">0</span>].length).fill(<span class="string">'0'</span>));</span><br><span class="line">    grid.push(<span class="keyword">new</span> <span class="built_in">Array</span>(grid[<span class="number">0</span>].length).fill(<span class="string">'0'</span>));</span><br><span class="line">    grid.map(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">        item.unshift(<span class="string">'0'</span>)</span><br><span class="line">        item.push(<span class="string">'0'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//这一块操作是在二维数组外层包裹了一层’0‘，也就是一层海洋，方便处理边界问题。end</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; grid.length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; grid[i].length<span class="number">-1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][j] === <span class="string">'1'</span>) &#123;</span><br><span class="line">                flag++;</span><br><span class="line">                mark(i,j,flag,grid);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (flag - <span class="number">1</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_11. 盛最多水的容器 （暴力遍历=&gt;双指针）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_11.%20%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_11.%20%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener">题目描述</a></h3><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>说明：你不能倾斜容器，且 n 的值至少为 2。</p><a id="more"></a><h3 id="解题思路-一暴力法"><a href="#解题思路-一暴力法" class="headerlink" title="解题思路 一暴力法"></a>解题思路 一暴力法</h3><p>办法一很简单，双层循环计算出所有可能的结果，选出最大的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> maxArea = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> area = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; height.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = i; j &lt; height.length; j++) &#123;</span><br><span class="line">            <span class="keyword">let</span> m2 = <span class="built_in">Math</span>.min(height[i],height[j]) * (j-i);</span><br><span class="line">            <span class="keyword">if</span> (m2 &gt; area) &#123;</span><br><span class="line">                area = m2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> area;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>一点难度都没有。</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>接下来我们优化一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getArea = <span class="function"><span class="keyword">function</span>(<span class="params">height, i, j</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.min(height[i],height[j]) * (j-i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> maxArea = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> end = height.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> area = getArea(height, start, end );</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; height.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = height.length - <span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[j] &lt; height[end]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (area &lt; getArea(height, i, j)) &#123;</span><br><span class="line">                area = getArea(height,i, j);</span><br><span class="line">                start = i;</span><br><span class="line">                end = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> area;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>把计算面积提出到getArea中了</li><li>标记了start，end。并利用其进行剪枝（优化去掉不必要的for循环），因为我们很容易看出来，比end（距离start最远）位更短的木板没有必要再进行计算了。</li></ol><h3 id="解题思路-二-双指针"><a href="#解题思路-二-双指针" class="headerlink" title="解题思路 二 双指针"></a>解题思路 二 双指针</h3><p>其实这道题的思路是这样：<br>计算start，end之间的距离（宽），和Math.min(start，end)(高)的面积。<br>怎么计算最大面积呢？目标是找最宽和最高。<br>即在start，end距离最远的情况下，找两边最高的木板。</p><p>所以，我们通过让start和end在最远的距离处，开始慢慢靠近，靠近的规则是：</p><ol><li>抛弃最短的，即若start比end处的木板短，start向右移一位+1，（反之end处短，则end - 1）</li><li>这样可以使两边都保证是最长的木板之间的面积</li><li>同样我们可以加入上面的优化，移位后，比原本位置短的，直接过滤掉。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getArea = <span class="function"><span class="keyword">function</span>(<span class="params">height, i, j</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.min(height[i],height[j]) * (j-i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> maxArea = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> end = height.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> area = getArea(height, start, end );</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>,j = end; i &lt; j;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[i] &gt; height[j]) &#123;</span><br><span class="line">                j--;</span><br><span class="line">                <span class="keyword">if</span> (height[j] &lt; height[end]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i++</span><br><span class="line">                <span class="keyword">if</span> (height[i] &lt; height[start]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> m2 = getArea(height, i, j);</span><br><span class="line">            <span class="keyword">if</span> (area &lt; m2) &#123;</span><br><span class="line">                area = m2;</span><br><span class="line">                start = i;</span><br><span class="line">                end = j;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> area;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：块级作用域内的函数声明到底是什么？？</title>
      <link href="/JavaScript/JavaScript%EF%BC%9A%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%86%85%E7%9A%84%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%EF%BC%9F/"/>
      <url>/JavaScript/JavaScript%EF%BC%9A%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%86%85%E7%9A%84%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>在一篇文章里看到这样一个问题。<a href="https://mp.weixin.qq.com/s/MlKRNfK3blGJA7bfXzdsNg" target="_blank" rel="noopener">文章地址</a></p><blockquote><p>文章中会扩展一些其他的内容， 大家可以看过之后再来看我这篇个人的总结</p></blockquote><p>函数声明写在块级作用域中（ES6）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    a = <span class="number">21</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"里面"</span>,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"外部"</span>,a);</span><br></pre></td></tr></table></figure></p><p>请问输出是什么？ 答案是：<strong>里面21 外面1</strong>。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovLzViMDk4OGU1OTUyMjUuY2RuLnNvaHVjcy5jb20vaW1hZ2VzLzIwMjAwMzIxL2Q3MTRmMzU1YjUwYTRlYjU4YWIyZTI3MTliYTNkMjUzLmpwZWc?x-oss-process=image/format,png#pic_center" alt="小朋友，ni&#39;you"><br>正如我一样，看到答案的我蒙蔽了，然后就继续阅读完全文，感觉还是有点不太明白。最后经过我查询资料我得到了答案。</p><h3 id="转换结果"><a href="#转换结果" class="headerlink" title="转换结果"></a>转换结果</h3><p>代码转化如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">       <span class="keyword">let</span> a = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">       &#125;</span><br><span class="line">       a = <span class="number">1</span>; </span><br><span class="line">       <span class="built_in">window</span>.a = a;  <span class="comment">//此处为原函数声明的位置</span></span><br><span class="line">       a = <span class="number">21</span>;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"里面"</span>,a);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"外部"</span>,a);</span><br></pre></td></tr></table></figure><p>其实，函数声明放在块级作用域内做了以下几件事。<br>so， 我想看到了转换后的代码，估计大家就豁然开朗了。</p><ol><li><p>{}内部修改的是let定义的块级a，跟外部没关系。</p></li><li><p>所以 a = 1 的时候，外部其实还是为0。</p></li><li><p>外部的全局a原本为0， 被window.a = a 同步为了1.</p></li><li><p>a =21 块级a变成了21，全局a无变化还是1.</p></li></ol><p><strong>那么为啥会这么转换呢????</strong>  </p><h3 id="实质"><a href="#实质" class="headerlink" title="实质"></a>实质</h3><ol><li><p>函数声明会被提升到<strong>块级作用域</strong>顶部。</p></li><li><p>使用了类似let的方式定义了一个<strong>块级作用域</strong>的函数<strong>同名变量</strong>，并赋值。（个人总结）</p></li><li><p>函数声明的<strong>变量被声明</strong>到了<strong>全局作用域</strong>（或者函数作用域）顶部。</p></li><li><p>在函数<strong>声明的位置</strong>，会将目前<strong>块级作用域内的变量的值</strong>，<strong>同步</strong>到全局作用域（函数作用域）下。</p></li></ol><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>如下标记 1234 ，我想这样是最直观的。</p><p>（window 代表的外层的作用域上下文，意思是if块所在的作用域，因为此处为全局，所以为window）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> a; <span class="comment">// 3</span></span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">       <span class="keyword">let</span> a = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">       <span class="comment">// 1，2</span></span><br><span class="line">       &#125;</span><br><span class="line">       a = <span class="number">1</span>; </span><br><span class="line">       <span class="built_in">window</span>.a = a;  <span class="comment">// 4：此处为原函数声明的位置</span></span><br><span class="line">       a = <span class="number">21</span>;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"里面"</span>,a);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"外部"</span>,a);</span><br></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"> </span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换为es5为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以经过我的查找，所有人都不推荐直接在块级作用域内进行函数声明，如果非要，就请使用es5的函数表达式写法。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 每日一题 旋转矩阵 （逆列 =&gt; 行）</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode.%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode.%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一幅由 N × N 矩阵表示的图像，其中每个像素的大小为 4 字节。请你设计一种算法，将图像旋转 90 度。</p><blockquote><p>不占用额外内存空间能否做到？</p></blockquote><p>示例 1:<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">给定 matrix = </span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [4,5,6],</span><br><span class="line">  [7,8,9]</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><p>原地旋转输入矩阵，使其变为:<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [7,4,1],</span><br><span class="line">  [8,5,2],</span><br><span class="line">  [9,6,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>目标阵列的每一<strong>横列</strong>为对应原始阵列每一<strong>竖列</strong>的<strong>倒序</strong>。</p><h3 id="题解一："><a href="#题解一：" class="headerlink" title="题解一："></a>题解一：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @param &#123;number[][]&#125; matrix</span><br><span class="line"> * @return &#123;void&#125; Do not return anything, modify matrix in-place instead.</span><br><span class="line"> */</span><br><span class="line">var rotate = function(matrix) &#123;</span><br><span class="line">    let N = matrix.length;</span><br><span class="line">   let newM = []</span><br><span class="line">    for (let i = 0; i &lt; N; i++) &#123;</span><br><span class="line">        newM[i] = Array.from(matrix[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    for (let i = 0; i &lt; N; i++) &#123;</span><br><span class="line">        for(let j = 0; j &lt; N; j++) &#123;</span><br><span class="line">            matrix[i][j] = newM [N - j - 1][i]; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题解二：不创建新的数组空间"><a href="#题解二：不创建新的数组空间" class="headerlink" title="题解二：不创建新的数组空间"></a>题解二：不创建新的数组空间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @param &#123;number[][]&#125; matrix</span><br><span class="line"> * @return &#123;void&#125; Do not return anything, modify matrix in-place instead.</span><br><span class="line"> */</span><br><span class="line">var rotate = function(matrix) &#123;</span><br><span class="line">    let N = matrix.length;</span><br><span class="line">    for (let i = 0; i &lt; N; i++) &#123;</span><br><span class="line">        for(let j = 0; j &lt; N; j++) &#123;</span><br><span class="line">            matrix[i][j + N] = matrix[N - j - 1][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (let i = 0; i &lt; N; i++) &#123;</span><br><span class="line">        matrix[i] = matrix[i].slice(N, 2*N);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>事实上这种方法是取巧了的，数组扩容了。数组检测到需要扩容时，就会开辟新的内存空间，最终大小为1.5倍+16。当数组内存空间&gt;=length*2+16的时候会进行缩容。如果数组长度比之前缩短了1，则只回收多余容量的一半，若长度比之前缩小的更多，则全部回收多余容量。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_289.生命游戏：巧妙处理边界问题。</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_289.%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_289.%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode-cn.com/problems/game-of-life/" target="_blank" rel="noopener">题目描述</a></h3><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>其实这道题，大家看到第一眼应该就知道很简单了。</p><p>同时更新的意思就是让我们拷贝一份数据备用嘛，</p><p>根据原版备份数据去更新新的细胞阵列。</p><ol><li>boardBak = copy(board)</li></ol><p>然后看看核心思路</p><ol><li>统计8个位置的1的个数</li><li>==3 那肯定要活着， ==2 自生自灭，其他情况都嗝屁</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">boardBak[y-1][x-1] + </span><br><span class="line">boardBak[y+1][x+1] + </span><br><span class="line">boardBak[y-1][x] + </span><br><span class="line">boardBak[y][x-1] + </span><br><span class="line">boardBak[y-1][x+1] + </span><br><span class="line">boardBak[y+1][x-1] + </span><br><span class="line">boardBak[y][x+1] + </span><br><span class="line">boardBak[y+1][x];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if (sum === 3) &#123;</span><br><span class="line">    board[y][x] = 1;</span><br><span class="line">&#125; else if(sum !== 2) &#123;</span><br><span class="line">    board[y][x] = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>so 核心的部分就是这些，一点难度都没有。</p><p>然后假定m为行数，n为列数，将下面的循环包裹在核心代码外，就ok了</p><p>for (y=0, y &lt; m)<br>  for (x=0, x &lt; n)</p><p>是不是很简单！！</p><p>但是可恶的是，报错了。。因为边边上的细胞不够8个。。</p><p>那怎么办呢。。</p><p>我是这个样子处理的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [0,1,0],</span><br><span class="line">  [0,0,1],</span><br><span class="line">  [1,1,1],</span><br><span class="line">  [0,0,0]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">====&gt;</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  [0,0,1,0,0],</span><br><span class="line">  [0,0,1,0,0],</span><br><span class="line">  [0,0,0,1,0],</span><br><span class="line">  [0,1,1,1,0],</span><br><span class="line">  [0,0,0,0,0],</span><br><span class="line">  [0,0,0,0,0],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>看粗来了吗</p><p>我用了一圈死细胞（0）把我们的目标组织包裹起来了，这样不管是边界细胞还是里面的细胞，大家都可以统一的按照8个周边处理咯</p><p>当然我们不要直接改造目标细胞，而是改造备份细胞。</p><p>改造完之后，只需要改变一下循环条件，目的是为了从(1,1)坐标的细胞开始遍历到(m-1,n-1)，不去遍历我们包裹的边界。</p><p>for (y=1, y &lt; m-1)<br>  for (x=1, x &lt; n-1)</p><pre><code>同样的现在我们的原阵列跟备份阵列的坐标存在不同咯。备份阵列因为多了一层，所以，需要-1之后才是备份细胞在原阵列中的位置。if (sum === 3) {       board[y-1][x-1] = 1;   } else if(sum !== 2) {       board[y-1][x-1] = 0;   }</code></pre><p>到此就完事儿了。</p><p>下面是具体实现。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">board</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gameOfLife = <span class="function"><span class="keyword">function</span>(<span class="params">board</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> boardBak = [];</span><br><span class="line">    <span class="keyword">let</span> n = board[<span class="number">0</span>].length;</span><br><span class="line">     board.map(<span class="function">(<span class="params">row</span>)=&gt;</span>&#123;</span><br><span class="line">        boardBak.push([<span class="number">0</span>, ...row, <span class="number">0</span>]);</span><br><span class="line">    &#125;)</span><br><span class="line">    boardBak = [<span class="keyword">new</span> <span class="built_in">Array</span>(n + <span class="number">2</span>).fill(<span class="number">0</span>), ...boardBak, <span class="keyword">new</span> <span class="built_in">Array</span>(n + <span class="number">2</span>).fill(<span class="number">0</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> m = boardBak.length;</span><br><span class="line">    n = boardBak[<span class="number">0</span>].length;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> y = <span class="number">1</span>; y &lt; m - <span class="number">1</span>; y++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">1</span>; x &lt; n - <span class="number">1</span>; x++) &#123;</span><br><span class="line">            <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">            sum = boardBak[y<span class="number">-1</span>][x<span class="number">-1</span>] + </span><br><span class="line">            boardBak[y+<span class="number">1</span>][x+<span class="number">1</span>] + </span><br><span class="line">            boardBak[y<span class="number">-1</span>][x] + </span><br><span class="line">            boardBak[y][x<span class="number">-1</span>] + </span><br><span class="line">            boardBak[y<span class="number">-1</span>][x+<span class="number">1</span>] + </span><br><span class="line">            boardBak[y+<span class="number">1</span>][x<span class="number">-1</span>] + </span><br><span class="line">            boardBak[y][x+<span class="number">1</span>] + </span><br><span class="line">            boardBak[y+<span class="number">1</span>][x];</span><br><span class="line">            <span class="keyword">if</span> (sum === <span class="number">3</span>) &#123;</span><br><span class="line">                board[y<span class="number">-1</span>][x<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sum !== <span class="number">2</span>) &#123;</span><br><span class="line">                board[y<span class="number">-1</span>][x<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> board;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_226. 翻转二叉树</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_226.%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_226.%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>翻转一棵二叉树。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  2     7</span><br><span class="line"> / \   / \</span><br><span class="line">1   3 6   9</span><br><span class="line"></span><br><span class="line">输出: </span><br><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  7     2</span><br><span class="line"> / \   / \</span><br><span class="line">9   6 3   1</span><br></pre></td></tr></table></figure></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>递归，递归判断条件1. 左右节点是否为null，不为null，则翻转其左右节点</code></pre><a id="more"></a><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * function TreeNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.left = this.right = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;TreeNode&#125; root</span><br><span class="line"> * @return &#123;TreeNode&#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function ex(treeNode) &#123;</span><br><span class="line">    if (treeNode == null) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    let item = treeNode.left;</span><br><span class="line">    treeNode.left = treeNode.right;</span><br><span class="line">    treeNode.right = item;</span><br><span class="line">    treeNode.left &amp;&amp; ex(treeNode.left)</span><br><span class="line">    treeNode.right &amp;&amp; ex(treeNode.right)</span><br><span class="line">&#125;</span><br><span class="line">var invertTree = function(root) &#123;</span><br><span class="line">    ex(root)</span><br><span class="line">    return root</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：定时器中的异步请求堆积如何解决？</title>
      <link href="/JavaScript/JavaScript%EF%BC%9A%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E5%A0%86%E7%A7%AF%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%EF%BC%9F/"/>
      <url>/JavaScript/JavaScript%EF%BC%9A%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E5%A0%86%E7%A7%AF%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>有时候我们需要用setinterval来执行一些异步操作来刷新页面的信息。但是如果一旦异步函数的请求时间过长，就会造成事件操作堆积。</p><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">this.interval = setInterval(async () =# &#123;</span><br><span class="line">      const resp = await ajax();</span><br><span class="line">      this.rows = resp.rows;</span><br><span class="line">    &#125;, 5000);</span><br></pre></td></tr></table></figure><p>假设ajax()请求的时间因为网络或者其他原因超过了5秒，定时器并不会等待其返回结果，而是依旧会进行下一次循环，这样的话，其实定时器和异步请求之间的时序并没有联系顺序也毫无规律，那么我们如何实现等本次ajax请求完毕之后等待一段时间之后再进行下一次循环呢？</p><a id="more"></a><h3 id="1-简单代码实现"><a href="#1-简单代码实现" class="headerlink" title="1.简单代码实现"></a>1.简单代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">function setIntervalWaitable(callback,ms)&#123;</span><br><span class="line">    this._self = &#123;</span><br><span class="line">        fn: callback,</span><br><span class="line">        timeout: ms,</span><br><span class="line">        timeoutHandler: null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">setIntervalWaitable.prototype.request = function() &#123;</span><br><span class="line">    if (this._self.timeoutHandler) &#123;</span><br><span class="line">        clearTimeout(this._self.timeoutHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this._self.timeoutHandler = setTimeout(() =&gt; &#123;</span><br><span class="line">        this._self.fn();</span><br><span class="line">    &#125;, this._self.timeout);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 模拟执行 --&gt;</span><br><span class="line">&lt;!-- let ms = 2000;</span><br><span class="line">let asyncMs = 1000;</span><br><span class="line">var set = new setIntervalWaitable(()=&gt;&#123;</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">        set.request()</span><br><span class="line">    &#125;, asyncMs)</span><br><span class="line">&#125;, ms)</span><br><span class="line">set.request() --&gt;</span><br></pre></td></tr></table></figure><p>达到如下效果的异步刷新时序图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rfn########----------------rfn##----------------rfn########################----------------rfn####</span><br><span class="line">-----------5000ms##########-----5000ms##########---------------------------5000ms##########</span><br></pre></td></tr></table></figure><h3 id="2-改造："><a href="#2-改造：" class="headerlink" title="2. 改造："></a>2. 改造：</h3><ul><li>等待传入的ms时间，如果此时callback已经完成，重新执行callback</li><li>否则，等待callback完成，再重新执行callback</li></ul><p>例如500ms周期时序图:<br>rpc########—-rpc############rpc########################rpc####——–rpc######——rpc####<br>500ms##########500ms##########500ms##########————500ms##########500ms##########</p><h4 id="实现思路："><a href="#实现思路：" class="headerlink" title="实现思路："></a>实现思路：</h4><p>在第一题的基础上，在异步函数调用settimeout之前判断异步函数用时和settimeout的时间大小，计算差值，以差值作为下次定时器执行的时间。 如果异步函数用时大于定时器设定时间，直接执行下次异步函数即可</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function setIntervalWaitable2(callback,ms)&#123;</span><br><span class="line">    this._self = &#123;</span><br><span class="line">        fn: callback,</span><br><span class="line">        timeout: ms,</span><br><span class="line">        timeoutHandler: null,</span><br><span class="line">        start: null,</span><br><span class="line">        duration: null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">setIntervalWaitable2.prototype.request = function() &#123;</span><br><span class="line">    let that = this;</span><br><span class="line">    let timeout = 0; //首次直接执行事件</span><br><span class="line"></span><br><span class="line">    if (that._self.timeoutHandler) &#123;</span><br><span class="line">        clearTimeout(that._self.timeoutHandler);</span><br><span class="line">    &#125;</span><br><span class="line">    // 判断</span><br><span class="line">    if (that._self.start) &#123; //计算更新timeout值</span><br><span class="line">        that._self.duration = new Date().getTime() - that._self.start;</span><br><span class="line">        if (that._self.duration &lt; that._self.timeout) &#123;</span><br><span class="line">            timeout = that._self.timeout - that._self.duration;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    that._self.timeoutHandler = setTimeout(() =&gt; &#123;</span><br><span class="line">        that._self.start = new Date().getTime();</span><br><span class="line">        that._self.fn();</span><br><span class="line">    &#125;, timeout);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 模拟执行</span><br><span class="line">let ms = 2000;</span><br><span class="line">let asyncMs = 1000; //假设异步操作时间</span><br><span class="line"></span><br><span class="line">var set = new setIntervalWaitable2(()=&gt;&#123;</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">        console.log(&apos;函数执行&apos; + new Date().getSeconds())</span><br><span class="line">        set.request()</span><br><span class="line">    &#125;, asyncMs)</span><br><span class="line">&#125;, ms)</span><br><span class="line">set.request()  --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 实际执行 --&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 实际执行 --&gt;</span><br><span class="line">created() &#123;</span><br><span class="line">      this.interval = new setIntervalWaitable2(()=&gt;&#123;</span><br><span class="line">          const resp = await getNewStatistics();</span><br><span class="line">          this.rows = resp.rows;</span><br><span class="line">          this.interval.request()</span><br><span class="line">      &#125;, 500)</span><br><span class="line">      this.interval.request() //执行</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="3-实现暂停和重启"><a href="#3-实现暂停和重启" class="headerlink" title="3. 实现暂停和重启"></a>3. 实现暂停和重启</h3><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路:"></a>实现思路:</h4><p>增加flag判断即可。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">  function setIntervalWaitable3(callback,ms)&#123;</span><br><span class="line">      this._self = &#123;</span><br><span class="line">          fn: callback,</span><br><span class="line">          timeout: ms,</span><br><span class="line">          timeoutHandler: null,</span><br><span class="line">          timeoutEnabled: true,</span><br><span class="line">          start: null,</span><br><span class="line">          duration: null</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  setIntervalWaitable3.prototype.request = function() &#123;</span><br><span class="line">      let that = this;</span><br><span class="line">      let timeout = 0;</span><br><span class="line"></span><br><span class="line">      if (!that._self.timeoutEnabled) &#123;</span><br><span class="line">          return;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if (that._self.timeoutHandler) &#123;</span><br><span class="line">          clearTimeout(that._self.timeoutHandler);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      that._self.duration = new Date().getTime() - that._self.start;</span><br><span class="line"></span><br><span class="line">      if (that._self.duration &lt; that._self.timeout) &#123;</span><br><span class="line">          timeout = that._self.timeout - that._self.duration;</span><br><span class="line">      &#125;</span><br><span class="line">      that._self.timeoutHandler = setTimeout(() =&gt; &#123;</span><br><span class="line">          that._self.start = new Date().getTime();</span><br><span class="line">          that._self.fn();</span><br><span class="line">      &#125;, timeout);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setIntervalWaitable3.prototype.stop = function() &#123;</span><br><span class="line">      this._self.timeoutEnabled = false;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  setIntervalWaitable3.prototype.restart = function() &#123;</span><br><span class="line">      this._self.timeoutEnabled = true;</span><br><span class="line">this.request()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 模拟执行 --&gt;</span><br><span class="line">  &lt;!-- let ms = 2000;</span><br><span class="line">  let asyncMs = 1000; //假设异步操作时间</span><br><span class="line"></span><br><span class="line">  var set = new setIntervalWaitable3(()=&gt;&#123;</span><br><span class="line">      setTimeout(function()&#123;</span><br><span class="line">          console.log(&apos;函数执行&apos; + new Date().getSeconds())</span><br><span class="line">          set.request()</span><br><span class="line">      &#125;, asyncMs)</span><br><span class="line">  &#125;, ms)</span><br><span class="line">  set.request() //执行 --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;!-- 实际执行 --&gt;</span><br><span class="line"></span><br><span class="line">  created() &#123;</span><br><span class="line">      this.interval = new setIntervalWaitable3(()=&gt;&#123;</span><br><span class="line">          const resp = await getNewStatistics();</span><br><span class="line">          this.rows = resp.rows;</span><br><span class="line">          this.interval.request()</span><br><span class="line">      &#125;, 500)</span><br><span class="line">      this.interval.request() //执行</span><br><span class="line">  &#125;</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">      this.interval.stop();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如上实现过程，思路很简单，就是在异步请求结束后手动调起下次循环，这样才能保证时序性。（当然我现在也只能想到这种办法，无论怎么考虑，第二次循环始终需要异步请求结尾处调用。）</p><p>目前我已经将该功能进行了封装，对其功能进行了一部分添加和完善。包括两种循环模式。</p><blockquote><p>详情  <a href="&quot;https://github.com/lunhui1994/async-loop-timer&quot;">Github 项目</a></p></blockquote><blockquote><p>npm 使用</p></blockquote><blockquote><p>npm i async-loop-timer</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue性能优化方案</title>
      <link href="/Vue/Vue%EF%BC%9A%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/"/>
      <url>/Vue/Vue%EF%BC%9A%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p>总结一下使用Vue涉及到的性能优化方法，从我实践和查阅资源总结出来的集合。</p></blockquote><p>目录：</p><ol><li><strong>v-if 和 v-show</strong><ol><li><strong>v-if</strong></li><li><strong>v-show</strong></li></ol></li><li><strong>computed 和 watch</strong></li><li><strong>v-for加key，避免使用v-if</strong></li><li><strong>keepalive</strong></li><li><strong>Object.freeze长列表优化</strong></li></ol><a id="more"></a><h3 id="一、-v-if-和-v-show"><a href="#一、-v-if-和-v-show" class="headerlink" title="一、 v-if 和 v-show"></a>一、 v-if 和 v-show</h3><ul><li>一般使用过vue或者angular及其相同框架的人都会知道他们的区别。</li></ul><h5 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h5><p>它是真正的条件判断语句，会根据条件对条件内的组件进行重建和销毁。<br>它是惰性的，在第一次判断条件为true时，才会去创建相应的组件。即初始化为false时，该条件内组件不会加载。</p><h5 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h5><p>它仅仅是通过控制css的display属性来控制组件的显示和隐藏。<br>所以，无论是否为false，该组件都会在页面构建时加载。</p><h4 id="优化："><a href="#优化：" class="headerlink" title="优化："></a>优化：</h4><p>我们可以在需要<em>频繁切换</em>显示隐藏的组件上使用v-show，在只需要<em>一次或少数判断</em>的时候使用v-if。</p><h3 id="二、-computed-和-watch"><a href="#二、-computed-和-watch" class="headerlink" title="二、 computed 和 watch"></a>二、 computed 和 watch</h3><ul><li>computed 和 watch 都可以对个变量进行监听依赖，但是用法上还是有很大区别的。</li></ul><p>如 name = ‘xiaoming’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123; name.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>如上我们想把name反转，如此写在html中略显混乱，并对阅读不友好。</p><h5 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h5><p>它表示计算属性，目的是用来方便控制需要计算之后再进行展示的数据。<br>computed属性会被缓存，只有computed所依赖的属性发生变化之后，才会触发computed重新计算。</p><p>使用computed</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123; nameReverse &#125;&#125;&lt;/div&gt;</span><br><span class="line">// ...</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name: &apos;xiaoming&apos;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        nameReverse: &#123;</span><br><span class="line">            get: function () &#123;</span><br><span class="line">                    return this.name.split(&apos;&apos;).reverse().join(&apos;&apos;);</span><br><span class="line">                &#125;,</span><br><span class="line">            set: function (newValue) &#123;</span><br><span class="line">                    //同时computed也有set函数，可以在计算变量赋值时触发。</span><br><span class="line">                    //this.name = ...</span><br><span class="line">                &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><h5 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h5><p>watch事实上就是一个监听函数，通过监听该变量来执行一些更加复杂的操作。它是比computed更耗费性能的。</p><p>注意watch在进入页面之后是不会立即触发的。</p><p>使用watch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123; nameReverse &#125;&#125;&lt;/div&gt;</span><br><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        name: &apos;xiaoming&apos;,</span><br><span class="line">        nameReverse: &apos;&apos; //定义</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br><span class="line">method: &#123;</span><br><span class="line">    nameHandler: function (newQuestion, oldQuestion) &#123;</span><br><span class="line">            this.nameReverse = newQuestion.split(&apos;&apos;).reverse().join(&apos;&apos;);</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;</span><br><span class="line">watch: &#123;</span><br><span class="line">    // &apos;obj.name&apos;: &apos;xxxhandler&apos; 也可以监听深层属性  </span><br><span class="line">    name:&#123; </span><br><span class="line">        handler: &quot;nameHandler&quot;,</span><br><span class="line">        immediate: true //该属性设置之后watch会以当前值立即触发回调函数。</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优化：-1"><a href="#优化：-1" class="headerlink" title="优化："></a>优化：</h4><p>所以我们可以根据computed和watch的不同用法，来区分使用场景。<br>当我们仅仅需要获取一个通过一系列操作后的计算结果，我们应该使用computed。<br>当我们需要在属性变化时进行更加复杂的操作，比如异步操作，设置中间状态进行节流等，这些都需要使用watch实现。</p><h3 id="三、-v-for-和-key-避免使用v-if"><a href="#三、-v-for-和-key-避免使用v-if" class="headerlink" title="三、 v-for 和 key 避免使用v-if"></a>三、 v-for 和 key 避免使用v-if</h3><ul><li>我们都知道使用v-for的时候要在每个节点加上唯一的key值，否则即采用就地复用的原则，同时避免使用v-if使用computed来代替。</li></ul><h5 id="不加key"><a href="#不加key" class="headerlink" title="不加key"></a>不加key</h5><p>官方文档对key的解释很清楚，key的用途主要用于虚拟DOM对比时对vnode进行辨别。</p><p>那么不加key的就地复用是什么意思呢?<br>即当节点被删除或者位置被移动，节点不会被删除或者替换。<br>虚拟DOM将会遍历vnode，直接更改其内容。（该操作是高效的）<br>但是其只适用于渲染列表Dom结构极其简单的情况。</p><h5 id="加key"><a href="#加key" class="headerlink" title="加key"></a>加key</h5><p>加上key之后，对vnode增加了独特的标记，虚拟DOM的对比将不会再遍历vnodes，而是直接采用key的映射进行对比。<br>将会基于key冲i性能排序元素顺序，删除key不存在的节点，替换和删除节点。<br>它也能触发完整的生命周期函数。</p><h5 id="v-if-和-computed"><a href="#v-if-和-computed" class="headerlink" title="v-if 和 computed"></a>v-if 和 computed</h5><p>如果我们的列表只需要渲染其中的一部分，我们可以使用computed，即通过computed对最终显示数据进行过滤，而非在html中进行if判断过滤。</p><h4 id="优化：-2"><a href="#优化：-2" class="headerlink" title="优化："></a>优化：</h4><p>官方建议：建议尽可能在使用 v-for 时提供 key attribute，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升。<br>注意： key值需使用使用string和数值型基础类型，不要使用对象数组等复杂类型。同时key值需要独特性。可以使用列如id属性作为key。</p><h3 id="四、-keepalive"><a href="#四、-keepalive" class="headerlink" title="四、 keepalive"></a>四、 keepalive</h3><p>使用keep-alive包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们；<br>keep-alive是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中；</p><h4 id="使用keepalive"><a href="#使用keepalive" class="headerlink" title="使用keepalive"></a>使用keepalive</h4><p>当组件在 <keep-alive> 内被切换，它的 activated 和 deactivated 这两个生命周期钩子函数将会被对应执行。<br>可以保存组件的状态，比如一个下拉框，选择了第二项，切换其他组件再返回时依旧是第二个组件。<br>防止组件重复的销毁和重建。</keep-alive></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- include表示匹配要缓存的组件名称，exclude表示不缓存的组件名称，exclude优先级更高。 max表示最大缓存数 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;keep-alive :include=&quot;&quot; :exclude=&quot;&quot; :max=&quot;&quot;&gt;</span><br><span class="line">  &lt;comp-a v-if=&quot;a &gt; 1&quot;&gt;&lt;/comp-a&gt;</span><br><span class="line">  &lt;comp-b v-else&gt;&lt;/comp-b&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><h4 id="keepalive-多了解一点"><a href="#keepalive-多了解一点" class="headerlink" title="keepalive 多了解一点"></a>keepalive 多了解一点</h4><p>keepalive是vue的一个组件，它自己的生命周期有created和destoryed,。</p><p><strong>created</strong>用来创建一个cache用来保存需要缓存的Vnode节点，和一个keys数组用来保存cache中对应的key值。<br><strong>destoryed</strong>用来遍历缓存节点并逐个调用$destory()进行销毁。</p><p><strong>rander</strong>首先会获取第一个子组件，获取到名称，然后进行include和exclude过滤，判断是否匹配缓存。<br>如果不符合缓存条件，直接返回vnode，如果符合，则以名称为key值去keys中查找。<br>若命中，则返回cache中的缓存，并将cache中key位置的缓存删除，并添加到cache的末尾。<br>若没命中，则进行缓存并返回vnode，并将其添加至cache尾部。</p><p>返回前会将它们的keepAlive属性设置为true用于后面调用activated与deactivated函数。 </p><p><strong>watch</strong>同时keepalive会监听include和exclude的变化，不存在的key将进行销毁并以出cache列表。</p><p>keepalive 组件本身并不会生成节点，在keep-alive中，设置了 abstract: true ，该属性表示此组件为抽象组件意思就是不会生成实际节点。</p><p><a href="&quot;https://www.cnblogs.com/wangjiachen666/p/11497200.html&quot;">相关荐文</a></p><h4 id="优化：-3"><a href="#优化：-3" class="headerlink" title="优化："></a>优化：</h4><p>如果你的组件需要保持切换前的状态就需要加上keepalive，或者对于频繁切换的组件也需要加上，以保证它避免被销毁，保存渲染状态，提高性能。</p><h3 id="五、-Object-freeze-冻结对象，长列表优化"><a href="#五、-Object-freeze-冻结对象，长列表优化" class="headerlink" title="五、 Object.freeze 冻结对象，长列表优化"></a>五、 Object.freeze 冻结对象，长列表优化</h3><p>有时候我们会有一些比较长的列表要进行展示，而且这些数据展示完之后并不会发生变化。<br>但是vue对数据都是使用了Object.defineProperty进行了数据劫持，所以初始化时就会造成大量的无用劫持。<br>这时候我们就可以使用Object.freeze进行冻结，冻结之后数据就不会再被修改了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.list = Object.freeze(list);</span><br></pre></td></tr></table></figure><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>对一些不需要双向绑定的列表进行Object.freeze()进行冻结，提高性能。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_101. 对称二叉树</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_101.%20%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_101.%20%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>给定一个二叉树，检查它是否是镜像对称的。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,2,3,4,4,3]  对称</span><br><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line"> / \ / \</span><br><span class="line">3  4 4  3</span><br><span class="line"></span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,2,null,3,null,3] 非对称</span><br><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line">   \   \</span><br><span class="line">   3    3</span><br><span class="line"></span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure></p><p>说明&amp;&amp;进阶:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果你可以运用递归和迭代两种方法解决这个问题，会很加分。</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>递归，递归判断条件1. 左右对称的节点是否相同。2. 递归判断直至叶节点。</code></pre><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * function TreeNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.left = this.right = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;TreeNode&#125; root</span><br><span class="line"> * @return &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">var isSymmetric = function(root) &#123;</span><br><span class="line">    if (root === null) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return fun(root.left, root.right);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var fun = function(left, right) &#123;</span><br><span class="line">    if (left === null &amp;&amp; right === null) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (left === null || right === null) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return (left.val === right.val) &amp;&amp; fun(left.left, right.right) &amp;&amp; fun(left.right, right.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_112. 路径总和</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_112.%20%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_112.%20%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">给定如下二叉树，以及目标和 sum = 22</span><br><span class="line">              5</span><br><span class="line">             / \</span><br><span class="line">            4   8</span><br><span class="line">           /   / \</span><br><span class="line">          11  13  4</span><br><span class="line">         /  \      \</span><br><span class="line">        7    2      1</span><br><span class="line"></span><br><span class="line">返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5-&gt;4-&gt;11-&gt;2。</span><br></pre></td></tr></table></figure></p><p>说明&amp;&amp;进阶:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">说明: 叶子节点是指没有子节点的节点。</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>递归，递归判断条件1. 左右对称的节点是否相同。2. 递归判断直至叶节点。</code></pre><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * function TreeNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.left = this.right = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;TreeNode&#125; root</span><br><span class="line"> * @param &#123;number&#125; sum</span><br><span class="line"> * @return &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">var hasPathSum = function(root, sum) &#123;</span><br><span class="line">    if (root === null) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return fun(root, 0, sum);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var fun = function(root, mysum, sum) &#123;</span><br><span class="line">    root.mysum = root.val + mysum;</span><br><span class="line">    if (root.left === null &amp;&amp; root.right === null)&#123;</span><br><span class="line">       return root.mysum === sum;</span><br><span class="line">    &#125;</span><br><span class="line">    return (root.left &amp;&amp; fun(root.left, root.mysum, sum)) || (root.right &amp;&amp; fun(root.right, root.mysum, sum)) || false; </span><br><span class="line">    // 或（||）会取最后一个转义为false的值。 即可能会出现0，null，undefined等结果</span><br><span class="line">    // 为避免不必要的错误，增加 || false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ音乐api(持续更新)</title>
      <link href="/api/QQ%E9%9F%B3%E4%B9%90api(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/"/>
      <url>/api/QQ%E9%9F%B3%E4%B9%90api(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/</url>
      
        <content type="html"><![CDATA[<p>@<a href="文章目录">TOC</a></p><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><p><strong>2020/6/03</strong></p><ol><li>接口已恢复。感谢<a href="https://blog.csdn.net/weixin_44159306" target="_blank" rel="noopener">蒟蒻…</a>的帮助, 才能这么快解决这个问题。有兴趣可以查看他的关于sign获取的<a href="https://blog.csdn.net/weixin_44159306/article/details/106292092" target="_blank" rel="noopener">文章</a></li><li><p>之前分出了ts的分支，主要开始维护ts分支，master可能会更新的晚一点，如果需要自己启服务的话可以下载ts分支，有问题也可以回复，我可以协助一下。</p><p><strong>2020/5/27</strong></p></li><li><p>发现获取vkey的接口现在获取不到了，应该是官方换了请求方式，目前播放地址受到了影响，无法播放，修复时间待定。</p><p><strong>2020/5/7</strong></p></li><li><p>之前要使用api的话只能通过服务端请求，嗯嗯..想了想，现在支持跨域了。还是仅测试使用，服务器太渣渣。。经不起造。</p><p><strong>2020/2/25</strong></p></li><li><p>最近在做新的项目，叫小鱼干APP，可以在百度，vivo，小米，apple store 中下载，暂时没有时间来搞这个音乐api的东西了，不过服务没有停，如果想用来测试或者玩玩的还是可以用的。</p></li></ol><p><strong>2019/12/26</strong> </p><ol><li>获取歌曲播放地址接口 增加 lyric参数代表是否获取歌词。</li><li>增加获取歌词接口</li></ol><p> <strong>2019/12/24</strong> </p><ol><li>所有音乐接口更改，增加一层music/ ，获取地址改为 music/song</li><li>增加福利图片接口</li><li>示例接口更改为https</li></ol><blockquote><p>接口仅供交流学习使用</p></blockquote><p><a href="https://github.com/lunhui1994/node-music-api" target="_blank" rel="noopener">Github 项目地址</a>   </p><p>因为之前使用网络上别人封装的音乐api现在无法使用，或者一些需要付费使用，当然这也无可厚非。</p><p>但对我而言，只需要简单的一些音乐api做一些东西。 感觉给钱有点亏。 就自己搞一个简单的符合我的需求的吧。</p><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><a id="more"></a><ol><li>音乐搜索</li><li>音乐top100列表</li><li>音乐播放地址</li><li>福利图片 (新增 2019/12/24).</li><li>音乐歌词 (新增 2019/12/26).</li></ol><p>很简单的三个基本的功能。</p><p>所有方法都是GET</p><p>本项目所支持的Api</p><h2 id="一、音乐-music"><a href="#一、音乐-music" class="headerlink" title="一、音乐 music"></a>一、音乐 music</h2><h3 id="1、音乐列表"><a href="#1、音乐列表" class="headerlink" title="1、音乐列表"></a>1、音乐列表</h3><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><p><code>GET</code></p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>p</td><td>string</td><td>页码</td></tr><tr><td>n</td><td>string</td><td>数目</td></tr><tr><td>w</td><td>string</td><td>关键词</td></tr></tbody></table><p>返回参数</p><table><thead><tr><th>上级</th><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>—</td><td>curpage</td><td>int</td><td>页码</td></tr><tr><td>—</td><td>curnum</td><td>int</td><td>数目</td></tr><tr><td>—</td><td>list</td><td>array [ object ]</td><td>音乐列表</td></tr><tr><td>list &gt; {}</td><td>songname</td><td>string</td><td>歌曲名</td></tr><tr><td>list &gt; {}</td><td>songname</td><td>string</td><td>歌曲名</td></tr><tr><td>list &gt; {}</td><td>albumname</td><td>string</td><td>专辑名</td></tr><tr><td>list &gt; {}</td><td>songmid</td><td>string</td><td>歌曲id，用来请求播放地址</td></tr><tr><td>list &gt; {}</td><td>albumimg</td><td>string</td><td>封面图</td></tr><tr><td>list &gt; {}</td><td>singer</td><td>object</td><td>歌手信息</td></tr><tr><td>list &gt; {} &gt; singer</td><td>id</td><td>int</td><td>歌手id</td></tr><tr><td>list &gt; {} &gt; singer</td><td>name</td><td>string</td><td>歌手名称</td></tr></tbody></table><p>eg：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.zsfmyz.top/music/list?p=1&amp;n=30&amp;w=蔡徐坤</span><br></pre></td></tr></table></figure><p>返回参数举例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">    &#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"0"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: &#123;</span><br><span class="line">        <span class="attr">"curnum"</span>: <span class="number">30</span>,</span><br><span class="line">        <span class="attr">"curpage"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"list"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"songname"</span>: <span class="string">"情人"</span>,</span><br><span class="line">                <span class="attr">"singer"</span>: &#123;</span><br><span class="line">                    <span class="attr">"id"</span>: <span class="number">1016794</span>,</span><br><span class="line">                    <span class="attr">"mid"</span>: <span class="string">"002nXp292LIOGV"</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"蔡徐坤"</span>,</span><br><span class="line">                    <span class="attr">"name_hilight"</span>: <span class="string">"&lt;em&gt;蔡徐坤&lt;/em&gt;"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"albumname"</span>: <span class="string">"情人"</span>,</span><br><span class="line">                <span class="attr">"songmid"</span>: <span class="string">"000aWBBQ2fMyBJ"</span>,</span><br><span class="line">                <span class="attr">"albumimg"</span>: <span class="string">"http://imgcache.qq.com/music/photo/album_300/88/300_albumpic_12583588_0.jpg"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"songname"</span>: <span class="string">"YOUNG"</span>,</span><br><span class="line">                <span class="attr">"singer"</span>: &#123;</span><br><span class="line">                    <span class="attr">"id"</span>: <span class="number">1016794</span>,</span><br><span class="line">                    <span class="attr">"mid"</span>: <span class="string">"002nXp292LIOGV"</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"蔡徐坤"</span>,</span><br><span class="line">                    <span class="attr">"name_hilight"</span>: <span class="string">"&lt;em&gt;蔡徐坤&lt;/em&gt;"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"albumname"</span>: <span class="string">"YOUNG"</span>,</span><br><span class="line">                <span class="attr">"songmid"</span>: <span class="string">"004BxrBT3coQnC"</span>,</span><br><span class="line">                <span class="attr">"albumimg"</span>: <span class="string">"http://imgcache.qq.com/music/photo/album_300/78/300_albumpic_7156278_0.jpg"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"songname"</span>: <span class="string">"Wait Wait Wait"</span>,</span><br><span class="line">                <span class="attr">"singer"</span>: &#123;</span><br><span class="line">                    <span class="attr">"id"</span>: <span class="number">1016794</span>,</span><br><span class="line">                    <span class="attr">"mid"</span>: <span class="string">"002nXp292LIOGV"</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"蔡徐坤"</span>,</span><br><span class="line">                    <span class="attr">"name_hilight"</span>: <span class="string">"&lt;em&gt;蔡徐坤&lt;/em&gt;"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"albumname"</span>: <span class="string">"Wait Wait Wait"</span>,</span><br><span class="line">                <span class="attr">"songmid"</span>: <span class="string">"002kRCBE4dfcU2"</span>,</span><br><span class="line">                <span class="attr">"albumimg"</span>: <span class="string">"http://imgcache.qq.com/music/photo/album_300/19/300_albumpic_4359819_0.jpg"</span></span><br><span class="line">            &#125;,</span><br><span class="line">        <span class="comment">//  .....</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、音乐top100列表"><a href="#2、音乐top100列表" class="headerlink" title="2、音乐top100列表"></a>2、音乐top100列表</h3><h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><p><code>GET</code></p><p>参数</p><p>无</p><p>返回参数</p><table><thead><tr><th>上级</th><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>—</td><td>date</td><td>string</td><td>日期</td></tr><tr><td>—</td><td>curpage</td><td>int</td><td>页码</td></tr><tr><td>—</td><td>curnum</td><td>int</td><td>数目</td></tr><tr><td>—</td><td>list</td><td>—</td><td>音乐列表</td></tr><tr><td>—</td><td>list</td><td>array [ object ]</td><td>音乐列表</td></tr><tr><td>list &gt; {}</td><td>songname</td><td>string</td><td>歌曲名</td></tr><tr><td>list &gt; {}</td><td>songname</td><td>string</td><td>歌曲名</td></tr><tr><td>list &gt; {}</td><td>albumname</td><td>string</td><td>专辑名</td></tr><tr><td>list &gt; {}</td><td>songmid</td><td>string</td><td>歌曲id，用来请求播放地址</td></tr><tr><td>list &gt; {}</td><td>albumimg</td><td>string</td><td>封面图</td></tr><tr><td>list &gt; {}</td><td>singer</td><td>object</td><td>歌手信息</td></tr><tr><td>list &gt; {} &gt; singer</td><td>id</td><td>int</td><td>歌手id</td></tr><tr><td>list &gt; {} &gt; singer</td><td>name</td><td>string</td><td>歌手名称</td></tr><tr><td>—</td><td>topinfo</td><td>—</td><td>音乐top100信息</td></tr></tbody></table><p>list中歌曲信息比普通列表多了排名: cur_count</p><p>eg：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.zsfmyz.top/music/top</span><br></pre></td></tr></table></figure><p>返回参数举例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">    &#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"0"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: &#123;</span><br><span class="line">        <span class="attr">"code"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"date"</span>: <span class="string">"2019-12-05"</span>,</span><br><span class="line">        <span class="attr">"curnum"</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">"curpage"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"list"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"cur_count"</span>: <span class="string">"1"</span>,</span><br><span class="line">                <span class="attr">"songname"</span>: <span class="string">"像极了"</span>,</span><br><span class="line">                <span class="attr">"singer"</span>: &#123;</span><br><span class="line">                    <span class="attr">"id"</span>: <span class="number">1441799</span>,</span><br><span class="line">                    <span class="attr">"mid"</span>: <span class="string">"0023dQD40to8NP"</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"永彬Ryan.B"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"albumname"</span>: <span class="string">"像极了"</span>,</span><br><span class="line">                <span class="attr">"songmid"</span>: <span class="string">"000V8En93R3Dvd"</span>,</span><br><span class="line">                <span class="attr">"albumimg"</span>: <span class="string">"http://imgcache.qq.com/music/photo/album_300/36300_albumpic_9218636_0.jpg"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"cur_count"</span>: <span class="string">"2"</span>,</span><br><span class="line">                <span class="attr">"songname"</span>: <span class="string">"拱手相让"</span>,</span><br><span class="line">                <span class="attr">"singer"</span>: &#123;</span><br><span class="line">                    <span class="attr">"id"</span>: <span class="number">22529</span>,</span><br><span class="line">                    <span class="attr">"mid"</span>: <span class="string">"001z6uGh1j5qBh"</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"胜屿"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"albumname"</span>: <span class="string">"拱手相让"</span>,</span><br><span class="line">                <span class="attr">"songmid"</span>: <span class="string">"002DIlMZ48qB1F"</span>,</span><br><span class="line">                <span class="attr">"albumimg"</span>: <span class="string">"http://imgcache.qq.com/music/photo/album_300/66300_albumpic_9414066_0.jpg"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"cur_count"</span>: <span class="string">"3"</span>,</span><br><span class="line">                <span class="attr">"songname"</span>: <span class="string">"余年"</span>,</span><br><span class="line">                <span class="attr">"singer"</span>: &#123;</span><br><span class="line">                    <span class="attr">"id"</span>: <span class="number">1060985</span>,</span><br><span class="line">                    <span class="attr">"mid"</span>: <span class="string">"0022eAG537I1bg"</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"肖战"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"albumname"</span>: <span class="string">"余年"</span>,</span><br><span class="line">                <span class="attr">"songmid"</span>: <span class="string">"000bFWrY2VrdVp"</span>,</span><br><span class="line">                <span class="attr">"albumimg"</span>: <span class="string">"http://imgcache.qq.com/music/photo/album_300/92300_albumpic_9423892_0.jpg"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"cur_count"</span>: <span class="string">"4"</span>,</span><br><span class="line">                <span class="attr">"songname"</span>: <span class="string">"触不可及"</span>,</span><br><span class="line">                <span class="attr">"singer"</span>: &#123;</span><br><span class="line">                    <span class="attr">"id"</span>: <span class="number">199509</span>,</span><br><span class="line">                    <span class="attr">"mid"</span>: <span class="string">"003fA5G40k6hKc"</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"周深"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"albumname"</span>: <span class="string">"触不可及"</span>,</span><br><span class="line">                <span class="attr">"songmid"</span>: <span class="string">"002EFRnf3ekI9S"</span>,</span><br><span class="line">                <span class="attr">"albumimg"</span>: <span class="string">"http://imgcache.qq.com/music/photo/album_300/4300_albumpic_9320604_0.jpg"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"cur_count"</span>: <span class="string">"5"</span>,</span><br><span class="line">                <span class="attr">"songname"</span>: <span class="string">"冷静和热情之间"</span>,</span><br><span class="line">                <span class="attr">"singer"</span>: &#123;</span><br><span class="line">                    <span class="attr">"id"</span>: <span class="number">198135</span>,</span><br><span class="line">                    <span class="attr">"mid"</span>: <span class="string">"001IoTZp19YMDG"</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"易烊千玺"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"albumname"</span>: <span class="string">"冷静和热情之间"</span>,</span><br><span class="line">                <span class="attr">"songmid"</span>: <span class="string">"0014YYnw3vadJJ"</span>,</span><br><span class="line">                <span class="attr">"albumimg"</span>: <span class="string">"http://imgcache.qq.com/music/photo/album_300/59300_albumpic_9415259_0.jpg"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"cur_count"</span>: <span class="string">"6"</span>,</span><br><span class="line">                <span class="attr">"songname"</span>: <span class="string">"美丽谎言"</span>,</span><br><span class="line">                <span class="attr">"singer"</span>: &#123;</span><br><span class="line">                    <span class="attr">"id"</span>: <span class="number">71976</span>,</span><br><span class="line">                    <span class="attr">"mid"</span>: <span class="string">"001gthIA2JeIV1"</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"都智文"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"albumname"</span>: <span class="string">"美丽谎言"</span>,</span><br><span class="line">                <span class="attr">"songmid"</span>: <span class="string">"003sJCeZ1iK9mZ"</span>,</span><br><span class="line">                <span class="attr">"albumimg"</span>: <span class="string">"http://imgcache.qq.com/music/photo/album_300/88300_albumpic_9353488_0.jpg"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"cur_count"</span>: <span class="string">"7"</span>,</span><br><span class="line">                <span class="attr">"songname"</span>: <span class="string">"那男孩还好吗"</span>,</span><br><span class="line">                <span class="attr">"singer"</span>: &#123;</span><br><span class="line">                    <span class="attr">"id"</span>: <span class="number">3298773</span>,</span><br><span class="line">                    <span class="attr">"mid"</span>: <span class="string">"003yGiqM2qF7Gm"</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"Uu"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"albumname"</span>: <span class="string">"那男孩还好吗"</span>,</span><br><span class="line">                <span class="attr">"songmid"</span>: <span class="string">"002COmzJ0SPZMl"</span>,</span><br><span class="line">                <span class="attr">"albumimg"</span>: <span class="string">"http://imgcache.qq.com/music/photo/album_300/36300_albumpic_9132036_0.jpg"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"cur_count"</span>: <span class="string">"8"</span>,</span><br><span class="line">                <span class="attr">"songname"</span>: <span class="string">"星辰大海"</span>,</span><br><span class="line">                <span class="attr">"singer"</span>: &#123;</span><br><span class="line">                    <span class="attr">"id"</span>: <span class="number">25724</span>,</span><br><span class="line">                    <span class="attr">"mid"</span>: <span class="string">"0044vhyY2lfSB8"</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"周冬雨"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"albumname"</span>: <span class="string">"星辰大海"</span>,</span><br><span class="line">                <span class="attr">"songmid"</span>: <span class="string">"003enTsq4M1J59"</span>,</span><br><span class="line">                <span class="attr">"albumimg"</span>: <span class="string">"http://imgcache.qq.com/music/photo/album_300/63300_albumpic_9305663_0.jpg"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"cur_count"</span>: <span class="string">"9"</span>,</span><br><span class="line">                <span class="attr">"songname"</span>: <span class="string">"Lover (Remix)"</span>,</span><br><span class="line">                <span class="attr">"singer"</span>: &#123;</span><br><span class="line">                    <span class="attr">"id"</span>: <span class="number">11921</span>,</span><br><span class="line">                    <span class="attr">"mid"</span>: <span class="string">"000qrPik2w6lDr"</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"Taylor Swift"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"albumname"</span>: <span class="string">"Lover (Remix)"</span>,</span><br><span class="line">                <span class="attr">"songmid"</span>: <span class="string">"000H6p9p0V4MXi"</span>,</span><br><span class="line">                <span class="attr">"albumimg"</span>: <span class="string">"http://imgcache.qq.com/music/photo/album_300/58300_albumpic_9207358_0.jpg"</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"topinfo"</span>: &#123;</span><br><span class="line">            <span class="attr">"ListName"</span>: <span class="string">"巅峰榜·新歌"</span>,</span><br><span class="line">            <span class="attr">"MacDetailPicUrl"</span>: <span class="string">"http://y.gtimg.cn/music/common/upload/iphone_order_channel/20150820172435.jpg"</span>,</span><br><span class="line">            <span class="attr">"MacListPicUrl"</span>: <span class="string">"http://y.gtimg.cn/music/common/upload/iphone_order_channel/20150820172427.jpg"</span>,</span><br><span class="line">            <span class="attr">"UpdateType"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="attr">"albuminfo"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"headPic_v12"</span>: <span class="string">"http://y.gtimg.cn/music/common/upload/iphone_order_channel/20150820174934.jpg"</span>,</span><br><span class="line">            <span class="attr">"info"</span>: <span class="string">"集结30天内发行的优质歌曲，鼓励原创、着眼未来的乐坛风向标。根据每日综合数据进行排序，体现QQ音乐用户追新潮流，致力于打造最权威最有公信力的专业健康的新歌排行榜。&lt;br&gt;&lt;br&gt;歌曲数量：100首&lt;br&gt;综合数据：登录用户在QQ音乐收听/分享/下载数据"</span>,</span><br><span class="line">            <span class="attr">"listennum"</span>: <span class="number">1497166</span>,</span><br><span class="line">            <span class="attr">"pic"</span>: <span class="string">"http://y.gtimg.cn/music/common/upload/iphone_order_channel/20150820172421.jpg"</span>,</span><br><span class="line">            <span class="attr">"picDetail"</span>: <span class="string">"http://y.gtimg.cn/music/common/upload/iphone_order_channel/20150820172414.jpg"</span>,</span><br><span class="line">            <span class="attr">"pic_album"</span>: <span class="string">"http://imgcache.qq.com/music/photo_new/T002R300x300M000000tSk703NJAVD.jpg"</span>,</span><br><span class="line">            <span class="attr">"pic_h5"</span>: <span class="string">"http://y.gtimg.cn/music/common/upload/iphone_order_channel/20150820172242.jpg"</span>,</span><br><span class="line">            <span class="attr">"pic_v11"</span>: <span class="string">"http://y.gtimg.cn/music/common/upload/iphone_order_channel/20150820172421.jpg"</span>,</span><br><span class="line">            <span class="attr">"pic_v12"</span>: <span class="string">"http://y.gtimg.cn/music/photo_new/T003R300x300M000003zALCN1hkB6y.jpg"</span>,</span><br><span class="line">            <span class="attr">"topID"</span>: <span class="string">"27"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"0"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、音乐播放地址"><a href="#3、音乐播放地址" class="headerlink" title="3、音乐播放地址"></a>3、音乐播放地址</h3><h4 id="song"><a href="#song" class="headerlink" title="song"></a>song</h4><p><code>GET</code></p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>songmid</td><td>string</td><td>用于获取token</td></tr><tr><td>guid</td><td>string</td><td>用于获取token</td></tr><tr><td>lyric</td><td>string</td><td>默认为0不获取歌词，1获取歌词</td></tr></tbody></table><p>其他参数固定</p><p>返回参数</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>musicUrl</td><td>string</td><td>音乐播放地址</td></tr></tbody></table><p>eg:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.zsfmyz.top/music/song?songmid=000aWBBQ2fMyBJ&amp;guid=126548448</span><br></pre></td></tr></table></figure><p>返回参数举例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    &#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"0"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: &#123;</span><br><span class="line">        <span class="attr">"musicUrl"</span>: <span class="string">"https://ws.stream.qqmusic.qq.com/C400000aWBBQ2fMyBJ.m4a?guid=126548448&amp;vkey=AD7592245F651C2509E1C9B94E3A234B039967023066203214278A71E9DE4E6F3972EA83BB52F80EE74218B39305B6EAC9B0F6A610B0F947&amp;uin=0&amp;fromtag=66"</span>,</span><br><span class="line">        <span class="attr">"lyric"</span>: <span class="string">"无"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、音乐歌词"><a href="#4、音乐歌词" class="headerlink" title="4、音乐歌词"></a>4、音乐歌词</h3><h4 id="lyric"><a href="#lyric" class="headerlink" title="lyric"></a>lyric</h4><p><code>GET</code></p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>songmid</td><td>string</td><td>用于获取歌词</td></tr></tbody></table><p>其他参数固定</p><p>返回参数</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>lyric</td><td>string</td><td>歌词内容</td></tr></tbody></table><p>eg:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.zsfmyz.top/music/lyric?songmid=000wocYU11tSzS</span><br></pre></td></tr></table></figure><p>返回参数举例</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    &#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"0"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: &#123;</span><br><span class="line">        <span class="attr">"lyric"</span>: <span class="string">"[ti:差不多姑娘]\n[ar:G.E.M. 邓紫棋]\n[al:差不多姑娘]\n[by:]\n[offset:0]\n[00:00.00]差不多姑娘 - G.E.M. 邓紫棋\n[00:00.17]\n[00:02.67]差不多的姑娘\n[00:06.27]追逐差不多的漂亮\n[00:11.88]她们差不多的愿望\n[00:17.18]牵着她们鼻子方向\n[00:23.05]我回到差不多的家\n[00:24.38]躺在差不多的沙发\n[00:25.68]微博差不多的刷\n[00:26.99]都吃着差不多的瓜\n[00:28.48]那标题差不多的炸\n[00:29.78]..."</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二、福利图片-welfare"><a href="#二、福利图片-welfare" class="headerlink" title="二、福利图片 welfare"></a>二、福利图片 welfare</h2><blockquote><p>根据每日福利社的接口进行了封装，因为他们的https失效了，所以自己反向代理了。</p></blockquote><h3 id="1、图片列表"><a href="#1、图片列表" class="headerlink" title="1、图片列表"></a>1、图片列表</h3><h4 id="list-1"><a href="#list-1" class="headerlink" title="list"></a>list</h4><p><code>GET</code></p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>per_page</td><td>string</td><td>每页数据量</td></tr><tr><td>page</td><td>string</td><td>第几页</td></tr></tbody></table><p>其他参数固定</p><p>返回参数</p><p>如下：</p><p>eg:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.zsfmyz.top/welfare/list?per_page=20&amp;page=2</span><br></pre></td></tr></table></figure><p>返回参数举例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"data"</span>: &#123;</span><br><span class="line">        <span class="attr">"error"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"results"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"5b63cd4e9d21225e0d3f58c9"</span>,</span><br><span class="line">                <span class="attr">"createdAt"</span>: <span class="string">"2018-08-03T11:34:38.672Z"</span>,</span><br><span class="line">                <span class="attr">"desc"</span>: <span class="string">"2018-08-03"</span>, <span class="comment">//描述 </span></span><br><span class="line">                <span class="attr">"publishedAt"</span>: <span class="string">"2018-08-03T00:00:00.0Z"</span>,</span><br><span class="line">                <span class="attr">"source"</span>: <span class="string">"api"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"福利"</span>, <span class="comment">// 类型</span></span><br><span class="line">                <span class="attr">"url"</span>: <span class="string">"https://ww1.sinaimg.cn/large/0065oQSqgy1ftwcw4f4a5j30sg10j1g9.jpg"</span>, <span class="comment">//图片地址</span></span><br><span class="line">                <span class="attr">"used"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"who"</span>: <span class="string">"lijinshan"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"5b6151509d21225206860f08"</span>,</span><br><span class="line">                <span class="attr">"createdAt"</span>: <span class="string">"2018-08-01T14:21:04.556Z"</span>,</span><br><span class="line">                <span class="attr">"desc"</span>: <span class="string">"2018-08-01"</span>,</span><br><span class="line">                <span class="attr">"publishedAt"</span>: <span class="string">"2018-08-01T00:00:00.0Z"</span>,</span><br><span class="line">                <span class="attr">"source"</span>: <span class="string">"api"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"福利"</span>,</span><br><span class="line">                <span class="attr">"url"</span>: <span class="string">"https://ww1.sinaimg.cn/large/0065oQSqly1ftu6gl83ewj30k80tites.jpg"</span>,</span><br><span class="line">                <span class="attr">"used"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"who"</span>: <span class="string">"lijinshan"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>over 暂时只有这 ~~ 三 ~~ 四个，不过做一个音乐demo足够了，有兴趣的话可以试试。</p><p><del><a href="http://api.zsfmyz.top/" target="_blank" rel="noopener">http://api.zsfmyz.top/</a></del>    <a href="https://api.zsfmyz.top/" target="_blank" rel="noopener">https://api.zsfmyz.top/</a> 是目前开放的api接口地址，可直接食用。</p><h1 id="原接口说明"><a href="#原接口说明" class="headerlink" title="原接口说明"></a>原接口说明</h1><p><strong>搜索</strong></p><ul><li><a href="https://c.y.qq.com/soso/fcgi-bin/client_search_cp?aggr=1&amp;cr=1&amp;flag_qc=0&amp;p=1&amp;n=30&amp;w=简单爱" target="_blank" rel="noopener">https://c.y.qq.com/soso/fcgi-bin/client_search_cp?aggr=1&amp;cr=1&amp;flag_qc=0&amp;p=1&amp;n=30&amp;w=简单爱</a></li></ul><p><strong>封面</strong> </p><ul><li><a href="http://imgcache.qq.com/music/photo/album_300/[albumid%100]/300_albumpic_[albumid]_0.jpg" target="_blank" rel="noopener">http://imgcache.qq.com/music/photo/album_300/[albumid%100]/300_albumpic_[albumid]_0.jpg</a>, albumid%100, albumid</li><li>比如albumid=8217，封面地址就是</li><li><a href="http://imgcache.qq.com/music/photo/album_300/17/300_albumpic_8217_0.jpg。" target="_blank" rel="noopener">http://imgcache.qq.com/music/photo/album_300/17/300_albumpic_8217_0.jpg。</a></li></ul><p><strong>歌曲token</strong> </p><blockquote><p><strong>此方法需要参考本文开头说明中的 2020/6/03 更新中的说明的获取sign的文章再获取token</strong></p><ul><li><a href="https://c.y.qq.com/base/fcgi-bin/fcg_music_express_mobile3.fcg?format=json205361747&amp;platform=yqq&amp;cid=205361747&amp;songmid=003lghpv0jfFXG&amp;filename=C400003lghpv0jfFXG.m4a&amp;guid=126548448" target="_blank" rel="noopener">https://c.y.qq.com/base/fcgi-bin/fcg_music_express_mobile3.fcg?format=json205361747&amp;platform=yqq&amp;cid=205361747&amp;songmid=003lghpv0jfFXG&amp;filename=C400003lghpv0jfFXG.m4a&amp;guid=126548448</a></li></ul></blockquote><ol><li>songmid可以从歌曲信息中取到，filename根据songmid生成。</li><li>比如，songmid是003lghpv0jfFXG，则filename就是前缀加上C400，后缀加上.m4a，即C400003lghpv0jfFXG.m4a。</li><li><p>其他字段format、platform、cid、guid可以写死，但都是必须的。</p><p><strong>拼接播放地址</strong></p><ul><li><a href="http://ws.stream.qqmusic.qq.com/C400003lghpv0jfFXG.m4a?fromtag=0&amp;guid=126548448&amp;vkey=D661E5DF19B8FEB2FBFC554276746AC608AE98B0F30595B3B3BAD5C1C89ECCDD7BE599E306F786621856D22D6BD6B96F5DD344CF3814DB71" target="_blank" rel="noopener">http://ws.stream.qqmusic.qq.com/C400003lghpv0jfFXG.m4a?fromtag=0&amp;guid=126548448&amp;vkey=D661E5DF19B8FEB2FBFC554276746AC608AE98B0F30595B3B3BAD5C1C89ECCDD7BE599E306F786621856D22D6BD6B96F5DD344CF3814DB71</a></li></ul></li></ol><p><a href="https://www.jianshu.com/p/67e4bd47d981" target="_blank" rel="noopener">原文依据</a></p><p>以下是我根据此api所写的服务的项目地址，大家可以拿来测试体验。</p><p><a href="https://github.com/lunhui1994/node-music-api" target="_blank" rel="noopener">音乐api服务项目地址欢迎star</a></p>]]></content>
      
      
      <categories>
          
          <category> api </category>
          
      </categories>
      
      
        <tags>
            
            <tag> api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git入门篇</title>
      <link href="/Git/Git%E5%85%A5%E9%97%A8%E7%AF%87/"/>
      <url>/Git/Git%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h5 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h5><ul><li>首先我们需要去github官网申请git账号。<a href="https://github.com/" target="_blank" rel="noopener">git官网</a></li><li><p>申请之后，我们进入自己的linux服务器</p></li><li><p>安装git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y git</span><br><span class="line"></span><br><span class="line">git --version</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>配置 ssh-keygen</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 生成key</span><br><span class="line">ssh-keygen</span><br><span class="line">//查看公钥  </span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li>然后在GitHub上加入这个公钥 <a href="https://github.com/settings/keys" target="_blank" rel="noopener">配置公钥</a> </li></ul><p><img src="/img/github-key.jpg" alt="github-key"></p><ul><li>设置git命令的简写模式（alias）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.st status</span><br></pre></td></tr></table></figure><ul><li>设置自己的名字和邮箱</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;your name&quot;</span><br><span class="line">git config --global user.email &quot;your email @.com&quot;</span><br></pre></td></tr></table></figure><ul><li><h5 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h5></li></ul><p>如果你想使用别人的项目，就需要fork。<br><img src="/img/github-fork.jpg" alt="github-fork"></p><ul><li>一般我们参与公司项目，都会先fork公司的仓库。</li></ul><ul><li><h5 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h5></li></ul><p>进入一个你想存放项目的文件夹。<br><img src="/img/github-clone.jpg" alt="github-clone"></p><p>如图复制ssh地址。</p><ul><li>一般我们复制的这个ssh地址，是先fork了公司的仓库，然后回到自己的仓库下面复制自己的ssh。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:xxx/xxx.git</span><br></pre></td></tr></table></figure><p>然后就可以对代码进行修改和提交了。</p><ul><li><h5 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h5></li></ul><p>项目有不同的分支。<br>一般本地主分支为master。<br>自己的远程仓库为 origin<br>如果是公司的项目，可能还会添加一个公司仓库 gongsi</p><p>可以用以下命令查看。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git br -va</span><br></pre></td></tr></table></figure></p><p>一般我们都master分支上。</p><p>那么当我们修改了master分支的文件，但是又想恢复它到我们修改之前的状态，就需要checkout</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git co xxx.html</span><br></pre></td></tr></table></figure><p>checkout也可以创建本地分支: </p><p>origin/develop为远程仓库origin里面的一条分支，</p><p>我们要在本地创建一条和它一样的分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git co -b develop origin/develop</span><br></pre></td></tr></table></figure><p>另一种情况 本地和远程都只有master分支，</p><p>我们要在master的基础上添加订制功能，</p><p>需要独立出来一条和master一样的分支，然后再修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git co -b develop origin/master</span><br><span class="line"></span><br><span class="line"># 增加完新功能之后</span><br><span class="line"></span><br><span class="line">git push origin develop</span><br></pre></td></tr></table></figure><p>这样就会在本地和远程origin都创建了一条develop分支完成定制功能的添加又不影响原来的master分支。</p><ul><li><h5 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h5></li></ul><p>当我们修改某个文件，使用git st就可以看到哪些文件被修改了。<br>然后使用 git add 可以将我们修改过的文件添加进暂存区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git st</span><br><span class="line"></span><br><span class="line">git add xxx.html</span><br></pre></td></tr></table></figure></p><p>commit为某次修改的描述，是阶段性的。<br>我们每完成一个功能，或者每修复一个bug，最好都进行一次提交。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ci -m &apos;描述&apos;</span><br></pre></td></tr></table></figure><p>最后将代码push到我们的远程分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master(分支名)</span><br></pre></td></tr></table></figure><ul><li><h5 id="show"><a href="#show" class="headerlink" title="show"></a>show</h5>提交了之后，下一次我们想看看我们以前某次提交的东西是什么。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">git show 版本号</span><br></pre></td></tr></table></figure><p>这样可以查看该版本提交的东西，当然我们也可以上git去查看。</p><ul><li><h5 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h5>有时候我们会后悔添加了文件。那么可以用reset 返回</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset xxx.html</span><br></pre></td></tr></table></figure><p>这样就可以返回add之前的文件状态。</p><p>同样的我们如果已经push到远程分支了</p><p>想要回到我们push之前的状态，或者再之前的某个版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure><p>以上两个步骤，第一步是查看我们这个分支的所有版本号。</p><p>复制你想要回退的版本号，然后执行第二步，就会回退到目标版本了。</p><p>然后再次执行你想要add，ci，push等命令，将你想要提交的文件push到远程。</p><ul><li><h5 id="fetch-merge"><a href="#fetch-merge" class="headerlink" title="fetch/merge"></a>fetch/merge</h5></li></ul><p>push之后我们的远程分支就会和本地分支的内容一样了。</p><p>但是如果我们是一个公共项目，那就需要并入公共仓库（gongsi）。</p><p>这个就需要管理员来操作了。</p><p><img src="/img/github-pull1.jpg" alt="github-pull1"></p><p><img src="/img/github-pull2.jpg" alt="github-pull2"></p><p>等管理员合并了之后，别人就需要fetch并且merge你的代码，以此来使大家的代码都是同步的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line"></span><br><span class="line">git merge gongsi/master</span><br></pre></td></tr></table></figure><p>每次push之前我们都应该先merge一下公共仓库的代码。<br>以免我们在旧代码上修改提交导致冲突。</p><ul><li><h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h5></li></ul><p>那么我们如何删除自己的本地分支和远程分支呢，拿new_master举例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git br -d new_master</span><br><span class="line">git push origin -d new_master</span><br></pre></td></tr></table></figure><ul><li><h5 id="remote"><a href="#remote" class="headerlink" title="remote"></a>remote</h5></li></ul><p>当我们从某个git地址clone下来仓库后，仓库的远程地址就是你所clone的地址。</p><p>此时如果我们想修改我们的远程仓库怎么办呢（也就是修改origin的远程地址）</p><p>那就用到remote了</p><p>首先查看远程地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure></p><p>然后修改远程地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url [仓库名称] [url]</span><br><span class="line"></span><br><span class="line"># 例如：修改origin这个仓库的远程地址。</span><br><span class="line"># git remote set-url origin git@github.com:xiaoming/project.git</span><br></pre></td></tr></table></figure><p>那么如果要新添加一个远程地址呢？比如我们添加公司的（或者其他任何）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote add [自定义远程仓库名] [url]</span><br><span class="line"></span><br><span class="line"># 例如：</span><br><span class="line"># git remote add gongsi git@github.com:gongsi/project.git</span><br></pre></td></tr></table></figure><p>添加完公司的仓库之后，我们远程公司的仓库有了，但是本地还没有，怎么办呢，就用到前面的checkout了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git co -b [创建本地分支名] [远程仓库名/远程仓库分支名]</span><br><span class="line"></span><br><span class="line"># 例如：创建一个本地分支 develop 该分支的内容和gongsi/develop分支的内容一致。</span><br><span class="line"># git co -b develop gongsi/develop</span><br></pre></td></tr></table></figure><p>推送到自己的远程分支。<br>如果我们的origin上没有 develop 分支，那就会自动创建一个。</p><p>这样就保持三个分支一致了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin develop</span><br></pre></td></tr></table></figure><ul><li><h5 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h5></li></ul><p>有的时候，我们正在修改master分支。突然有一个紧急需求需要在develop上修改。</p><p>但是master还没有修改完，我们不能切换分支。</p><p>那怎么办呢？我们可以使用stash。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br><span class="line"></span><br><span class="line">git co develop</span><br><span class="line"></span><br><span class="line">git co master</span><br><span class="line"></span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><p>以上三个步骤</p><p>第一步 将我们修改的内容缓存起来</p><p>第二步 切换到develop 分支,然后修改提交之后</p><p>第三步 切换到master分支</p><p>第四步 恢复切换到develop之前的master分支的修改内容。</p><p>以上就是常用的git命令，当然还有更多的和更深的命令，可以扩展了解一下。</p><p>另外我们装完git如果颜色都是白色的，会感觉不太容易区分。可以配置下颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.branch auto</span><br><span class="line">git config --global color.interactive auto</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux文件共享服务(Samba安装配置)</title>
      <link href="/Linux/linux%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E6%9C%8D%E5%8A%A1(samba%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE)/"/>
      <url>/Linux/linux%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E6%9C%8D%E5%8A%A1(samba%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE)/</url>
      
        <content type="html"><![CDATA[<p>我们的服务器基本都是linux系统的，但是我们需要在windows下开发。</p><p>解决方案有两种：</p><ol><li>通过git同步linux和windows下的代码。</li><li>通过文件共享使windows连接linux下的共享文件夹</li></ol><p>现在说第二种方式如何实现：</p><p>Samba的介绍我就不多说了，总结一下就是可以在windows下操作编辑linux里面共享的内容。</p><a id="more"></a><p>#####（一）samba 安装</p><p>安装之前用rpm确定一下自己的服务器是否已经安装过了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep samba</span><br></pre></td></tr></table></figure><p>如果没有，我们就通过yum来下载rpm包来安装它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y samba</span><br></pre></td></tr></table></figure><p>安装完成之后可以再通过第一条命令查看是否安装成功。</p><p>安装成功之后，我们就需要修改samba的配置文件了。</p><p>#####（二）samba 配置</p><p>一般都在etc中<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/samba/smb.conf</span><br></pre></td></tr></table></figure></p><p> 打开之后其他的不用管，在该配置文件的末尾增加一段</p><p> 例如我们要共享根目录下的opt文件夹</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[opt]</span><br><span class="line">        comment = OPT</span><br><span class="line">        path = /opt/</span><br><span class="line">        public = yes</span><br><span class="line">        writable = yes</span><br><span class="line">        printable = no</span><br><span class="line">        guest ok = yes</span><br></pre></td></tr></table></figure><p>path 是你要共享的路径。</p><p>保存之后重启服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl start smb</span><br><span class="line"></span><br><span class="line">systemctl restart smb</span><br><span class="line"></span><br><span class="line">systemctl stop smb</span><br></pre></td></tr></table></figure><p>重启完之后基本samba就算安装配置完成。</p><p>想要使用还需要配置samba所需要的端口。</p><p>#####（三）配置 samba 端口</p><p>在这里使用阿里云服务器举例。</p><p><img src="/img/anquanzu.jpg" alt="github-key"><br><img src="/img/anquanzu1.jpg" alt="github-key"><br><img src="/img/anquanzu2.jpg" alt="github-key"></p><p>如图添加安全组规则</p><p>分别添加 136/138和445端口。</p><p>至此linux系统的问题都ok了。</p><p>#####（四）映射网络驱动器</p><p>然后到你的windows系统中</p><ol><li>右键我的电脑，映射网络驱动器。</li><li>输入\ip\xxx   以opt为例：\ip\opt ,ip为你的linux服务器ip</li><li>点击完成输入你的用户和密码。</li></ol><p>我们也可以创建一个用来使用samba的用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbpasswd -a xiaoming  #添加用户xiaoming到Samba用户中</span><br></pre></td></tr></table></figure><p>然后接着会让你设置密码，设置完之后。重启samba就可以了。</p><p>#####（五）配置 samba 防火墙</p><p>如果连接不上，请关闭windows的防火墙试试。</p><p>如果还不行就设置下linux的防火墙</p><p>iptables</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iptables -I RH-Firewall-1-INPUT 5 -m state --state NEW -m tcp -p tcp --dport 139 -j ACCEPT</span><br><span class="line">iptables -I RH-Firewall-1-INPUT 5 -m state --state NEW -m tcp -p tcp --dport 445 -j ACCEPT</span><br><span class="line">iptables -I RH-Firewall-1-INPUT 5 -p udp -m udp --dport 137 -j ACCEPT</span><br><span class="line">iptables -I RH-Firewall-1-INPUT 5 -p udp -m udp --dport 138-j ACCEPT</span><br><span class="line">iptables-save</span><br><span class="line">systemctl restart iptables</span><br></pre></td></tr></table></figure><p>selinux</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setsebool -P samba_enable_home_dirs on</span><br><span class="line">setsebool -P samba_export_all_rw on</span><br></pre></td></tr></table></figure><p>然后重新映射网络位置。</p><p>#####（六）放弃</p><p>如果还不可以，那放弃就好了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_145. 二叉树的后序遍历</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_145.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_145.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>给定一个二叉树，返回它的 后序 遍历。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,null,2,3]  </span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3 </span><br><span class="line"></span><br><span class="line">输出: [3,2,1]</span><br></pre></td></tr></table></figure></p><p>说明&amp;&amp;进阶:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 递归算法很简单，你可以通过迭代算法完成吗？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">前序排列的顺序是左，右，父。</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>递归，递归判断条件，该节点左右节点是否为null，递归时先左后右。跟前序遍历唯一的差别是最后再push。</code></pre><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * function TreeNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.left = this.right = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;TreeNode&#125; root</span><br><span class="line"> * @return &#123;number[]&#125;</span><br><span class="line"> */</span><br><span class="line"> let postorderArr = [];</span><br><span class="line"> let addNode = (root) =&gt; &#123;</span><br><span class="line">     root.left &amp;&amp; addNode(root.left);</span><br><span class="line">     root.right &amp;&amp; addNode(root.right);</span><br><span class="line">     postorderArr.push(root.val) // 唯一的差别</span><br><span class="line"> &#125;</span><br><span class="line"> let postorderTraversal  = (root) =&gt; &#123;</span><br><span class="line">     postorderArr = [];</span><br><span class="line">     if (!root) &#123;</span><br><span class="line">         return postorderArr;</span><br><span class="line">    &#125;</span><br><span class="line">     addNode(root);</span><br><span class="line">     return postorderArr;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><p>   迭代法，基于栈的特性将递推出来的节点压进栈中。然后遵循先进后出的原则，直至将栈排空。</p><p>   后序遍历的迭代法比较前序遍历要复杂一些。</p><p>   我的思路是打表，已经遍历过的节点需要标记（截断）。</p><h3 id="解答二"><a href="#解答二" class="headerlink" title="解答二"></a>解答二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * function TreeNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.left = this.right = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;TreeNode&#125; root</span><br><span class="line"> * @return &#123;number[]&#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">let postorderArr = [], nodeList = [], nowNode;</span><br><span class="line">let postorderTraversal  = (root) =&gt; &#123;</span><br><span class="line">    postorderArr = [];</span><br><span class="line">    if (!root) &#123;</span><br><span class="line">        return postorderArr;</span><br><span class="line">    &#125;</span><br><span class="line">    nodeList = [], nowNode = root;</span><br><span class="line">     while(nodeList.length &gt; 0 || nowNode) &#123;</span><br><span class="line">        while (nowNode) &#123;</span><br><span class="line">            nowNode.flag = true; // 标记该节点已经进入过数组</span><br><span class="line">            nodeList.push(nowNode);</span><br><span class="line">            </span><br><span class="line">            //如果该节点的左节点已经遍历过了就不需要遍历了  先左</span><br><span class="line">            </span><br><span class="line">            if (nowNode.left &amp;&amp; !nowNode.left.flag) &#123; </span><br><span class="line">                nowNode = nowNode.left;</span><br><span class="line">            </span><br><span class="line">            //如果该节点的右节点已经遍历过了就不需要遍历了  后右</span><br><span class="line"></span><br><span class="line">            &#125; else if (nowNode.right &amp;&amp; !nowNode.right.flag) &#123; </span><br><span class="line">                nowNode = nowNode.right;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">            </span><br><span class="line">                //左右节点都遍历过的相当于叶节点（度为0，没有子节点）</span><br><span class="line">            </span><br><span class="line">                nowNode = null; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 从栈中取值</span><br><span class="line">        nowNode = nodeList.pop(); </span><br><span class="line"></span><br><span class="line">        // 用来区分是否为叶节点 若为叶则赋值null，遍历下一轮。</span><br><span class="line">        </span><br><span class="line">        if (!nowNode.right || nowNode.right.flag) &#123;</span><br><span class="line">            postorderArr.push(nowNode.val);</span><br><span class="line">            nowNode = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return postorderArr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_144. 二叉树的前序遍历</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_144.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_144.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>给定一个二叉树，返回它的 前序 遍历。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,null,2,3]  </span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3 </span><br><span class="line"></span><br><span class="line">输出: [1,2,3]</span><br></pre></td></tr></table></figure></p><p>说明&amp;&amp;进阶:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 递归算法很简单，你可以通过迭代算法完成吗？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">前序排列的顺序是父节点在前，然后遍历左树，然后遍历右树。</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>递归，递归判断条件，该节点左右节点是否为null，递归时先左后右。</code></pre><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * function TreeNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.left = this.right = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;TreeNode&#125; root</span><br><span class="line"> * @return &#123;number[]&#125;</span><br><span class="line"> */</span><br><span class="line">let frontArr = [];</span><br><span class="line">let addNode = (root) =&gt; &#123;</span><br><span class="line">    frontArr.push(root.val)</span><br><span class="line">    root.left &amp;&amp; addNode(root.left);</span><br><span class="line">    root.right &amp;&amp; addNode(root.right);</span><br><span class="line">&#125;</span><br><span class="line">let preorderTraversal = (root) =&gt; &#123;</span><br><span class="line">    frontArr = [];</span><br><span class="line">    if (!root) &#123;</span><br><span class="line">        return frontArr;</span><br><span class="line">    &#125;</span><br><span class="line">    addNode(root);</span><br><span class="line">    return frontArr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><p>   迭代法，基于栈的特性将递推出来的节点压进栈中。然后遵循先进后出的原则，直至将栈排空。</p><h3 id="解答二"><a href="#解答二" class="headerlink" title="解答二"></a>解答二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * function TreeNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.left = this.right = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;TreeNode&#125; root</span><br><span class="line"> * @return &#123;number[]&#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">let frontArr = [], nodeList = [], nowNode;</span><br><span class="line">let preorderTraversal = (root) =&gt; &#123;</span><br><span class="line">    frontArr = [];</span><br><span class="line">    if (!root) &#123;</span><br><span class="line">        return frontArr;</span><br><span class="line">    &#125;</span><br><span class="line">    nodeList = [root];</span><br><span class="line">    while(nodeList.length &gt; 0) &#123;</span><br><span class="line">        nowNode = nodeList.pop();</span><br><span class="line">        frontArr.push(nowNode.val);</span><br><span class="line">        nowNode.right &amp;&amp; nodeList.push(nowNode.right);</span><br><span class="line">        nowNode.left &amp;&amp; nodeList.push(nowNode.left);        </span><br><span class="line">    &#125;</span><br><span class="line">    return frontArr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_94. 二叉树的中序遍历</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_94.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_94.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>给定一个二叉树，返回它的 中序 遍历。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,null,2,3]  </span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3 </span><br><span class="line"></span><br><span class="line">输出: [1,3,2]</span><br></pre></td></tr></table></figure></p><p>说明&amp;&amp;进阶:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 递归算法很简单，你可以通过迭代算法完成吗？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">前序排列的顺序是左，父，右。</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>递归，递归判断条件，该节点左右节点是否为null，递归时先左后右。</code></pre><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * function TreeNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.left = this.right = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;TreeNode&#125; root</span><br><span class="line"> * @return &#123;number[]&#125;</span><br><span class="line"> */</span><br><span class="line">var addNode = function (root) &#123;</span><br><span class="line">    root.left &amp;&amp; addNode(root.left);</span><br><span class="line">    inorderArr.push(root.val); // 前，中序遍历唯一区别 </span><br><span class="line">    root.right &amp;&amp; addNode(root.right);</span><br><span class="line">&#125;</span><br><span class="line">let inorderArr = [];</span><br><span class="line">var inorderTraversal = function(root) &#123;</span><br><span class="line">    inorderArr = [];</span><br><span class="line">    if (!root) &#123;</span><br><span class="line">        return inorderArr;</span><br><span class="line">    &#125;</span><br><span class="line">    addNode(root);</span><br><span class="line">    return inorderArr</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><p>   迭代法，基于栈的特性将递推出来的节点压进栈中。然后遵循先进后出的原则，直至将栈排空。</p><h3 id="解答二"><a href="#解答二" class="headerlink" title="解答二"></a>解答二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * function TreeNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.left = this.right = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;TreeNode&#125; root</span><br><span class="line"> * @return &#123;number[]&#125;</span><br><span class="line"> */</span><br><span class="line">let inorderArr = [], nodeList = [], nowNode;</span><br><span class="line">var inorderTraversal = function(root) &#123;</span><br><span class="line">    inorderArr = [], nodeList = [], nowNode = root;</span><br><span class="line">    if (!root) &#123;</span><br><span class="line">        return inorderArr;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    while(nodeList.length &gt; 0 || nowNode) &#123;</span><br><span class="line">        while (nowNode) &#123;</span><br><span class="line">            nodeList.push(nowNode);</span><br><span class="line">            nowNode = nowNode.left;</span><br><span class="line">        &#125;</span><br><span class="line">        nowNode = nodeList.pop();</span><br><span class="line">        inorderArr.push(nowNode.val);</span><br><span class="line">        nowNode = nowNode.right;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return inorderArr</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_264. 丑数 II</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_264.%20%E4%B8%91%E6%95%B0%20II/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_264.%20%E4%B8%91%E6%95%B0%20II/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>编写一个程序，找出第 n 个丑数。</p><p>丑数就是只包含质因数 2, 3, 5 的正整数。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: n = 10</span><br><span class="line">输出: 12</span><br><span class="line">解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。</span><br></pre></td></tr></table></figure></p><p>提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 是丑数。</span><br><span class="line">n 不超过1690。</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>方法一暴力循环（毫无疑问超时了）</code></pre><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var isUgly = function(num) &#123;</span><br><span class="line">    if (num &lt; 1) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">     while(num % 2 == 0) &#123;</span><br><span class="line">             num/=2</span><br><span class="line">         &#125; </span><br><span class="line">     while(num % 3 == 0) &#123;</span><br><span class="line">             num/=3</span><br><span class="line">         &#125; </span><br><span class="line">     while(num % 5 == 0) &#123;</span><br><span class="line">             num/=5</span><br><span class="line">         &#125;</span><br><span class="line">    </span><br><span class="line">    return (num == 1) ? true : false;</span><br><span class="line">&#125;;</span><br><span class="line">    var nthUglyNumber = function(n) &#123;</span><br><span class="line">    var ugly = 1;</span><br><span class="line">    for (var i = 0; i &lt; n; ugly++) &#123;</span><br><span class="line">        if (isUgly(ugly)) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ugly;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><pre><code>1. 根据题目的意思，我们首先知道丑数的因子只能是(2, 3, 5).当我们要从[1],推算出[1,2,3,4,5,6,8,9...]丑数序列时,过程如下var arr = [1]; 推算第二个数：比较arr[0]*2 和 arr[0]*3 和arr[0]*5 中取最小的一个arr[0]*2放进数组中： [1, arr[0]*2]。依次类推下次比较：arr[1]*2 和 arr[0]*3 和 arr[0]*5 中取最小arr[0]*3放进数组中： [1, arr[0]*2, arr[0]*3]依次类推下次比较：arr[1]*2 和 arr[1]*3 和 arr[0]*5 中取最小arr[1]*2放进数组中： [1, arr[0]*2, arr[0]*3, arr[1]*2]等等。。2. 由上可以看出，我们需要丑数组arr, 还有2,3,5三个质因数分别乘到了arr的第几个数。拿2作例子：我们需要知道数组的前多少个已经乘过2了。当arr[0]*2 之后，下次就该arr[1]*2跟其他的作比较了。即这2，3，5需要三个标记。在上面举例中第三次之后的下标为：[2, 1, 0].即下次比较应该用arr[2]*2 和 arr[1]*3 和arr[0]*5 来比较哪个小。3. 中间会遇到比如 arr[2]*2 == arr[1]*3 这样的情况。此时把2，3 的下标都+1即可.最后依次求到目标数组arr的第n个数即为答案。</code></pre><h3 id="解答二"><a href="#解答二" class="headerlink" title="解答二"></a>解答二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var nthUglyNumber = function(n) &#123;</span><br><span class="line">    var arr = [1], indexArr = [0, 0, 0],v2,v3,v5,temp;</span><br><span class="line">    for(var i = 0; i &lt;= n; i++) &#123;</span><br><span class="line">        v2 = arr[indexArr[0]] * 2;        </span><br><span class="line">        v3 = arr[indexArr[1]] * 3;</span><br><span class="line">        v5 = arr[indexArr[2]] * 5;</span><br><span class="line">        temp = Math.min(v2,Math.min(v3,v5)); // 判断最小</span><br><span class="line">        if (temp == v2) &#123;</span><br><span class="line">            indexArr[0]++;</span><br><span class="line">        &#125;</span><br><span class="line">        if (temp == v3) &#123;</span><br><span class="line">            indexArr[1]++;</span><br><span class="line">        &#125;</span><br><span class="line">        if (temp == v5) &#123;</span><br><span class="line">            indexArr[2]++;</span><br><span class="line">        &#125;</span><br><span class="line">        arr.push(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    return arr[n-1];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_26. 删除排序数组中的重复项</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_26.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_26.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定数组 nums = [1,1,2], </span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></p><p>提示：</p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span><br><span class="line">int len = removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>题目中原地的意思大概就是要在原数组中操作不能开辟新的数组空间。题目简单，就是去除数组中的重复元素。首先想到的是删除数组中的重复元素，用到了splice。</code></pre><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var removeDuplicates = function(nums) &#123;</span><br><span class="line">    for (var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">        if (nums.includes(nums[i], i + 1)) &#123;</span><br><span class="line">            nums.splice(i, 1);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return nums.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><pre><code>由于第一种方法用到了splice，所以其实时空间复杂度还是比较高的。所以，根据题目要求我们其实只需要保证数组的前面排列的是我们需要的就可以了。超过的部分我可以忽略不计。那其实就是依次从头填充数组就可以了！直到遍历完数组的最后一位。双指针就解决了。一个用来遍历数组，一个用来从头修改数组。由于题目告诉为排序数组，所以我们可以用i，i+1判断。</code></pre><h3 id="解答二"><a href="#解答二" class="headerlink" title="解答二"></a>解答二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var removeDuplicates = function(nums) &#123;</span><br><span class="line">    var next = 0;</span><br><span class="line">    for (var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">        if (nums[i] != nums[i+1]) &#123;</span><br><span class="line">            nums[next] = nums[i];</span><br><span class="line">            next++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路三"><a href="#解题思路三" class="headerlink" title="解题思路三"></a>解题思路三</h3><pre><code>了解一下ES6的array.includes(searchEle, fromIndex);判断数组种是否含有searchEle。(true / false);searchEle为搜索的元素（必填），fromIndex为从数组的哪一位开始搜索。使用includes同时可以判断非排序的数组</code></pre><h3 id="解答三"><a href="#解答三" class="headerlink" title="解答三"></a>解答三</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var removeDuplicates = function(nums) &#123;</span><br><span class="line">    var j = 0;</span><br><span class="line">    for (var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">        if (!nums.includes(nums[i], i + 1)) &#123;</span><br><span class="line">            nums[j] = nums[i];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return j;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_5198. 丑数 III</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_5198.%20%E4%B8%91%E6%95%B0%20III/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_5198.%20%E4%B8%91%E6%95%B0%20III/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>请你帮忙设计一个程序，用来找出第 n 个丑数。</p><p>丑数是可以被 a 或 b 或 c 整除的 正整数。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3, a = 2, b = 3, c = 5</span><br><span class="line">输出：4</span><br><span class="line">解释：丑数序列为 2, 3, 4, 5, 6, 8, 9, 10... 其中第 3 个是 4。</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4, a = 2, b = 3, c = 4</span><br><span class="line">输出：6</span><br><span class="line">解释：丑数序列为 2, 3, 4, 6, 8, 9, 12... 其中第 4 个是 6。</span><br></pre></td></tr></table></figure></p><p>示例 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 5, a = 2, b = 11, c = 13</span><br><span class="line">输出：10</span><br><span class="line">解释：丑数序列为 2, 4, 6, 8, 10, 11, 12, 13... 其中第 5 个是 10。</span><br></pre></td></tr></table></figure></p><p>示例 4:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1000000000, a = 2, b = 217983653, c = 336916467</span><br><span class="line">输出：1999999984</span><br></pre></td></tr></table></figure></p><p>提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;= n, a, b, c &lt;= 10^9</span><br><span class="line">1 &lt;= a * b * c &lt;= 10^18</span><br><span class="line">本题结果在 [1, 2 * 10^9] 的范围内</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>方法一暴力循环（毫无疑问超时了）</code></pre><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    var nthUglyNumber = function(n, a, b, c) &#123;</span><br><span class="line">    var num = 1;</span><br><span class="line">    for (var i = 1; i &lt;= n; num++) &#123;</span><br><span class="line">        if (num % a == 0 || num % b == 0 || num % c == 0) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return num - 1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><pre><code>1.找出该数可能存在的范围，首先可以思考判断得出最小的值为n ，最大为min(a,b,c) * n2.假设最终结果为finalValue，求出该值的序列长度nums。例如：下面的例子中finalValue为6，而其序列就为[2, 3, 4, 6],长度为4===n。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4, a = 2, b = 3, c = 4</span><br><span class="line">输出：6</span><br><span class="line">解释：丑数序列为 2, 3, 4, 6, 8, 9, 12... 其中第 4 个是 6。</span><br></pre></td></tr></table></figure>3.通过二分法查找finalValue4.判断条件为: nums.length === n ? ，如果相等即为该值。** 注意：finalValue必须符合是a，b，c的倍数，且是所有符合条件的值中最小的一个。 **</code></pre><h3 id="解答二"><a href="#解答二" class="headerlink" title="解答二"></a>解答二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//最大公约数 ：a和 a%b 的最大公约数 和 a 和 b 的最大公约数一致</span><br><span class="line">var maxComFn = function(a, b) &#123;</span><br><span class="line">    if (a % b === 0) &#123;</span><br><span class="line">        return b;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return maxComFn(b, a % b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//最小公倍数  公式法： a*b === a和b的最大公约数 * a和b的最小公倍数</span><br><span class="line">var minComFn = function(a, b) &#123;</span><br><span class="line">    var maxC = maxComFn(a, b)</span><br><span class="line">    return a * b / maxC;</span><br><span class="line">&#125;</span><br><span class="line">//值的序列长度  容斥定理， 含有a，b，c的个数 - ab，ac，bc的公倍数的个数 + abc公倍数的个数</span><br><span class="line">var inNumsFn = function(a, b, c, num) &#123;</span><br><span class="line">    return Math.floor(num / a) + </span><br><span class="line">        Math.floor(num / b) +</span><br><span class="line">        Math.floor(num / c) -</span><br><span class="line">        Math.floor(num / minComFn(a, b)) -</span><br><span class="line">        Math.floor(num / minComFn(a, c)) -</span><br><span class="line">        Math.floor(num / minComFn(c, b)) +</span><br><span class="line">        Math.floor(num / minComFn(c, minComFn(a, b)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var nthUglyNumber = function(n, a, b, c) &#123;</span><br><span class="line">    var maxCom = maxComFn(a, maxComFn(b, c));</span><br><span class="line">    let mid,</span><br><span class="line">        left = n,</span><br><span class="line">        right = n * Math.min(a, b, c);</span><br><span class="line">    while (left &lt; right) &#123;</span><br><span class="line">        mid = Math.floor((left + right) / 2);</span><br><span class="line">        if (inNumsFn(a, b, c, mid) &lt; n) &#123;</span><br><span class="line">            left = mid + 1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            right = mid; //一直求到最小。</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_1189. “气球” 的最大数量</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_1189.%20%E2%80%9C%E6%B0%94%E7%90%83%E2%80%9D%20%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_1189.%20%E2%80%9C%E6%B0%94%E7%90%83%E2%80%9D%20%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>给你一个字符串 text，你需要使用 text 中的字母来拼凑尽可能多的单词 “balloon”（气球）。</p><p>字符串 text 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 “balloon”。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：text = &quot;nlaebolko&quot;</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：text = &quot;loonbalxballpoon&quot;</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure></p><p>提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;= text.length &lt;= 10^4</span><br><span class="line">text 全部由小写英文字母组成</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>先找出各个字母的个数，然后找出其中的最小值(o,l数量除以2)。用match正则检测字符串中符合条件的字母，其长度即为该字母在字符串中的个数。</code></pre><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var maxNumberOfBalloons = function(text) &#123;</span><br><span class="line">    let regexp, singleNum, min = text.length;</span><br><span class="line">    for (let i in &quot;balon&quot;) &#123;</span><br><span class="line">        regexp = new RegExp(&quot;balon&quot;[i], &apos;g&apos;);</span><br><span class="line">        singleNum = text.match(regexp).length;</span><br><span class="line">        if (&quot;balon&quot;[i]) == &apos;o&apos; || &quot;balon&quot;[i]) == &apos;l&apos;) &#123;</span><br><span class="line">            singleNum = Math.floor(singleNum / 2)</span><br><span class="line">        &#125;</span><br><span class="line">        min = (min &lt;= singleNum) ? min : singleNum;</span><br><span class="line">    &#125;</span><br><span class="line">    return min;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><pre><code>用split分割字符串，分割之后的数组长度-1 就是该字符(分隔符)在该字符串中的个数。</code></pre><h3 id="解答二"><a href="#解答二" class="headerlink" title="解答二"></a>解答二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var maxNumberOfBalloons = function(text) &#123;</span><br><span class="line">    let singleNum, min = text.length;</span><br><span class="line">    for (let i in &quot;balon&quot;) &#123;</span><br><span class="line">        singleNum = text.split(&quot;balon&quot;[i]).length - 1;</span><br><span class="line">        if (&quot;balon&quot;[i]) == &apos;o&apos; || &quot;balon&quot;[i]) == &apos;l&apos;) &#123;</span><br><span class="line">            singleNum = Math.floor(singleNum / 2)</span><br><span class="line">        &#125;</span><br><span class="line">        min = (min &lt;= singleNum) ? min : singleNum;</span><br><span class="line">    &#125;</span><br><span class="line">    return min;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_14. 最长公共前缀</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_14.%20%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_14.%20%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><pre><code>编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 &quot;&quot;。</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出: &quot;fl&quot;</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line">解释: 输入不存在公共前缀。</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>依序判断所有字符串的第N位字符是否一致。一致就加入共同前缀，不一致就跳出返回之前的前缀。</code></pre><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var longestCommonPrefix = function(strs) &#123;</span><br><span class="line">    // 首先判断一下边界情况：</span><br><span class="line">    // 1. 当长度为0时，结果必然为&quot;&quot;;</span><br><span class="line">    // 2. 当长度为1时，结果必然为&quot;strs[0]&quot;;</span><br><span class="line">    if (!strs.length) &#123;return &quot;&quot;;&#125;;</span><br><span class="line">    if (strs.length == 1) &#123;return strs[0]&#125;;</span><br><span class="line">    // 定义公共前缀</span><br><span class="line">    let comStr = &quot;&quot;;</span><br><span class="line">    // 循环每个字符串的每个字母,以第一个字符串的长度为准</span><br><span class="line">    for (let i = 0; i &lt; strs[0].length; i++) &#123;</span><br><span class="line">        // 定义每次循环的第一个字符串的字母 当其字符串长度不够时，取值为undefined,所以会判断为不相等跳出循环。</span><br><span class="line">        let item = strs[0][i];</span><br><span class="line">        // 循环数组</span><br><span class="line">        for (let j = 0; j &lt; strs.length; j++) &#123;</span><br><span class="line">            //判断所有字符串的第i个字母是否一致，不一致返回原来的共同前缀。</span><br><span class="line">            if (strs[j][i] != item) &#123;  </span><br><span class="line">                return comStr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //一致的话将该字母加入共同前缀</span><br><span class="line">        comStr += item;</span><br><span class="line">    &#125;</span><br><span class="line">    // 回共同前缀 当所有字符串都一致的情况下才会在此处返回。</span><br><span class="line">    return comStr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><pre><code>对数组中的字符串排序，然后比较最大和最小的字符串的公共前缀。即为数组的公共前缀</code></pre><h3 id="解答二"><a href="#解答二" class="headerlink" title="解答二"></a>解答二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var longestCommonPrefix = function(strs) &#123;</span><br><span class="line">    if (!strs.length) &#123;return &quot;&quot;;&#125;;</span><br><span class="line">    if (strs.length == 1) &#123;return strs[0]&#125;;</span><br><span class="line">    let comStr = &quot;&quot;;</span><br><span class="line">    strs.sort();</span><br><span class="line">    for (let i = 0; i &lt; strs[0].length; i++) &#123;</span><br><span class="line">        if (strs[0][i] != strs[strs.length - 1][i]) &#123;</span><br><span class="line">            return strs[0].slice(0, (i + 1));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return strs[0];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_35. 搜索插入位置</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_35.%20%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_35.%20%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>你可以假设数组中无重复元素。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 5</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 0</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>利用findIndex函数遍历数组。</code></pre><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var findFuc = function(el, index, arr) &#123;</span><br><span class="line">    return el &gt;= this</span><br><span class="line">&#125;</span><br><span class="line">var searchInsert = function(nums, target) &#123;</span><br><span class="line">    return nums.findIndex(findFuc, target) == -1 ? nums.length : nums.findIndex(findFuc, target)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><pre><code>利用二分法遍历数组。</code></pre><h3 id="解答二"><a href="#解答二" class="headerlink" title="解答二"></a>解答二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var searchInsert = function(nums, target) &#123;</span><br><span class="line">    if (nums[0] &gt;= target) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125; </span><br><span class="line">    if (nums[nums.length - 1] &lt; target) &#123;</span><br><span class="line">        return nums.length;</span><br><span class="line">    &#125; </span><br><span class="line">    let left = 0, right = nums.length - 1, mid = parseInt((nums.length - 1)/2);</span><br><span class="line">    while(left &lt; (right-1)) &#123;</span><br><span class="line">        if (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; else if (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return mid;</span><br><span class="line">        &#125;</span><br><span class="line">        mid = parseInt((left + right) / 2);</span><br><span class="line">    &#125;</span><br><span class="line">    return right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5 Drag &amp; Drop 拖拽与拖放</title>
      <link href="/JavaScript/HTML5%20drag%20&amp;%20drop%20%E6%8B%96%E6%8B%BD%E4%B8%8E%E6%8B%96%E6%94%BE/"/>
      <url>/JavaScript/HTML5%20drag%20&amp;%20drop%20%E6%8B%96%E6%8B%BD%E4%B8%8E%E6%8B%96%E6%94%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="拖拽与拖放"><a href="#拖拽与拖放" class="headerlink" title="拖拽与拖放"></a>拖拽与拖放</h2><blockquote><p>drop &amp; drag 是html5自带的拖拽与拖放的api</p></blockquote><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><p>所有需要被拖动的元素都要加上draggable属性，默认除了a，img等标签外不可拖动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// html 行内绑定</span><br><span class="line">&lt;element ondrag=&quot;myScript&quot;&gt;</span><br><span class="line">// js 绑定元素</span><br><span class="line">object.ondrag=function()&#123;&#125;;</span><br><span class="line">// 全局监听</span><br><span class="line">object.addEventListener(&quot;drag&quot;, myScript);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="相关重点api"><a href="#相关重点api" class="headerlink" title="相关重点api"></a>相关重点api</h3><ul><li>拖拽元素上触发的事件（事件target是拖拽元素）</li></ul><ol><li>dragstart  被拖拽元素开始被拖拽时触发。</li><li>drag  被拖拽元素拖拽中触发</li><li>dragend  完成拖动时触发。</li></ol><ul><li>拖拽目标容器上的事件（事件target是目标容器）</li></ul><ol start="4"><li>dragenter  被拖拽元素在进入其原始容器内的时候触发。</li><li>dragleave  跟enter相对应。</li><li>dragover  在另一容器内时触发（实测，只要我开始拖动之后就一直触发，且该事件需要阻止浏览器默认事件，因为在其他容器内都是默认不能拖动的。）</li><li>drop 释放鼠标时候触发</li></ol><h3 id="DataTransfer-是拖拽元素的一个媒介对象，可以设置一些功能"><a href="#DataTransfer-是拖拽元素的一个媒介对象，可以设置一些功能" class="headerlink" title="DataTransfer 是拖拽元素的一个媒介对象，可以设置一些功能"></a>DataTransfer 是拖拽元素的一个媒介对象，可以设置一些功能</h3><ul><li><p>dataTransfer.dropEffect：设置或返回拖放目标上允许发生的拖放行为。如果此设置的拖放行为不在effectAllowed属性设置的多种拖放行为之内，拖放操作将会失败。该属性值只允许none、copy、link、move值之一。</p></li><li><p>dataTransfer.effectAllowed：设置或返回被拖动元素允许发生的拖动行为。该属性值可设置为none、copy、copyLink、copyMove、link、linkMove、move、all、uninitialized。</p></li><li><p>dataTransfer.items：该属性返回DataTransferItems对象，该对象代表了拖动数据。</p></li><li><p>dataTransfer.setDragImage(element x,y)：设置拖放操作的自定义图标。其中element设置自定义图标，x设置图标与鼠标在水平方向的距离；y设置图标与鼠标在垂直方向的距离。</p></li><li><p>dataTransfer.addElement(element)：添加自定义图标。</p></li><li><p>dataTransfer.types：该属性返回一个DOMStringList对象，该对象包括了存入dataTransfer中数据的所有类型。</p></li><li><p>dataTransfer.getData(format)：获取DataTransfer对象中设置format格式的数据。其中format代表数据格式，data代表数据。</p></li><li><p>dataTransfer.clearData([format])：清除DataTransfer对象中format格式的数据，如果省略format格式，则意味着清除DataTransfer对象中的全部数据。</p></li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;span  draggable=&quot;true&quot; &gt;&lt;/span&gt;  // 所有需要被拖动的元素都要加上draggable属性，默认除了a，img等标签外不可拖动。</span><br><span class="line"></span><br><span class="line">//start drag end 中 event都是被拖拽的元素</span><br><span class="line"></span><br><span class="line">document.addEventListener(&quot;dragstart&quot;, function (event) &#123; </span><br><span class="line">    var id = $(event.target).prop(&apos;id&apos;); </span><br><span class="line">    event.dataTransfer.dropEffect = &apos;move&apos; //设置拖动样式</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//dragover dragleave   dragenter drop 中event都代表拖放的容器元素  </span><br><span class="line"></span><br><span class="line">document.addEventListener(&quot;dragover&quot;, function(event) &#123;  </span><br><span class="line">    // drop 阻止浏览器默认事件</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    console.log(&quot;容器内&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS：font-Family字体对照表及效果展示</title>
      <link href="/Css/CSS%EF%BC%9Afont-family%E5%AD%97%E4%BD%93%E5%AF%B9%E7%85%A7%E8%A1%A8%E5%8F%8A%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA/"/>
      <url>/Css/CSS%EF%BC%9Afont-family%E5%AD%97%E4%BD%93%E5%AF%B9%E7%85%A7%E8%A1%A8%E5%8F%8A%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>直接进demo演示页面查看吧。</p><p><a href="https://www.zsfmyz.top/demo/font/">demo演示地址</a></p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5 Video截图功能实现</title>
      <link href="/JavaScript/HTML5%20Video%E6%88%AA%E5%9B%BE%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
      <url>/JavaScript/HTML5%20Video%E6%88%AA%E5%9B%BE%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p>因为所在公司业务为视频编解码，所以项目大多数是围绕视频展开的，之前做了一个快编项目，可以当作一个web端的小型视频编辑器。当中就需要对视频当前帧图进行截取，然后后续当作视频的封面或者海报图。 那么我就需要实现这么一个视频截图的功能。</p></blockquote><a id="more"></a><h3 id="API简介"><a href="#API简介" class="headerlink" title="API简介"></a>API简介</h3><ol><li><p>首先视频截图在我们大前端实现，就要借助canvas的drawImage()这个api了。</p><ul><li>drawImage 该api的功能简单讲就是将一张图片(Source image)绘制在canvas(Destination canvas)上. </li><li><p>语法：</p><blockquote><p>void ctx.drawImage(image, dx, dy);<br>void ctx.drawImage(image, dx, dy, dWidth, dHeight);<br>void ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);</p></blockquote></li><li><p>image： 原图片Element.</p></li><li>sx, sy, sWidth, sHeight : 需要在原图取起点x，y，宽，高；</li><li>dx, dy, dWidth, dHeight：在目标canvas上绘制的起点x，y，宽，高。</li><li>image，dx，dy为必填</li></ul></li><li><p>当我们截取并绘制完图片之后，就需要将在canvas上绘制的图片转化为图片了，那就需要 toDataURL(‘image/png’) 将其转换。</p><ul><li>该方法返回一个用作展示的图片地址。 </li><li><p>语法：</p><blockquote><p>canvas.toDataURL(type, encoderOptions); </p></blockquote></li><li><p>type: 默认为 image/png， 可选 image/jpeg或者image/webp </p></li><li>encoderOptions：当type为 jpeg或者webp 时，可以选择0-1区间内的值作为输出的图片质量。</li></ul></li></ol><p> <strong>MDN</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL" target="_blank" rel="noopener">HTMLCanvasElement.toDataURL()</a> </li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL" target="_blank" rel="noopener">CanvasRenderingContext2D.drawImage()</a></li></ul><hr><p>回到正题，函数实现</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>HTML</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;video id=&quot;video&quot; controls=&quot;controls&quot;&gt;</span><br><span class="line">    &lt;source src=&quot;../videos/xxx.mp4&quot; /&gt;</span><br><span class="line">&lt;/video&gt;</span><br><span class="line">&lt;button id=&quot;capture&quot;&gt;Capture&lt;/button&gt;</span><br><span class="line">&lt;div id=&quot;output&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><strong>Script</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(function() &#123;</span><br><span class="line">    var video, $output;</span><br><span class="line">    var scale = 0.25;</span><br><span class="line">    var initialize = function() &#123;</span><br><span class="line">        $output = $(&quot;#output&quot;);</span><br><span class="line">        video = $(&quot;#video&quot;).get(0);</span><br><span class="line">        $(&quot;#capture&quot;).click(captureImage);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    var captureImage = function() &#123;</span><br><span class="line">        var canvas = document.createElement(&quot;canvas&quot;);</span><br><span class="line">        canvas.width = video.videoWidth * scale;</span><br><span class="line">        canvas.height = video.videoHeight * scale;</span><br><span class="line"></span><br><span class="line">        canvas.getContext(&apos;2d&apos;).drawImage(video, 0, 0, canvas.width, canvas.height);</span><br><span class="line">        </span><br><span class="line">        var img = document.createElement(&quot;img&quot;);</span><br><span class="line"></span><br><span class="line">        img.src = canvas.toDataURL(&apos;image/png&apos;);</span><br><span class="line">        </span><br><span class="line">        $output.prepend(img);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $(initialize);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p><a href="https://www.zsfmyz.top/demo/1/">demo演示地址</a></p><p>大家可以用webstrom内置的服务器进行测试。</p><p>使用chrome浏览器需要一个服务器环境，否则canvas的toDataURL方法会报错。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS：border-Radius(圆角)失效了？</title>
      <link href="/Css/CSS%EF%BC%9Aborder-radius(%E5%9C%86%E8%A7%92)%E5%A4%B1%E6%95%88%E4%BA%86%EF%BC%9F/"/>
      <url>/Css/CSS%EF%BC%9Aborder-radius(%E5%9C%86%E8%A7%92)%E5%A4%B1%E6%95%88%E4%BA%86%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天涉及两个属性：</p><ol><li>overscroll: scroll-y / scroll-x / scroll;</li><li>border-radius: 10px;</li></ol></blockquote><a id="more"></a><p>原本这两个属性是没有什么联系的，但是当同时出现在同一个元素上时，就会发生圆角效果被滑动条覆盖的情况。<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">div &#123;</span><br><span class="line">border-radius:10px;</span><br><span class="line">overflow:scroll-y;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>这种情况下，div的右上角和右下角都会因为滚动条的存在而显示的是直角。<br>其实div的四个角确实已经有了圆角的效果，但是滚动条属于div内部的元素，层级高，所以将div的圆角遮挡住了。那么我们解决这种情况的方法也很简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">div &#123;</span><br><span class="line">border-radius: 10px;</span><br><span class="line">overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">ul &#123;</span><br><span class="line">overflow: scroll-y;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;ul&gt;&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>我们在原本需要滚动的盒子内部加上一层滚动元素，将滚动的效果放在内部的滚动元素上，外部div加上overflow: hidden;并设置圆角，就可以达到我们需要的效果。</p><p>同样的我们也可以在当前元素的外层加上圆角遮罩，最终效果同上。</p><p>如有其他情况欢迎补充</p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS：z-Index失效了？</title>
      <link href="/Css/CSS%EF%BC%9Az-index%E5%A4%B1%E6%95%88%E4%BA%86%EF%BC%9F%20/"/>
      <url>/Css/CSS%EF%BC%9Az-index%E5%A4%B1%E6%95%88%E4%BA%86%EF%BC%9F%20/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p>我们在使用z-index的时候，有时候会发现，无论怎么样增大z-index的值，都无法改变目标元素的层级。</p></blockquote><ul><li><strong> 其实是这几种情况在作怪 </strong></li></ul><ol><li><strong>position</strong></li><li><strong>float</strong></li><li><strong>opcity</strong> <a id="more"></a></li></ol><h3 id="父盒子的层级问题"><a href="#父盒子的层级问题" class="headerlink" title="父盒子的层级问题"></a>父盒子的层级问题</h3><ul><li>父盒子的层级问题，当你的父盒子层级小于另一个父盒子层级的时候，你子元素的z-index再高都是没有用的。该元素的层级只在该元素所在的容器内起作用。该种情况大家应该容易理解，不过也可以看下面的例子。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        .a1&#123;</span><br><span class="line">            position:relative;</span><br><span class="line">            z-index: 2;</span><br><span class="line">            width:400px;</span><br><span class="line">            height:400px;</span><br><span class="line">            background: black;</span><br><span class="line">            border:1px solid #eee;</span><br><span class="line">            margin-bottom: -100px;</span><br><span class="line">        &#125;</span><br><span class="line">        .a&#123;</span><br><span class="line">            position:relative;</span><br><span class="line">            z-index: 1;</span><br><span class="line">            width:400px;</span><br><span class="line">            height:400px;</span><br><span class="line">            background: yellow;</span><br><span class="line">            left:0;</span><br><span class="line">            border:1px solid #eee;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .b&#123;</span><br><span class="line">            position:absolute;</span><br><span class="line">            left:0;</span><br><span class="line">            top:0;</span><br><span class="line">            z-index: 50;</span><br><span class="line">            width:200px;</span><br><span class="line">            height:200px;</span><br><span class="line">            background: red;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .c&#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left:0;</span><br><span class="line">            top:0;</span><br><span class="line">            z-index:1111;</span><br><span class="line">            width:100px;</span><br><span class="line">            height:100px;</span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;a1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;a&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;b&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="opcity属性"><a href="#opcity属性" class="headerlink" title="opcity属性"></a>opcity属性</h3><ul><li>opcity属性，当你要设置两个元素的z-index值的时候，要注意是否给其中一个元素添加了opcity属性，如果添加了，那么添加了opcity属性的元素将一直在最上层，这个我在另一篇文章中讲过。</li><li><a href="https://www.zsfmyz.top/2018/06/29/Opcity%E5%BC%95%E5%8F%91%E7%9A%84%E5%85%83%E7%B4%A0%E5%B1%82%E7%BA%A7%E5%8F%98%E5%8C%96/">opcity引发的元素层级变化</a></li></ul><hr><h3 id="position影响"><a href="#position影响" class="headerlink" title="position影响"></a>position影响</h3><ul><li>还有就是比较普遍的，我们设置层级一般都是因为设置了position，当你设置的两个子元素，一个有position属性，另一个没有position的时候，拥有position属性的元素将一直在其他元素上方。如下面的例子</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        .a&#123;</span><br><span class="line">            position:relative;</span><br><span class="line">            z-index: 1;</span><br><span class="line">            width:400px;</span><br><span class="line">            height:400px;</span><br><span class="line">            background: yellow;</span><br><span class="line">            left:0;</span><br><span class="line">            border:1px solid #eee;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .b&#123;</span><br><span class="line">            position:absolute;</span><br><span class="line">            left:0;</span><br><span class="line">            top:0;</span><br><span class="line">            z-index: 50;</span><br><span class="line">            width:200px;</span><br><span class="line">            height:200px;</span><br><span class="line">            background: red;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .c&#123;</span><br><span class="line">            z-index:100;</span><br><span class="line">            width:100px;</span><br><span class="line">            height:100px;</span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;a&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;b&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>需要给c也加上position属性才让bc可以先同处一级，然后z-index才会起作用。</p><h3 id="float影响"><a href="#float影响" class="headerlink" title="float影响"></a>float影响</h3><ul><li>那如果我把子元素的position都去掉呢？当父盒子有position而所有子元素都没有position属性的时候，z-index一样全部失效，后面的盒子将会覆盖前面的盒子，z-index无效。</li><li>同样的我们两个都加上浮动的效果跟上面的效果是一样的，后覆盖前，z-index无效</li><li>一个加float另一个不加，则是加float的元素一直浮动在最上层。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        .a&#123;</span><br><span class="line">            position:absolute;</span><br><span class="line">            z-index: 1;</span><br><span class="line">            width:400px;</span><br><span class="line">            height:400px;</span><br><span class="line">            background: yellow;</span><br><span class="line">            left:0;</span><br><span class="line">            border:1px solid #eee;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .b&#123;</span><br><span class="line">            z-index: -10;</span><br><span class="line">            width:200px;</span><br><span class="line">            height:200px;</span><br><span class="line">            background: red;</span><br><span class="line">            margin-bottom: -100px;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .c&#123;</span><br><span class="line">            z-index:101;</span><br><span class="line">            width:100px;</span><br><span class="line">            height:100px;</span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;a&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;b&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>其他情况欢迎补充。</p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建配置总结</title>
      <link href="/Hexo/Hexo%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/"/>
      <url>/Hexo/Hexo%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>主题是material-x 最新版本叫：<strong><a href="https://github.com/xaoxuu/hexo-theme-volantis" target="_blank" rel="noopener">volantis</a></strong></p><p><a href="https://github.com/xaoxuu/hexo-theme-volantis" target="_blank" rel="noopener">主题最新仓库</a></p><p><a href="https://github.com/lunhui1994/hexo-theme-material-x" target="_blank" rel="noopener">本博客主题所用版本</a></p><p>简介：</p><ol><li><strong>Hexo 添加Favicon</strong></li><li><strong>Hexo 添加百度统计</strong></li><li><strong>Hexo RSS订阅</strong></li><li><strong>Hexo 添加看板娘</strong></li><li><strong>Hexo 网站地图</strong></li><li><strong>Hexo 评论系统 gitalk</strong></li><li><strong>常见问题</strong><ol><li><strong>Hexo deploy 报错</strong></li></ol></li></ol><a id="more"></a><h3 id="Hexo-添加Favicon"><a href="#Hexo-添加Favicon" class="headerlink" title="Hexo 添加Favicon"></a>Hexo 添加Favicon</h3><p><strong>根目录_config.yml</strong></p><ul><li>根目录为public的时候,图片放在source下面的img里面就可以，没有的话创建个img文件夹。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">favicon: https://www.xxx.com/img/favicon.ico</span><br></pre></td></tr></table></figure><h3 id="Hexo-添加百度统计"><a href="#Hexo-添加百度统计" class="headerlink" title="Hexo 添加百度统计"></a>Hexo 添加百度统计</h3><ol><li>首先肯定是要去百度统计注册一下了。。<a href="https://tongji.baidu.com/web/" target="_blank" rel="noopener">百度统计</a>注册完成之后生成统计代码，备用。</li><li><p>在<strong>主题配置文件_config.yml</strong>里面添加一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Analytics</span><br><span class="line">cnzz: true</span><br></pre></td></tr></table></figure></li><li><p>找到 <strong>\hexo\themes\pacman\layout_partial</strong>,在这个文件夹中创建一个cnzz.ejs的文件然后将下面内容复制进去，记得替换中间的script</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">&lt;% if (theme.cnzz)&#123; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 将中间这一块script替换成你的统计代码 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var cnzz_protocol = ((&quot;https:&quot; == document.location.protocol) ? &quot; https://&quot;: &quot; http://&quot;);</span><br><span class="line">    document.write(unescape(&quot;%3Cspan id=&apos;cnzz_stat_icon_1000543074&apos;%3E%3C/span%3E%3Cscript src=&apos;&quot; + cnzz_protocol + &quot;s19.cnzz.com/z_stat.php%3Fid%3D1000543074%26show%3Dpic&apos; type=&apos;text/javascript&apos;%3E%3C/script%3E&quot;));</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li><li><p>在 <strong>\hexo\themes\pacman\layout_partial\footer.ejs</strong>中加一行下面的代码，然后就结束了。重启生效就可以了。然后在百度中心检测代码有没有安装成功，生效了就可以看报告了。这个过程需要一定的时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(&apos;cnzz&apos;) %&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Hexo-RSS订阅"><a href="#Hexo-RSS订阅" class="headerlink" title="Hexo RSS订阅"></a>Hexo RSS订阅</h3><ol><li>进入hexo目录</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>根目录_config.yml</strong>中添加</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#RSS订阅</span><br><span class="line">plugin:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">type: atom</span><br><span class="line">path: atom.xml</span><br><span class="line">limit: 20</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>主题目录下_config.yml</strong>中添加<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure></li></ol><h3 id="Hexo-添加看板娘"><a href="#Hexo-添加看板娘" class="headerlink" title="Hexo 添加看板娘"></a>Hexo 添加看板娘</h3><ol><li>进入hexo目录</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>根目录_config.yml</strong>中添加</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#看板娘</span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: false</span><br><span class="line">  log: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko #可选择不同的看板娘名称</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br><span class="line">  react:</span><br><span class="line">    opacity: 0.7</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>可以添加看板娘列表</strong>中添加<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure></li></ol><p>想用哪个就 npm install –save xxx ， 然后在配置文件use: xxx 进行修改就好了。</p><ol start="4"><li><strong>取消看板娘</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>然后去掉配置文件里面的配置就好了</p><h3 id="Hexo-网站地图"><a href="#Hexo-网站地图" class="headerlink" title="Hexo 网站地图"></a>Hexo 网站地图</h3><ol><li><strong>添加sitemap</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save #sitemap.xml适合提交给谷歌搜素引擎</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save #baidusitemap.xml适合提交百度搜索引擎</span><br></pre></td></tr></table></figure><p>然后在站点配置文件_config.yml中添加以下代码</p><ol start="2"><li>自动生成sitemap,在<strong>根目录_config.yml</strong>中添加</li></ol><p>sitemap:<br>    path: sitemap.xml<br>baidusitemap:<br>    path: baidusitemap.xml</p><p>最后修改<strong>根目录_config.yml</strong>中的url</p><p>url: http://你的网站</p><p>然后hexo g, 会在/public目录下生成sitemap.xml和baidusitemap.xml 网站地图。</p><h3 id="Hexo-评论系统-gitalk"><a href="#Hexo-评论系统-gitalk" class="headerlink" title="Hexo 评论系统 gitalk"></a>Hexo 评论系统 gitalk</h3><ol><li><p><strong>创建评论仓库</strong></p><ol><li>首先到<a href="https://github.com/new" target="_blank" rel="noopener">github中创建repository</a>，库名称可以叫XXXtalk，因为这个仓库是用来存储我们的评论内容的。</li><li>创建好之后，进入这个仓库的settings界面找到issues选项，确保它的勾选着的。</li></ol></li><li><p><strong>注册Github Application</strong></p><ol><li>到<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">github中创建Github Application</a>。</li><li>名称和描述可以随意填写，两个URL填写你的博客地址就可以了。注册之后就可以看到Client ID 和 Client Secret。这两个是我们需要的东西。</li></ol></li><li><p><strong>根目录下配置gitalk</strong></p><ol><li><p>将下面的代码赋值到根目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gitalk: </span><br><span class="line">    clientID: 你的clientID </span><br><span class="line">    clientSecret: 你的clientSecret</span><br><span class="line">    repo: 你的repo名 //xxxtalk 刚才我们创建的仓库名</span><br><span class="line">    owner: 你的GitHub名 </span><br><span class="line">    admin: [你的GitHub名称]</span><br></pre></td></tr></table></figure></li><li><p>接下来hexo g 执行之后，你会发现你的文章下面会出现评论了。</p></li></ol></li><li><p><strong>错误处理</strong></p><ol><li>第一次添加gitalk出现了 Error:Validation Failed 这样的错误具体原因是因为Github 限制 labal 长度不能超过 50引起的。 解决办法是使用md5对id进行加密。</li><li><p>解决方案：<br>首先将下面的内容保存为md5.js放在 themes/material-X/source/js/ 下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">! function(n) &#123;</span><br><span class="line">    &quot;use strict&quot;;</span><br><span class="line">    function t(n, t) &#123;</span><br><span class="line">        var r = (65535 &amp; n) + (65535 &amp; t);</span><br><span class="line">        return (n &gt;&gt; 16) + (t &gt;&gt; 16) + (r &gt;&gt; 16) &lt;&lt; 16 | 65535 &amp; r</span><br><span class="line">    &#125;</span><br><span class="line">    function r(n, t) &#123;</span><br><span class="line">        return n &lt;&lt; t | n &gt;&gt;&gt; 32 - t</span><br><span class="line">    &#125;</span><br><span class="line">    function e(n, e, o, u, c, f) &#123;</span><br><span class="line">        return t(r(t(t(e, n), t(u, f)), c), o)</span><br><span class="line">    &#125;</span><br><span class="line">    function o(n, t, r, o, u, c, f) &#123;</span><br><span class="line">        return e(t &amp; r | ~t &amp; o, n, t, u, c, f)</span><br><span class="line">    &#125;</span><br><span class="line">    function u(n, t, r, o, u, c, f) &#123;</span><br><span class="line">        return e(t &amp; o | r &amp; ~o, n, t, u, c, f)</span><br><span class="line">    &#125;</span><br><span class="line">    function c(n, t, r, o, u, c, f) &#123;</span><br><span class="line">        return e(t ^ r ^ o, n, t, u, c, f)</span><br><span class="line">    &#125;</span><br><span class="line">    function f(n, t, r, o, u, c, f) &#123;</span><br><span class="line">        return e(r ^ (t | ~o), n, t, u, c, f)</span><br><span class="line">    &#125;</span><br><span class="line">    function i(n, r) &#123;</span><br><span class="line">        n[r &gt;&gt; 5] |= 128 &lt;&lt; r % 32, n[14 + (r + 64 &gt;&gt;&gt; 9 &lt;&lt; 4)] = r;</span><br><span class="line">        var e, i, a, d, h, l = 1732584193,</span><br><span class="line">            g = -271733879,</span><br><span class="line">            v = -1732584194,</span><br><span class="line">            m = 271733878;</span><br><span class="line">        for (e = 0; e &lt; n.length; e += 16) i = l, a = g, d = v, h = m, g = f(g = f(g = f(g = f(g = c(g = c(g = c(g = c(g = u(g = u(g = u(g = u(g = o(g = o(g = o(g = o(g, v = o(v, m = o(m, l = o(l, g, v, m, n[e], 7, -680876936), g, v, n[e + 1], 12, -389564586), l, g, n[e + 2], 17, 606105819), m, l, n[e + 3], 22, -1044525330), v = o(v, m = o(m, l = o(l, g, v, m, n[e + 4], 7, -176418897), g, v, n[e + 5], 12, 1200080426), l, g, n[e + 6], 17, -1473231341), m, l, n[e + 7], 22, -45705983), v = o(v, m = o(m, l = o(l, g, v, m, n[e + 8], 7, 1770035416), g, v, n[e + 9], 12, -1958414417), l, g, n[e + 10], 17, -42063), m, l, n[e + 11], 22, -1990404162), v = o(v, m = o(m, l = o(l, g, v, m, n[e + 12], 7, 1804603682), g, v, n[e + 13], 12, -40341101), l, g, n[e + 14], 17, -1502002290), m, l, n[e + 15], 22, 1236535329), v = u(v, m = u(m, l = u(l, g, v, m, n[e + 1], 5, -165796510), g, v, n[e + 6], 9, -1069501632), l, g, n[e + 11], 14, 643717713), m, l, n[e], 20, -373897302), v = u(v, m = u(m, l = u(l, g, v, m, n[e + 5], 5, -701558691), g, v, n[e + 10], 9, 38016083), l, g, n[e + 15], 14, -660478335), m, l, n[e + 4], 20, -405537848), v = u(v, m = u(m, l = u(l, g, v, m, n[e + 9], 5, 568446438), g, v, n[e + 14], 9, -1019803690), l, g, n[e + 3], 14, -187363961), m, l, n[e + 8], 20, 1163531501), v = u(v, m = u(m, l = u(l, g, v, m, n[e + 13], 5, -1444681467), g, v, n[e + 2], 9, -51403784), l, g, n[e + 7], 14, 1735328473), m, l, n[e + 12], 20, -1926607734), v = c(v, m = c(m, l = c(l, g, v, m, n[e + 5], 4, -378558), g, v, n[e + 8], 11, -2022574463), l, g, n[e + 11], 16, 1839030562), m, l, n[e + 14], 23, -35309556), v = c(v, m = c(m, l = c(l, g, v, m, n[e + 1], 4, -1530992060), g, v, n[e + 4], 11, 1272893353), l, g, n[e + 7], 16, -155497632), m, l, n[e + 10], 23, -1094730640), v = c(v, m = c(m, l = c(l, g, v, m, n[e + 13], 4, 681279174), g, v, n[e], 11, -358537222), l, g, n[e + 3], 16, -722521979), m, l, n[e + 6], 23, 76029189), v = c(v, m = c(m, l = c(l, g, v, m, n[e + 9], 4, -640364487), g, v, n[e + 12], 11, -421815835), l, g, n[e + 15], 16, 530742520), m, l, n[e + 2], 23, -995338651), v = f(v, m = f(m, l = f(l, g, v, m, n[e], 6, -198630844), g, v, n[e + 7], 10, 1126891415), l, g, n[e + 14], 15, -1416354905), m, l, n[e + 5], 21, -57434055), v = f(v, m = f(m, l = f(l, g, v, m, n[e + 12], 6, 1700485571), g, v, n[e + 3], 10, -1894986606), l, g, n[e + 10], 15, -1051523), m, l, n[e + 1], 21, -2054922799), v = f(v, m = f(m, l = f(l, g, v, m, n[e + 8], 6, 1873313359), g, v, n[e + 15], 10, -30611744), l, g, n[e + 6], 15, -1560198380), m, l, n[e + 13], 21, 1309151649), v = f(v, m = f(m, l = f(l, g, v, m, n[e + 4], 6, -145523070), g, v, n[e + 11], 10, -1120210379), l, g, n[e + 2], 15, 718787259), m, l, n[e + 9], 21, -343485551), l = t(l, i), g = t(g, a), v = t(v, d), m = t(m, h);</span><br><span class="line">        return [l, g, v, m]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function a(n) &#123;</span><br><span class="line">        var t, r = &quot;&quot;,</span><br><span class="line">            e = 32 * n.length;</span><br><span class="line">        for (t = 0; t &lt; e; t += 8) r += String.fromCharCode(n[t &gt;&gt; 5] &gt;&gt;&gt; t % 32 &amp; 255);</span><br><span class="line">        return r</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function d(n) &#123;</span><br><span class="line">        var t, r = [];</span><br><span class="line">        for (r[(n.length &gt;&gt; 2) - 1] = void 0, t = 0; t &lt; r.length; t += 1) r[t] = 0;</span><br><span class="line">        var e = 8 * n.length;</span><br><span class="line">        for (t = 0; t &lt; e; t += 8) r[t &gt;&gt; 5] |= (255 &amp; n.charCodeAt(t / 8)) &lt;&lt; t % 32;</span><br><span class="line">        return r</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function h(n) &#123;</span><br><span class="line">        return a(i(d(n), 8 * n.length))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function l(n, t) &#123;</span><br><span class="line">        var r, e, o = d(n),</span><br><span class="line">            u = [],</span><br><span class="line">            c = [];</span><br><span class="line">        for (u[15] = c[15] = void 0, o.length &gt; 16 &amp;&amp; (o = i(o, 8 * n.length)), r = 0; r &lt; 16; r += 1) u[r] = 909522486 ^ o[r], c[r] = 1549556828 ^ o[r];</span><br><span class="line">        return e = i(u.concat(d(t)), 512 + 8 * t.length), a(i(c.concat(e), 640))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function g(n) &#123;</span><br><span class="line">        var t, r, e = &quot;&quot;;</span><br><span class="line">        for (r = 0; r &lt; n.length; r += 1) t = n.charCodeAt(r), e += &quot;0123456789abcdef&quot;.charAt(t &gt;&gt;&gt; 4 &amp; 15) + &quot;0123456789abcdef&quot;.charAt(15 &amp; t);</span><br><span class="line">        return e</span><br><span class="line">    &#125;</span><br><span class="line">    function v(n) &#123;</span><br><span class="line">        return unescape(encodeURIComponent(n))</span><br><span class="line">    &#125;</span><br><span class="line">    function m(n) &#123;</span><br><span class="line">        return h(v(n))</span><br><span class="line">    &#125;</span><br><span class="line">    function p(n) &#123;</span><br><span class="line">        return g(m(n))</span><br><span class="line">    &#125;</span><br><span class="line">    function s(n, t) &#123;</span><br><span class="line">        return l(v(n), v(t))</span><br><span class="line">    &#125;</span><br><span class="line">    function C(n, t) &#123;</span><br><span class="line">        return g(s(n, t))</span><br><span class="line">    &#125;</span><br><span class="line">    function A(n, t, r) &#123;</span><br><span class="line">        return t ? r ? s(t, n) : C(t, n) : r ? m(n) : p(n)</span><br><span class="line">    &#125;</span><br><span class="line">    &quot;function&quot; == typeof define &amp;&amp; define.amd ? define(function() &#123;</span><br><span class="line">        return A</span><br><span class="line">    &#125;) : &quot;object&quot; == typeof module &amp;&amp; module.exports ? module.exports = A : n.md5 = A</span><br><span class="line">&#125;(this);</span><br></pre></td></tr></table></figure><p> 保存之后，修改主题目录下 layout/_partial/scripts.ejs 138行，修改如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (enableGitalk) &#123; %&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;/js/md5.js&quot;&gt;&lt;/script&gt; // 添加！！！！</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var gitalk = new Gitalk(&#123;</span><br><span class="line">            clientID: &quot;&lt;%- config.gitalk.clientID %&gt;&quot;,</span><br><span class="line">            clientSecret: &quot;&lt;%- config.gitalk.clientSecret %&gt;&quot;,</span><br><span class="line">            repo: &quot;&lt;%- config.gitalk.repo %&gt;&quot;,</span><br><span class="line">            owner: &quot;&lt;%- config.gitalk.owner %&gt;&quot;,</span><br><span class="line">            admin: &quot;&lt;%- config.gitalk.admin %&gt;&quot;,</span><br><span class="line">            &lt;% if(page.gitalk &amp;&amp; page.gitalk.id) &#123; %&gt;</span><br><span class="line">            id: &quot;&lt;%= page.gitalk.id %&gt;&quot;,</span><br><span class="line">            &lt;% &#125; else &#123; %&gt;</span><br><span class="line">            id: md5(location.pathname), // 修改！！！！</span><br><span class="line">            &lt;% &#125; %&gt;</span><br><span class="line">            distractionFreeMode: false // Facebook-like distraction free mode</span><br><span class="line">        &#125;);</span><br><span class="line">        gitalk.render(&apos;gitalk-container&apos;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p> 如上一处添加，一处修改，当然也可以将这块代码完全替换了也可以，然后hexo g 之后问题应该就解决了。</p></li></ol></li></ol><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="Hexo-deploy-报错"><a href="#Hexo-deploy-报错" class="headerlink" title="Hexo deploy 报错"></a>Hexo deploy 报错</h4><p><strong>报错信息一</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">remote: Weak credentials. Please Update your password to continue using GitHub.</span><br><span class="line">remote: See https://help.github.com/articles/creating-a-strong-password/.</span><br><span class="line">fatal: unable to access &apos;https://github.com/xxx/xxx.github.io.git/&apos;: The requested URL returned error: 403</span><br><span class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: Spawn failed</span><br><span class="line">    at ChildProcess.&lt;anonymous&gt; (/opt/hexo/node_modules/_hexo-util@0.6.3@hexo-util/lib/spawn.js:52:19)</span><br><span class="line">    at ChildProcess.emit (events.js:198:13)</span><br><span class="line">    at Process.ChildProcess._handle.onexit (internal/child_process.js:248:12)</span><br></pre></td></tr></table></figure><p><strong>问题描述</strong><br>这种报错是突然出现的，一看就知道是github的问题，大概意思就是说你的密码强度太低。<br>所以造成了连接不上GitHub仓库地址的报错。刚开始还比较迷茫，不知道是哪个密码比较弱了。<br>直到我想添加ssh key的时候，GitHub官网提醒，说我的GitHub密码比较弱，需要修改，否则一个月后自动修改。</p><p>这简直比较狗血，没想到还会影响到git提交。 但是目前只发现会影响hexo deploy的自动部署，账号上的其他clone的仓库不会影响。</p><p><strong>解决办法(linux)</strong></p><ol><li>更改GitHub密码。</li><li><p>重新生成ssh key。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssh-keygen -C &apos;xxx@email.com&apos; -t rsa</span><br></pre></td></tr></table></figure><p> 一路 y 就可以了。</p></li><li><p>将重新生成的key添加到GitHub上。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V-Model</title>
      <link href="/Vue/Vue%EF%BC%9Av-model/"/>
      <url>/Vue/Vue%EF%BC%9Av-model/</url>
      
        <content type="html"><![CDATA[<p>最近学习vue，从最基础的文档看起。到目前基础已经看完。有两个问题很迷茫。</p><ol><li>vue的动态参数（2.6新增）。demo一直报错。分析原因是因为vue不允许动态添加根一级的变量。（不理解）</li><li>组件中v-model的使用文档中说的让我有点绕。不过已经顺过来了，所以来分享一下。</li></ol><a id="more"></a><h2 id="官方给出的例子是这样。-可以直接使用"><a href="#官方给出的例子是这样。-可以直接使用" class="headerlink" title="官方给出的例子是这样。(可以直接使用)"></a>官方给出的例子是这样。(可以直接使用)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HTML:</span><br><span class="line"></span><br><span class="line">&lt;custom-input v-model=&quot;searchText&quot;&gt;&lt;/custom-input&gt;</span><br><span class="line"></span><br><span class="line">JS:</span><br><span class="line">Vue.component(&apos;custom-input&apos;, &#123;</span><br><span class="line">  props: [&apos;value&apos;],</span><br><span class="line">  template: `</span><br><span class="line">    &lt;input</span><br><span class="line">      v-bind:value=&quot;value&quot;</span><br><span class="line">      v-on:input=&quot;$emit(&apos;input&apos;, $event.target.value)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="v-model可以改写为这种形式，两者完全等价。"><a href="#v-model可以改写为这种形式，两者完全等价。" class="headerlink" title="v-model可以改写为这种形式，两者完全等价。"></a>v-model可以改写为这种形式，两者完全等价。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=&quot;searchText&quot;&gt;</span><br><span class="line"></span><br><span class="line">等价于：</span><br><span class="line"></span><br><span class="line">&lt;input</span><br><span class="line">  v-bind:value=&quot;searchText&quot;</span><br><span class="line">  v-on:input=&quot;searchText = $event.target.value&quot;&gt; //（ $event.target.value为事件当前目标上的value值。）</span><br></pre></td></tr></table></figure><p>第二种写法：</p><ol><li>在input上绑定了input事件，通过触发input事件，执行给searchText赋值语句。</li><li>v-bind将searchText赋值给input标签的value属性。</li></ol><p>再看官方的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;custom-input v-model=&quot;searchText&quot;&gt;&lt;/custom-input&gt;</span><br></pre></td></tr></table></figure></p><p>等价于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;custom-input  </span><br><span class="line">v-bind:value=&quot;searchText&quot;</span><br><span class="line">  v-on:input=&quot;searchText = $event&quot;   //$event 为组件内部抛出来的值。（这个如果不明白可以看组件的自定义事件部分）</span><br><span class="line">&gt;&lt;/custom-input&gt;</span><br></pre></td></tr></table></figure></p><p>再加上官方的js写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;custom-input&apos;, &#123;</span><br><span class="line">  props: [&apos;value&apos;],</span><br><span class="line">  template: `</span><br><span class="line">    &lt;input</span><br><span class="line">      v-bind:value=&quot;value&quot;</span><br><span class="line">      v-on:input=&quot;$emit(&apos;input&apos;, $event.target.value)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>我们在组件内的input上监听了input事件，并且用该input事件对组件上的（自定义）input事件进行触发（searchText = $event”）；</li><li>将$  event.target.value作为参数传给     v-on:input=”searchText =  $ event “，$ event === $ event.target.value。执行语句searchText被赋值。</li><li>组件上的v-bind:value = “searchText” 是将searchText的值绑定到组件内部的props里的value上。</li><li>组件内部将props中的value 绑定到input的value上。就这样完成了一次双向绑定。</li></ol><p>而根据官方v-model的两种写法，组件上转换回v-modal的写法。就完成了。最终结果就如开头所示。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_7. 整数反转</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_7.%20%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_7.%20%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:</p><blockquote><p>  输入: 123<br>  输出: 321</p></blockquote><p>示例 2:</p><blockquote><p>  输入: -123<br>  输出: -321<br>示例 3:</p></blockquote><blockquote><p>  输入: 120<br>  输出: 21</p></blockquote><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>题目就是反转，问题在于反转过程中是否溢出。</p><ol><li>先判断正负。</li><li>10位以内直接反转。</li><li>接下来就是10位数字的反转，反转过程中判断是否会溢出。（不能反转后再判断是否溢出，因为环境只能存储32位有符号整数，所以反转之后的如果真的溢出是保存不了的）<h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var max;</span><br><span class="line">var flag;</span><br><span class="line">var reverse = function(x) &#123;</span><br><span class="line">    x &lt; 0 ? (flag = &apos;-&apos;, max = &apos;2147483648&apos;) : (flag = &apos;+&apos;, max = &apos;2147483647&apos;);</span><br><span class="line">    var val = (Math.abs(x) + &apos;&apos;).split(&apos;&apos;);</span><br><span class="line">    if (val.length &lt; 10) &#123; return ((flag + val.reverse().join(&apos;&apos;)) - 0) &#125;</span><br><span class="line">    if (val.length = 10) &#123;</span><br><span class="line">        for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">            if (val[9 - i] &gt; max[i]) &#123;</span><br><span class="line">                return 0;</span><br><span class="line">            &#125; else if (val[9 - i] &lt; max[i]) &#123;</span><br><span class="line">                return ((flag + val.reverse().join(&apos;&apos;)) - 0)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>题目很简单，肯定还是可以优化的，如果有更好的办法可以留言。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_2. 两数相加</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出：7 -&gt; 0 -&gt; 8</span><br><span class="line">原因：342 + 465 = 807</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>题目解析：<br>    该题给出两个链表，求出两个链表各个结点的和，那首先我们需要知道链表是什么样子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * function ListNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.next = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p>如上，链表的每个结点就是这个样子，next指向下一个结点，当然这是在js中简单的实现了链表。</p><p>然后知道了链表，那么就开始各位相加吧~，这个题唯一的难点就是在于各个结点相加的时候可能会产生进位。<br>比如9+2=11，那么就需要进一位，本位取10的余数为值，然后我们就需要在下一个结点相加时把前两位可能产生的进位也算进去。</p><p>如下是我的js解答：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * function ListNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.next = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @param &#123;ListNode&#125; l1</span><br><span class="line"> * @param &#123;ListNode&#125; l2</span><br><span class="line"> * @return &#123;ListNode&#125;</span><br><span class="line"> * y 为进位值</span><br><span class="line"> * i 代表和的位</span><br><span class="line"> * n 代表了和的每一位的值</span><br><span class="line"> * arr 代表和（我们用数组表示更方便一点）</span><br><span class="line"> */</span><br><span class="line">var addTwoNumbers = function(l1, l2) &#123;</span><br><span class="line">    var arr = [], i = 0, n = 0, y = 0;   //初始化</span><br><span class="line">    </span><br><span class="line">    //因为链表不一定同样长的，所以只要有一个链表的结点不为空，我们都需要继续计算；</span><br><span class="line">    //同时我们也要考虑进位，即使两个链表结束了，如果有进位的话，那我们还是需要再计算一次的。</span><br><span class="line">    </span><br><span class="line">    while (l1 !==  null || l2 !== null || y !== 0) &#123;  </span><br><span class="line"></span><br><span class="line">        //判断链表l1的该结点是否为null，如果为null初始化成值为0的结点，方便运算。</span><br><span class="line">        l1 = l1 ? l1 : new ListNode(0); </span><br><span class="line"></span><br><span class="line">         // 同理 l2</span><br><span class="line">        l2 = l2 ? l2 : new ListNode(0);</span><br><span class="line"></span><br><span class="line">         // 计算该位的两个结点的和，同时要加上前两位的进位。</span><br><span class="line">       var num = l1.val + l2.val + y;</span><br><span class="line">       </span><br><span class="line">        // 判断该位是否需要进位，需要进位的话就该位取10的余数，然后进一位（y = 1），反之初始化进位值为0。</span><br><span class="line">        num &gt; 9 ? (y = 1, n = num - 10) : (n = num, y = 0); </span><br><span class="line">        </span><br><span class="line">        arr[i] = n; //给和的每一位赋值</span><br><span class="line">        </span><br><span class="line">        i++; //进入下一次循环</span><br><span class="line">        </span><br><span class="line">        l1 = l1.next;  // 进入l1下一个结点</span><br><span class="line">        </span><br><span class="line">        l2 = l2.next; // 进入l2下一个结点</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //这里反转一下，原本是[7, 0, 8]反转为[8, 0, 7],方便后面生成链表。</span><br><span class="line">    arr = arr.reverse(); </span><br><span class="line"></span><br><span class="line">    //取第一个值创建第一个结点（也是最终链表的最后一个结点）</span><br><span class="line">    let listNode = new ListNode(arr.shift()) //取第一个值创建第一个结点（也是最终链表的最后一个结点）</span><br><span class="line">    </span><br><span class="line">    return arr.reduce((ori,cur)=&gt;&#123;</span><br><span class="line">    </span><br><span class="line">        let ln = new ListNode(cur) //生成当前结点</span><br><span class="line">    </span><br><span class="line">        ln.next = ori //将当前结点的next指向之前生成的链表的第一个结点</span><br><span class="line">    </span><br><span class="line">        return ln //返回新的链表（赋值给了 ori ）</span><br><span class="line">    </span><br><span class="line">    &#125;, listNode)</span><br><span class="line">    // listNode是初始值。</span><br><span class="line">    // 即链表末端的第一个值，我们之所以从最后一个开始创建链表也是因为方便。</span><br><span class="line">    // 因为我们要操作结点的next，所以用新结点的next指向原来的链表，要比找到链表的最后一个结点的next指向新结点要方便一些。</span><br><span class="line">    // 即从后往前生成链。</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：完全背包问题</title>
      <link href="/Algorithm/JavaScript%EF%BC%9A%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>/Algorithm/JavaScript%EF%BC%9A%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>这里借用一个题目的描述来说明要解决问题的背景。</p></blockquote><p>LiYuxiang是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同种类的草药，采每一种都需要一些时间，每一种也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”</p><p>如果你是LiYuxiang，你能完成这个任务吗？</p><p>此题和原题的不同点：</p><p>1.每种草药可以无限制地疯狂采摘。</p><p>2.药的种类眼花缭乱，采药时间好长好长啊！师傅等得菊花都谢了！</p><h2 id="一、-什么是背包算法"><a href="#一、-什么是背包算法" class="headerlink" title="一、 什么是背包算法"></a>一、 什么是背包算法</h2><p>背包算法的基础标准描述为：当前有N件商品，每件商品都有不同的价值v和重量w。我们要把这些商品放在容量为L的背包中，实现背包中的价值最大化。（第i件商品的价值为v[i]，重量为w[i])。上面的题目中的条件之一：草药无限（每件商品可以重复放入背包）即表明了该问题是完全背包问题。</p><a id="more"></a><h2 id="二、-背包算法的应用"><a href="#二、-背包算法的应用" class="headerlink" title="二、 背包算法的应用"></a>二、 背包算法的应用</h2><p>背包算法在我看来是一种“性价比”算法。即我们在有限的条件下得到最大的收获。例如曾经有个节目可以让嘉宾在有限的时间内选购满满购物车的货品。这个场景及其符合背包算法。或者例如我们在考试的时侯，都会尽可能的选择简单并且分数又多的题先做。同时我们也可以应用到其他问题上去。比如在选择购买多种原材料时，尽可能的缩小原材料成本。投资时对多种投资产品的选择组合。</p><h2 id="三、-背包算法的原理"><a href="#三、-背包算法的原理" class="headerlink" title="三、 背包算法的原理"></a>三、 背包算法的原理</h2><p>背包问题需要用到动态规划算法。当我们装一个商品的时侯需要判断几个条件：</p><ol><li>该商品的重量和背包大小的关系。如果背包的总容量小于商品的重量，那就GG，根本不用考虑了。</li><li>商品的重量小于背包剩余容量。即背包中之前装入的商品不需要拿出来就可以把当前商品装下，那也不用考虑，直接装就好了。</li><li>商品的重量小于背包总容量，但是剩余空间不够装了。那我们就需要考虑衡量一下，拿出来原有的一部分商品，装入现在的商品是不是划算的。</li></ol><p>从上面的三个条件可以看出最重要的就是第三条，我们需要判断价值。假设我们背包可以装<strong>8kg</strong>东西，现在有三个商品（商品都是以袋为单位销售不可拆分）：</p><table><thead><tr><th style="text-align:center">苹果</th><th style="text-align:center">香蕉</th><th>草莓</th></tr></thead><tbody><tr><td style="text-align:center">3kg</td><td style="text-align:center">2kg</td><td>5kg</td></tr><tr><td style="text-align:center">￥45</td><td style="text-align:center">￥20</td><td>￥150</td></tr></tbody></table><p>我们以1kg为单位打表:<br>第一次打表</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">0kg</th><th style="text-align:center">1kg</th><th style="text-align:center">2kg</th><th style="text-align:center">3kg</th><th style="text-align:center">4kg</th><th style="text-align:center">5kg</th><th style="text-align:center">6kg</th><th style="text-align:center">7kg</th><th style="text-align:center">8kg</th></tr></thead><tbody><tr><td style="text-align:center">无</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">苹果</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td></tr><tr><td style="text-align:center">香蕉</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">草莓</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table><p>第二次打表</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">0kg</th><th style="text-align:center">1kg</th><th style="text-align:center">2kg</th><th style="text-align:center">3kg</th><th style="text-align:center">4kg</th><th style="text-align:center">5kg</th><th style="text-align:center">6kg</th><th style="text-align:center">7kg</th><th style="text-align:center">8kg</th></tr></thead><tbody><tr><td style="text-align:center">无</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">苹果</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td></tr><tr><td style="text-align:center">香蕉</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">￥20</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥65</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td><td style="text-align:center">￥110</td></tr><tr><td style="text-align:center">草莓</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table><p>最终打表结果：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">0kg</th><th style="text-align:center">1kg</th><th style="text-align:center">2kg</th><th style="text-align:center">3kg</th><th style="text-align:center">4kg</th><th style="text-align:center">5kg</th><th style="text-align:center">6kg</th><th style="text-align:center">7kg</th><th style="text-align:center">8kg</th></tr></thead><tbody><tr><td style="text-align:center">无</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">苹果</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td></tr><tr><td style="text-align:center">香蕉</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">￥20</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥65</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td><td style="text-align:center">￥110</td></tr><tr><td style="text-align:center">草莓</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">￥20</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥150</td><td style="text-align:center">￥150</td><td style="text-align:center">￥170</td><td style="text-align:center">￥195</td></tr></tbody></table><p>如表我们的最终排列结果。</p><p>核心判断为：<code>bag[i-1][j]</code> 和<code>bag[i-1][j-k*w[i]] + k*v[i]</code> 的价值哪个大。<br>我来说明上面的变量都代表了什么：</p><ul><li><code>bag[i][j]</code> 代表了我们在看到第i个商品时，背包容量占用了<code>jkg</code>时，背包内物品的价值。</li><li>那么<code>bag[i-1][j]</code> 就代表了我们在看到第i-1个商品时，背包容量占用了<code>jkg</code>时，背包内装的价值。</li><li><code>v[i]</code>代表了当前商品的价值，<code>k*v[i]</code>代表了<code>k</code>个<code>v[i]</code>的价值（商品不限量）。</li><li><code>w[i]</code>代表了当前商品的重量，<code>k*w[i]</code>代表了<code>k</code>个<code>w[i]</code>的重量。</li><li><code>bag[i-1][j-k*w[i]]</code>就代表了上一个情况下，背包装了k个i商品时，余下空间在上一状态的最大价值。</li></ul><p>所以，我们的核心判断种需要 上一个情况下的背包的所有状态。当我们把背包中 <code>k*w[i]</code>的空间腾出来用来装k个i商品，加上剩余空间可以装的商品的最大价值。如果它<strong>小于</strong>上一个状态下<code>bag[i-1][j]</code>所装货品的价值，那么我们就没必要替换这部分空间了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//两个循环</span><br><span class="line">for (3) //3个商品</span><br><span class="line">for (8) // 8种占用空间的情况（1kg-8kg）</span><br><span class="line"></span><br><span class="line">// 核心判断</span><br><span class="line">if (bag[i-1][j] &gt; bag[i-1][j-k*w[i]] + k*v[i]) &#123;</span><br><span class="line">bag[i][j] = bag[i-1][j];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">bag[i][j] = bag[i-1][j-k*w[i]] + k*v[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实回到生活上，我们的想法跟这个是一样的，当我们有个背包要装满的时侯，我们先看到了苹果，那么当然的，我们要尽可能多的把苹果装到包包里。如果有剩余空间装不下那也只能浪费着。然后我们发现了香蕉，我们会开始想着怎么用香蕉代替一部分苹果把空间填满。在这个思考的过程中，我们会一直比较什么样的组合价值最大。草莓也是一样。</p><p>其实如开头所说，我说这是“性价比”。上面我们商品出现的顺序是随机的。其实我们装东西判断价值，其实就是装性价比最高的物品。 不过同时需要考虑到空间的利用率。如果我们事先把性价比高的物品排在前面，那么效率会提高不少。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 对象数组查找某一个对象 findIndex</title>
      <link href="/JavaScript/ES6%20%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E6%9F%A5%E6%89%BE%E6%9F%90%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%20findIndex/"/>
      <url>/JavaScript/ES6%20%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E6%9F%A5%E6%89%BE%E6%9F%90%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%20findIndex/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 查找数组特定元素需要用到的方法就是<strong>findIndex()</strong>。</p></blockquote><h2 id="用法与定义"><a href="#用法与定义" class="headerlink" title="用法与定义"></a>用法与定义</h2><ul><li>findIndex() 方法返回传入一个测试<strong>条件</strong>（函数）符合条件的数组<strong>第一个</strong>元素位置。</li><li>findIndex() 方法为数组中的每个元素都调用一次函数执行：<br>  当数组中的元素在测试条件时返回 true 时, findIndex() 返回<strong>符合条件</strong>的元素的<strong>索引位置</strong>，<em>之后的值不会再调用    执行函数。</em><br>如果没有符合条件的元素返回 <strong>-1</strong></li></ul><a id="more"></a><p>以上是比较官方的对于findIndex()的定义</p><hr><p><strong>接下来我结合实例来进行自己的解释.</strong></p><ol><li>第一条的意思如下:<br>当条件函数返回<strong>true</strong>的时候，findindex会跳出，然后返回当前元素的下标。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//首先是普通数组</span><br><span class="line"></span><br><span class="line">var dataArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];</span><br><span class="line"></span><br><span class="line">function fn(num, numIndex, nums)&#123;</span><br><span class="line">//该函数的三个参数，num代表当前项，numIndex代表当前项下标，nums代表该数组。</span><br><span class="line">return num &gt; 5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dataArr.findIndex(fn);//值为5(即6的下标)</span><br><span class="line"></span><br><span class="line">------------------------分割线-----------------------------</span><br><span class="line"></span><br><span class="line">//同样的假如你的数组是个对象数组：</span><br><span class="line">var objArr = [&#123;</span><br><span class="line">name: &apos;小王&apos;,</span><br><span class="line">age: 14</span><br><span class="line">&#125;,&#123;</span><br><span class="line">name: &apos;大王&apos;,</span><br><span class="line">age: 41</span><br><span class="line">&#125;,&#123;</span><br><span class="line">name: &apos;老王&apos;,</span><br><span class="line">age: 61</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line">function objFn(obj, objIndex, objs)&#123;</span><br><span class="line">return num.age &gt; 20;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">objArr .findIndex(objFn);//值为1(即大王的下标)</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>第二条的意思就更好理解了，因为findindex只返回第一个符合条件的元素下标，所以在找到第一个符合条件的元素之后，他会跳出该函数，之后的数组内的元素将不再调用，相当于加了个break；</li></ol><p><strong>实际用法举例</strong></p><p>假如我们要在所有人里面挑选队友，但是不想重复。在我们通过id查找的时候，就可以这么写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var allPeple = [&#123;</span><br><span class="line">name: &apos;小王&apos;,</span><br><span class="line">id: 14</span><br><span class="line">&#125;,&#123;</span><br><span class="line">name: &apos;大王&apos;,</span><br><span class="line">id: 41</span><br><span class="line">&#125;,&#123;</span><br><span class="line">name: &apos;老王&apos;,</span><br><span class="line">id: 61</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line">var myTeamArr = [&#123;</span><br><span class="line">name: &apos;小王&apos;,</span><br><span class="line">id: 14</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line">var PId = 14; //假如这个是要添加的人的ID</span><br><span class="line"></span><br><span class="line">function pFn(p)&#123;return p.id == PId ;&#125;</span><br><span class="line"></span><br><span class="line">//判断myteam里是不是有这个队员，如果==-1 代表没有，在allPeople中找到他，添加入我的队伍</span><br><span class="line"></span><br><span class="line">myTeamArr.findIndex(pFn) == -1 ? myTeamArr.push(allPeple.find(pFn)) : alert(&apos;已存在该人员&apos;);</span><br><span class="line"></span><br><span class="line">//这样写可以将两个for循环直接总结成一行代码</span><br></pre></td></tr></table></figure></p><p><strong>另外需要补充的一点</strong></p><blockquote><p>与其相对应的有<strong>find</strong>()函数，用法一致，只不过返回的是<strong>元素本身</strong>，而不是元素的下标。</p></blockquote><p><strong>兼容性</strong></p><blockquote><p>因为是es6的所以使用的时候要注意兼容性问题，<strong>ie11</strong>及之前的版本都<strong>不可兼容。</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：call，apply，bind的区别及实现</title>
      <link href="/JavaScript/JavaScript%EF%BC%9Acall%EF%BC%8Capply%EF%BC%8Cbind%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
      <url>/JavaScript/JavaScript%EF%BC%9Acall%EF%BC%8Capply%EF%BC%8Cbind%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>call，apply，bind的区别<br>这三个函数的左右都是为了指定当前的this。</p></blockquote><p>不同点：</p><ol><li>call，apply 两者都是对函数的直接调用，bind的返回值仍然是一个函数。<br>  举例：<code>a.call(b)  或者  a.apply(b)   而bind需要 a.bind(b)()这样才能执行</code></li><li>call和apply的传参方式不同，第一个值都是this的指向，第二个举例</li></ol><a id="more"></a>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a.call(b, 参数1，参数2，参数3)</span><br><span class="line">a.apply(b, [参数1，参数2，参数3])</span><br><span class="line"></span><br><span class="line">//同样的bind的传参方式和call相同，但又因为bind返回的是函数，所以我们可以像正常函数传参一样</span><br><span class="line"></span><br><span class="line">a.bind(b)(参数1，参数2，参数3)</span><br></pre></td></tr></table></figure><p>以上就是三者的差别。</p><p>接下来我们实现他们的功能函数。</p><ol><li><p>call：</p><blockquote><p>call的传入参数是（ctx,…[]）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.mycall = funciton (ctx) &#123;</span><br><span class="line">if (typeof this != &quot;function&quot;) &#123;</span><br><span class="line">throw new TypeError(&apos;error&apos;);</span><br><span class="line">&#125;</span><br><span class="line">ctx = ctx || window;</span><br><span class="line">ctx.fn = this;</span><br><span class="line">var args = ...arguments.splice(1);</span><br><span class="line">var result = ctx.fn(args);</span><br><span class="line">delete ctx.fn;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>apply:</p><blockquote><p>apply的传入参数跟call不同，第二个参数是数组。</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.myapply = funciton (ctx) &#123;</span><br><span class="line">if (typeof this != &apos;function&apos;) &#123;</span><br><span class="line">throw new TypeError(&apos;error&apos;);</span><br><span class="line">&#125;</span><br><span class="line">ctx = ctx || window;</span><br><span class="line">ctx.fn = this;</span><br><span class="line">var result;</span><br><span class="line">if (arguments[1]) &#123;</span><br><span class="line">result = ctx.fn(arguments[1]);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">result = ctx.fn();</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>bind 返回的是个函数<blockquote><p>bind 返回的是个函数，同样可以执行传参 ，我们可以用myapply实现</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Funtion.prototype.myBind = function(ctx,...args1)&#123;</span><br><span class="line">return (...args2) =&gt; &#123;</span><br><span class="line">this.myapply(ctx, args1.concat(args2))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS：Opacity引发的元素层级变化</title>
      <link href="/Css/CSS%EF%BC%9AOpcity%E5%BC%95%E5%8F%91%E7%9A%84%E5%85%83%E7%B4%A0%E5%B1%82%E7%BA%A7%E5%8F%98%E5%8C%96/"/>
      <url>/Css/CSS%EF%BC%9AOpcity%E5%BC%95%E5%8F%91%E7%9A%84%E5%85%83%E7%B4%A0%E5%B1%82%E7%BA%A7%E5%8F%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p> 发现这个问题是在图片上定位了一个删除按钮，当我用opacity属性对图片进行透明化处理的时候，发现删除按钮不管用了，最后发现删除按钮是被图片覆盖了，究其原因是因为opacity这个属性造成的层级变化。</p></blockquote><ol><li>我发现含有opacity属性的元素层级会比其他元素的层级高，这时候z-index是不起作用的，opacity会一直高于其他元素的层级。</li><li>给其他元素加上position属性，会使该元素跟opacity处在同一层级之上，这时候你再给元素附加z-index就可以起作用了。</li></ol><a id="more"></a><h3 id="总结和解决方案"><a href="#总结和解决方案" class="headerlink" title="总结和解决方案"></a>总结和解决方案</h3><ul><li><p>总结：当你使用opacity的时候会对元素层级造成影响</p></li><li><p>解决办法：加上position和z-index可以对opacity元素进行覆盖</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: red;</span><br><span class="line">            color: #fff;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">        .box1&#123;</span><br><span class="line">            opacity: 0.8;</span><br><span class="line">        &#125;</span><br><span class="line">        .box2&#123;</span><br><span class="line">            background-color: blue;</span><br><span class="line">            margin-left: 30px;</span><br><span class="line">            margin-top: -160px;</span><br><span class="line">            position: relative;</span><br><span class="line">            z-index: 100;</span><br><span class="line">        &#125;</span><br><span class="line">        .box3&#123;</span><br><span class="line">            background-color: green;</span><br><span class="line">            margin-left: 60px;</span><br><span class="line">            margin-top: -160px;</span><br><span class="line">            opacity: 0.7;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>如上：box2的层级是最高的。</p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux压缩命令常用：tar，tgz，gzip，zip</title>
      <link href="/Linux/linux%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4%E5%B8%B8%E7%94%A8%EF%BC%9Atar%EF%BC%8Ctgz%EF%BC%8Cgzip%EF%BC%8Czip/"/>
      <url>/Linux/linux%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4%E5%B8%B8%E7%94%A8%EF%BC%9Atar%EF%BC%8Ctgz%EF%BC%8Cgzip%EF%BC%8Czip/</url>
      
        <content type="html"><![CDATA[<p>linux压缩命令常用的有三个：tar，tgz，gzip，zip</p><a id="more"></a><h2 id="一，tar"><a href="#一，tar" class="headerlink" title="一，tar"></a>一，tar</h2><p>（一） tar压缩命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf examples.tar files|dir</span><br><span class="line">#说明：</span><br><span class="line">-c, --create  create a new archive 创建一个归档文件</span><br><span class="line">-v, --verbose verbosely list files processed 显示创建归档文件的进程</span><br><span class="line">-f, --file=ARCHIVE use archive file or device ARCHIVE  后面要立刻接被处理的档案名,比如--file=examples.tar</span><br><span class="line"></span><br><span class="line">#举例：</span><br><span class="line">tar -cvf file.tar file1       #file1文件</span><br><span class="line">tar -cvf file.tar file1 file2 #file1，file2文件</span><br><span class="line">tar -cvf file.tar dir         #dir目录</span><br></pre></td></tr></table></figure><p>（二） tar 解压命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf examples.tar （解压至当前目录下）</span><br><span class="line">tar -xvf examples.tar  -C /path (/path 解压至其它路径)</span><br><span class="line"></span><br><span class="line">#说明：</span><br><span class="line">-x, --extract, extract files from an archive 从一个归档文件中提取文件</span><br><span class="line"></span><br><span class="line">#举例：</span><br><span class="line">tar -xvf file.tar</span><br><span class="line">tar -xvf file.tar -C /temp  #解压到temp目录下</span><br></pre></td></tr></table></figure><h2 id="二，tgz"><a href="#二，tgz" class="headerlink" title="二，tgz"></a>二，tgz</h2><p>（一） tgz压缩命令（tar.gz,tgz格式是相同的，命名不同而已）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf examples.tgz examples (examples当前执行路径下的目录)</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">-z, --gzip filter the archive through gzip 通过gzip压缩的形式对文件进行归档</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line">tar -zcvf file.tgz dir #dir目录</span><br></pre></td></tr></table></figure><p>（二） tgz 解压命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf examples.tar （解压至当前执行目录下）</span><br><span class="line">tar -zxvf examples.tar  -C /path (/path 解压至其它路径)</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line">tar -zcvf file.tgz</span><br><span class="line">tar -zcvf file.tgz -C /temp</span><br></pre></td></tr></table></figure><h2 id="三，gzip"><a href="#三，gzip" class="headerlink" title="三，gzip"></a>三，gzip</h2><p>（一）gzip压缩：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -d examples.gz examples</span><br></pre></td></tr></table></figure><p>（二）gzip解压：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunzip examples.gz</span><br></pre></td></tr></table></figure><h2 id="四，zip"><a href="#四，zip" class="headerlink" title="四，zip"></a>四，zip</h2><blockquote><p>zip 格式是开放且免费的，所以广泛使用在 Windows、Linux、MacOS 平台，要说 zip<br>有什么缺点的话，就是它的压缩率并不是很高，不如 rar及 tar.gz 等格式。</p></blockquote><p>压缩：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r examples.zip examples (examples为目录)</span><br></pre></td></tr></table></figure><p>解压：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip examples.zip</span><br></pre></td></tr></table></figure><h2 id="六-rar"><a href="#六-rar" class="headerlink" title="六 .rar"></a>六 .rar</h2><p>压缩：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rar -a examples.rar examples</span><br></pre></td></tr></table></figure><p>解压：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rar -x examples.rar</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Css3 + Js：有趣的图片马赛克~ (高斯模糊)</title>
      <link href="/Css/CSS3%20+%20JavaScript%EF%BC%9A%E6%9C%89%E8%B6%A3%E7%9A%84%E5%9B%BE%E7%89%87%E9%A9%AC%E8%B5%9B%E5%85%8B~%20(%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A)/"/>
      <url>/Css/CSS3%20+%20JavaScript%EF%BC%9A%E6%9C%89%E8%B6%A3%E7%9A%84%E5%9B%BE%E7%89%87%E9%A9%AC%E8%B5%9B%E5%85%8B~%20(%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A)/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 前两篇文介绍了css3的过滤器filter用来实现图片的高斯模糊效果，还有js拖拽的功能。<br> 要实现局部模糊就要把两者结合起来，计算位移就可以了。</p></blockquote><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a><strong>实现原理</strong></h3><blockquote><p>原理其实很简单，就是两张图的叠加。底部一张<strong>清晰</strong>的图，上面一个<strong>高斯模糊</strong>过的图，将<strong>高斯模糊</strong>的图当作上层元素的背景，利用背景定位使其只显示一部分，然后把这个高斯模糊的窗口放置在高清图的上层，背景图片的位置与下面的图片位置一致，这样看起来就像一张高清的图片打上了马赛克一样。讲起来不是很清楚，大家可以看一下代码。</p></blockquote><a id="more"></a><h2 id="基础版本"><a href="#基础版本" class="headerlink" title="基础版本"></a>基础版本</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    #css_box &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 500px;</span><br><span class="line">        background: url(&apos;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1567844929804&amp;di=75928af77a3db7ff54cd4eab49361bc0&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fblog%2F201307%2F19%2F20130719082039_k2NHG.jpeg&apos;) no-repeat;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #css_target &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 0px;</span><br><span class="line">        top: 0px;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background: inherit;</span><br><span class="line">        filter: blur(10px);</span><br><span class="line">        /* 继承父元素的background属性 */</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;demo post white-box article-type-post&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;css_box&quot;&gt;</span><br><span class="line">        &lt;div id=&quot;css_target&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var bar = document.getElementById(&quot;css_box&quot;);</span><br><span class="line">    var target = document.getElementById(&quot;css_target&quot;);</span><br><span class="line"></span><br><span class="line">    startDrag(bar, target, function(x, y) &#123;</span><br><span class="line">        target.style.backgroundPosition = (-1 * x) + &quot;px &quot; + (-1 * y) + &quot;px&quot;;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="JS-当作JS文件引入"><a href="#JS-当作JS文件引入" class="headerlink" title="JS (当作JS文件引入)"></a>JS (当作JS文件引入)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">var getCss = function(o, key) &#123;</span><br><span class="line">    return o.currentStyle ? o.currentStyle[key] : document.defaultView.getComputedStyle(o, false)[key];</span><br><span class="line">&#125;;</span><br><span class="line">// 拖拽</span><br><span class="line">var startDrag = function(bar, target, callback) &#123;</span><br><span class="line">    maxX = parseInt(getCss(bar, &quot;width&quot;)) - parseInt(getCss(target, &quot;width&quot;));</span><br><span class="line">    maxY = parseInt(getCss(bar, &quot;height&quot;)) - parseInt(getCss(target, &quot;height&quot;));</span><br><span class="line">    var resX = 0,</span><br><span class="line">        resY = 0;</span><br><span class="line">    var params = &#123;</span><br><span class="line">        left: 0,</span><br><span class="line">        top: 0,</span><br><span class="line">        currentX: 0,</span><br><span class="line">        currentY: 0,</span><br><span class="line">        flag: false</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    if (getCss(target, &quot;left&quot;) !== &quot;auto&quot;) &#123;</span><br><span class="line">        params.left = getCss(target, &quot;left&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (getCss(target, &quot;top&quot;) !== &quot;auto&quot;) &#123;</span><br><span class="line">        params.top = getCss(target, &quot;top&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    target.onmousedown = function(event) &#123;</span><br><span class="line">        params.flag = true;</span><br><span class="line">        if (!event) &#123;</span><br><span class="line">            event = window.event;</span><br><span class="line">            bar.onselectstart = function() &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        var e = event;</span><br><span class="line">        params.currentX = e.clientX;</span><br><span class="line">        params.currentY = e.clientY;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    document.onmouseup = function() &#123;</span><br><span class="line">        params.flag = false;</span><br><span class="line">        if (getCss(target, &quot;left&quot;) !== &quot;auto&quot;) &#123;</span><br><span class="line">            params.left = getCss(target, &quot;left&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (getCss(target, &quot;top&quot;) !== &quot;auto&quot;) &#123;</span><br><span class="line">            params.top = getCss(target, &quot;top&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    document.onmousemove = function(event) &#123;</span><br><span class="line">        var e = event ? event : window.event;</span><br><span class="line">        if (params.flag) &#123;</span><br><span class="line">            var nowX = e.clientX,</span><br><span class="line">                nowY = e.clientY;</span><br><span class="line"></span><br><span class="line">            var disX = nowX - params.currentX,</span><br><span class="line">                disY = nowY - params.currentY;</span><br><span class="line">            if ((parseInt(params.left) + disX) &gt; maxX) &#123;</span><br><span class="line">                resX = maxX;</span><br><span class="line">            &#125; else if ((parseInt(params.left) + disX) &lt; 0) &#123;</span><br><span class="line">                resX = 0;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                resX = parseInt(params.left) + disX;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if ((parseInt(params.top) + disY) &gt; maxY) &#123;</span><br><span class="line">                resY = maxY;</span><br><span class="line">            &#125; else if ((parseInt(params.top) + disY) &lt; 0) &#123;</span><br><span class="line">                resY = 0;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                resY = parseInt(params.top) + disY;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            target.style.left = resX + &apos;px&apos;</span><br><span class="line"></span><br><span class="line">            target.style.top = resY + &apos;px&apos;</span><br><span class="line"></span><br><span class="line">            if (typeof callback == &quot;function&quot;) &#123;</span><br><span class="line">                callback(resX, resY);</span><br><span class="line">            &#125;</span><br><span class="line">            if (event.preventDefault) &#123;</span><br><span class="line">                event.preventDefault();</span><br><span class="line">            &#125;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="兼容移动端优化版本"><a href="#兼容移动端优化版本" class="headerlink" title="兼容移动端优化版本"></a>兼容移动端优化版本</h2><h3 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    #css_box &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        touch-action: none;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 500px;</span><br><span class="line">        background: url(&apos;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1567844929804&amp;di=75928af77a3db7ff54cd4eab49361bc0&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fblog%2F201307%2F19%2F20130719082039_k2NHG.jpeg&apos;) no-repeat;</span><br><span class="line">        background-size: contain;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #css_target &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 0px;</span><br><span class="line">        top: 0px;</span><br><span class="line">        background: inherit;</span><br><span class="line">        filter: blur(10px);</span><br><span class="line">        touch-action: none;</span><br><span class="line">        /* 继承父元素的background属性 */</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;demo post white-box article-type-post&quot;&gt;</span><br><span class="line">    &lt;h2 class=&quot;title&quot;&gt;mosaic Demo &lt;a style=&quot;color: #bd4117;&quot; href=&quot;https://www.zsfmyz.top/Css/Css3%20+%20Js%EF%BC%9A%E5%9B%BE%E7%89%87%E7%9A%84%E5%B1%80%E9%83%A8%E6%A8%A1%E7%B3%8A%EF%BC%88%E9%A9%AC%E8%B5%9B%E5%85%8B%EF%BC%89/&quot;&gt;传送门&lt;/a&gt;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id=&quot;css_box&quot;&gt;</span><br><span class="line">        &lt;div id=&quot;css_target&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;p id=&quot;position_img&quot;&gt;X: 0 px Y: 0 px&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"> $(document).ready(function() &#123;</span><br><span class="line">    var bar = document.getElementById(&quot;css_box&quot;);</span><br><span class="line">    var target = document.getElementById(&quot;css_target&quot;);</span><br><span class="line">    var p_img = document.getElementById(&quot;position_img&quot;);</span><br><span class="line"></span><br><span class="line">    // 兼容分辨率</span><br><span class="line">    bar.style.height = (parseInt(getCss(bar, &quot;width&quot;)) * 636 / 900) + &apos;px&apos;;</span><br><span class="line">    target.style.backgroundSize = parseInt(getCss(bar, &quot;width&quot;)) + &apos;px &apos; + (parseInt(getCss(bar, &quot;width&quot;)) * 636 / 900) + &apos;px&apos;;</span><br><span class="line"></span><br><span class="line">    startDrag(bar, target, function(x, y) &#123;</span><br><span class="line">        target.style.backgroundPosition = (-1 * x) + &quot;px &quot; + (-1 * y) + &quot;px&quot;;</span><br><span class="line">        p_img.innerText = &quot;X: &quot; + target.style.left + &quot; Y: &quot; + target.style.top; </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="JS-当作JS文件引入-1"><a href="#JS-当作JS文件引入-1" class="headerlink" title="JS (当作JS文件引入)"></a>JS (当作JS文件引入)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/jquery@3.3.1/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">        // 拖拽</span><br><span class="line">        var startDrag = function(bar, target, callback) &#123;</span><br><span class="line">            var getCss = function(o, key) &#123;</span><br><span class="line">                return o.currentStyle ? o.currentStyle[key] : document.defaultView.getComputedStyle(o, false)[key];</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            var down = function(event) &#123;</span><br><span class="line">                // 兼容分辨率</span><br><span class="line">                bar.style.height = (parseInt(getCss(bar, &quot;width&quot;)) * 636 / 900) + &apos;px&apos;;</span><br><span class="line">                target.style.backgroundSize = parseInt(getCss(bar, &quot;width&quot;)) + &apos;px &apos; + (parseInt(getCss(bar, &quot;width&quot;)) * 636 / 900) + &apos;px&apos;;</span><br><span class="line"></span><br><span class="line">                params.flag = true;</span><br><span class="line">                if (!event) &#123;</span><br><span class="line">                    event = window.event;</span><br><span class="line">                    bar.onselectstart = function() &#123;</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                var e = event;</span><br><span class="line">                params.currentX = e.clientX || e.changedTouches[0].clientX;</span><br><span class="line">                params.currentY = e.clientY || e.changedTouches[0].clientY;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            var up = function() &#123;</span><br><span class="line">                params.flag = false;</span><br><span class="line">                if (getCss(target, &quot;left&quot;) !== &quot;auto&quot;) &#123;</span><br><span class="line">                    params.left = getCss(target, &quot;left&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                if (getCss(target, &quot;top&quot;) !== &quot;auto&quot;) &#123;</span><br><span class="line">                    params.top = getCss(target, &quot;top&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            var move = function(event) &#123;</span><br><span class="line">                var e = event ? event : window.event;</span><br><span class="line">                if (params.flag) &#123;</span><br><span class="line">                    var nowX = e.clientX || e.changedTouches[0].clientX,</span><br><span class="line">                        nowY = e.clientY || e.changedTouches[0].clientY;</span><br><span class="line">                    var disX = nowX - params.currentX,</span><br><span class="line">                        disY = nowY - params.currentY;</span><br><span class="line">                    if ((parseInt(params.left) + disX) &gt; maxX) &#123;</span><br><span class="line">                        resX = maxX;</span><br><span class="line">                    &#125; else if ((parseInt(params.left) + disX) &lt; 0) &#123;</span><br><span class="line">                        resX = 0;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        resX = parseInt(params.left) + disX;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if ((parseInt(params.top) + disY) &gt; maxY) &#123;</span><br><span class="line">                        resY = maxY;</span><br><span class="line">                    &#125; else if ((parseInt(params.top) + disY) &lt; 0) &#123;</span><br><span class="line">                        resY = 0;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        resY = parseInt(params.top) + disY;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    target.style.left = resX + &apos;px&apos;</span><br><span class="line"></span><br><span class="line">                    target.style.top = resY + &apos;px&apos;</span><br><span class="line"></span><br><span class="line">                    if (typeof callback == &quot;function&quot;) &#123;</span><br><span class="line">                        callback(resX, resY);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (event.preventDefault) &#123;</span><br><span class="line">                        event.preventDefault();</span><br><span class="line">                    &#125;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var resX = 0,</span><br><span class="line">                resY = 0;</span><br><span class="line">            var params = &#123;</span><br><span class="line">                left: 0,</span><br><span class="line">                top: 0,</span><br><span class="line">                currentX: 0,</span><br><span class="line">                currentY: 0,</span><br><span class="line">                flag: false</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            if (getCss(target, &quot;left&quot;) !== &quot;auto&quot;) &#123;</span><br><span class="line">                params.left = getCss(target, &quot;left&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (getCss(target, &quot;top&quot;) !== &quot;auto&quot;) &#123;</span><br><span class="line">                params.top = getCss(target, &quot;top&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if ((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) &#123;</span><br><span class="line">                console.log(&quot;mobile&quot;);</span><br><span class="line">                target.style.width = &apos;100px&apos;;</span><br><span class="line">                target.style.height = &apos;100px&apos;;</span><br><span class="line">                maxX = parseInt(getCss(bar, &quot;width&quot;)) - parseInt(getCss(target, &quot;width&quot;));</span><br><span class="line">                maxY = parseInt(getCss(bar, &quot;height&quot;)) - parseInt(getCss(target, &quot;height&quot;));</span><br><span class="line"></span><br><span class="line">                target.ontouchstart = down</span><br><span class="line"></span><br><span class="line">                document.ontouchend = up</span><br><span class="line"></span><br><span class="line">                document.ontouchmove = move</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                console.log(&quot;pc&quot;);</span><br><span class="line">                target.style.width = &apos;150px&apos;;</span><br><span class="line">                target.style.height = &apos;150px&apos;;</span><br><span class="line">                maxX = parseInt(getCss(bar, &quot;width&quot;)) - parseInt(getCss(target, &quot;width&quot;));</span><br><span class="line">                maxY = parseInt(getCss(bar, &quot;height&quot;)) - parseInt(getCss(target, &quot;height&quot;));</span><br><span class="line"></span><br><span class="line">                target.onmousedown = down</span><br><span class="line"></span><br><span class="line">                document.onmouseup = up</span><br><span class="line"></span><br><span class="line">                document.onmousemove = move</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>以上就是局部模糊的实现方法。可以直接套用。将JS部分当作文件引入。否则要把初始化函数放在函数声明的后面。</p></blockquote><p>最后可查看实际效果：<a href="https://www.zsfmyz.top/demo/mosaic/">demo演示地址</a></p><p><em>借鉴于张大神</em></p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3：图片的高斯模糊效果</title>
      <link href="/Css/CSS3%EF%BC%9A%E5%9B%BE%E7%89%87%E7%9A%84%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/"/>
      <url>/Css/CSS3%EF%BC%9A%E5%9B%BE%E7%89%87%E7%9A%84%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS3：图片的高斯模糊效果"><a href="#CSS3：图片的高斯模糊效果" class="headerlink" title="CSS3：图片的高斯模糊效果"></a>CSS3：图片的高斯模糊效果</h1><blockquote><p> 最近项目中需要预览视频中加马赛克的效果（高斯模糊），于是找到了css3的一个属性filter来进行高斯模糊</p></blockquote><a id="more"></a><h2 id="filter（滤镜）"><a href="#filter（滤镜）" class="headerlink" title="filter（滤镜）"></a>filter（滤镜）</h2><blockquote><p>可以用来定义图片或者div的饱和度，模糊程度，亮度等一系列。具体参考 <a href="http://www.runoob.com/cssref/css3-pr-filter.html" target="_blank" rel="noopener">CSS3：filter 属性</a></p></blockquote><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p><img src="https://img-blog.csdn.net/20180518144313540?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h2 id="兼容性方案"><a href="#兼容性方案" class="headerlink" title="兼容性方案"></a>兼容性方案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//高斯模糊</span><br><span class="line">-webkit-filter：blur(10px);</span><br><span class="line">filter:blur(10px);</span><br></pre></td></tr></table></figure><p>高斯模糊的这个属性是对整个元素进行高斯模糊。如果你需要局部模糊，需要结合背景定位。原理就是两层图片叠加，底层清晰，上层模糊。接下来我会结合拖拽和背景定位实现图片的局部模糊。下一篇传送门：<strong><a href="https://www.zsfmyz.top/JavaScript/HTML5%20drag%20&amp;%20drop%20%E6%8B%96%E6%8B%BD%E4%B8%8E%E6%8B%96%E6%94%BE/">js拖拽实现</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5 Video 全屏</title>
      <link href="/JavaScript/HTML5%20video%20%E5%85%A8%E5%B1%8F/"/>
      <url>/JavaScript/HTML5%20video%20%E5%85%A8%E5%B1%8F/</url>
      
        <content type="html"><![CDATA[<h5 id="当我们使用video标签的时候，有时候因为更多的需要，我们要自己自定义控制栏，而进入和退出全屏也是其中的一部分"><a href="#当我们使用video标签的时候，有时候因为更多的需要，我们要自己自定义控制栏，而进入和退出全屏也是其中的一部分" class="headerlink" title="当我们使用video标签的时候，有时候因为更多的需要，我们要自己自定义控制栏，而进入和退出全屏也是其中的一部分"></a>当我们使用video标签的时候，有时候因为更多的需要，我们要自己自定义控制栏，而进入和退出全屏也是其中的一部分</h5><hr><ul><li>不同的浏览器有不同的实现方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// Webkit</span><br><span class="line">element.webkitRequestFullScreen();//进入全屏</span><br><span class="line">document.webkitCancelFullScreen();//退出全屏</span><br><span class="line"></span><br><span class="line">// Firefox</span><br><span class="line">element.mozRequestFullScreen();</span><br><span class="line">document.mozCancelFullScreen();</span><br><span class="line"> </span><br><span class="line">// W3C </span><br><span class="line">element.requestFullscreen();</span><br><span class="line">document.exitFullscreen();</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>一般兼容性写法，我们先使用w3c标准的方法，如果不可以在兼容不同浏览器。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//进入全屏</span><br><span class="line">function FullScreen() &#123;</span><br><span class="line">    var ele = document.documentElement;</span><br><span class="line">    if (ele .requestFullscreen) &#123;</span><br><span class="line">        ele .requestFullscreen();</span><br><span class="line">    &#125; else if (ele .mozRequestFullScreen) &#123;</span><br><span class="line">        ele .mozRequestFullScreen();</span><br><span class="line">    &#125; else if (ele .webkitRequestFullScreen) &#123;</span><br><span class="line">        ele .webkitRequestFullScreen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//退出全屏</span><br><span class="line">function exitFullscreen() &#123;</span><br><span class="line">    var de = document;</span><br><span class="line">    if (de.exitFullscreen) &#123;</span><br><span class="line">        de.exitFullscreen();</span><br><span class="line">    &#125; else if (de.mozCancelFullScreen) &#123;</span><br><span class="line">        de.mozCancelFullScreen();</span><br><span class="line">    &#125; else if (de.webkitCancelFullScreen) &#123;</span><br><span class="line">        de.webkitCancelFullScreen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接下来是用例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(ele).on(&apos;click&apos;,function()&#123;</span><br><span class="line">    FullScreen();</span><br><span class="line">   // exitFullscreen();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular 的 uiRouter 的 方法$state.includes （判断当前激活路由）</title>
      <link href="/Angular/angular%20%E7%9A%84%20uiRouter%20%E7%9A%84%20%E6%96%B9%E6%B3%95$state.includes%20%EF%BC%88%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E6%BF%80%E6%B4%BB%E8%B7%AF%E7%94%B1%EF%BC%89/"/>
      <url>/Angular/angular%20%E7%9A%84%20uiRouter%20%E7%9A%84%20%E6%96%B9%E6%B3%95$state.includes%20%EF%BC%88%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E6%BF%80%E6%B4%BB%E8%B7%AF%E7%94%B1%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="angular-的-uiRouter-的-方法-state-includes-（判断当前激活路由）"><a href="#angular-的-uiRouter-的-方法-state-includes-（判断当前激活路由）" class="headerlink" title="angular 的 uiRouter 的 方法$state.includes （判断当前激活路由）"></a>angular 的 uiRouter 的 方法$state.includes （判断当前激活路由）</h3><p>作用：</p><ol><li><p>该方法用于判断当前激活的也就是地址栏的路由地址是哪个路由。</p></li><li><p>比如   $state.includes(‘app’) 那么如果页面地址为“<a href="http://www.baidu.com#/app”" target="_blank" rel="noopener">www.baidu.com#/app”</a> 或者 “<a href="http://www.baidu.com#/app/xxx”" target="_blank" rel="noopener">www.baidu.com#/app/xxx”</a> 的时候，该方法的值会返回true。<br>（<em>一般我们定义的路由和地址栏地址是相互对应的，方便管理。举例也是在app.xxx对应app/xxx这样设置路由的情况下</em>）</p></li><li><p>如激活的路由为 app.page.page1 那么</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$state.includes(&apos;app&apos;)              //返回 true</span><br><span class="line">$state.includes(&apos;app.page&apos;)         //返回 true</span><br><span class="line">$state.includes(&apos;app.page.page1&apos;)   //返回 true</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><p>用法：</p><blockquote><p>知道了它的作用，接下来看看它的使用背景。</p><ol><li>我们可以用来激活当前menu的状态。即使当前路由对应的菜单高亮或激活状态。</li></ol></blockquote><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ng-init=&quot;menu_flag= !($state.includes(&apos;app.page1&apos;) || $state.includes(&apos;app.page2&apos;))&quot;&gt; 主菜单&lt;/div&gt;</span><br><span class="line">&lt;div ng-hide=&quot;menu_flag&quot;&gt;</span><br><span class="line">    &lt;div ng-class=&quot;&#123;active: $state.includes(&apos;app.page1&apos;)&#125;&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:;&quot; ui-sref=&quot;app.page1&quot;&gt;子菜单一&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div ng-class=&quot;&#123;active: $state.includes(&apos;app.page2&apos;)&#125;&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:;&quot; ui-sref=&quot;app.page2&quot;&gt;子菜单二&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// ......  n个类似结构组成的菜单</span><br><span class="line"></span><br><span class="line">&lt;div ng-init=&quot;menu_flag1= !($state.includes(&apos;app.page3&apos;) || $state.includes(&apos;app.page4&apos;))&quot;&gt; 主菜单&lt;/div&gt;</span><br><span class="line">&lt;div ng-hide=&quot;menu_flag1&quot;&gt;</span><br><span class="line">    &lt;div ng-class=&quot;&#123;active: $state.includes(&apos;app.page3&apos;)&#125;&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:;&quot; ui-sref=&quot;app.page1&quot;&gt;子菜单一&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div ng-class=&quot;&#123;active: $state.includes(&apos;app.page4&apos;)&#125;&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:;&quot; ui-sref=&quot;app.page2&quot;&gt;子菜单二&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol><li><p>如上我们的菜单构成是由若干个类似结构构成，主menu控制若干个子menu。active是我们定义的激活菜单的css类名，当我们选中某个菜单时激活该菜单。即可借用$state.includes()来实现该功能。</p></li><li><p>同时，当我们的主menu要控制闭合和展开的话，当我们刷新的时候，我们通过判断<code>($state.includes(&#39;app.page3&#39;) || $state.includes(&#39;app.page4&#39;))</code> 的值来在刷新之后判断该主菜单是否闭合。</p></li><li>当然我们也可以这样定义我们的路由。当然我们也可以这样定义我们的路由。例如： 一层菜单为 app.menu1 , 该主菜单下路由定义为</li></ol><table><thead><tr><th>路由名称</th><th>一级路由定义</th><th>二级路由定义</th></tr></thead><tbody><tr><td>一层菜单</td><td>app.menu1</td><td></td></tr><tr><td>二层菜单</td><td></td><td>app.menu1.menu1_1</td></tr><tr><td>二层菜单</td><td></td><td>app.menu1.menu1_2</td></tr></tbody></table><p>这样的话我们在主菜单闭合上只需要判断 <code>$state.includes(app.menu1)</code> 即可。</p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS：文本的水平垂直居中</title>
      <link href="/Css/CSS%EF%BC%9A%E6%96%87%E6%9C%AC%E6%96%87%E5%AD%97%E5%9C%A8DIV%E4%B8%AD%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E6%98%BE%E7%A4%BA/"/>
      <url>/Css/CSS%EF%BC%9A%E6%96%87%E6%9C%AC%E6%96%87%E5%AD%97%E5%9C%A8DIV%E4%B8%AD%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="文字居中"><a href="#文字居中" class="headerlink" title="文字居中"></a>文字居中</h1><h2 id="垂直居中（vertical-align）"><a href="#垂直居中（vertical-align）" class="headerlink" title="垂直居中（vertical-align）"></a>垂直居中（vertical-align）</h2><p>我们都知道有这么一个属性可以让图片，文本等在元素中垂直居中<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">vertical-align</span><span class="selector-pseudo">:middle</span>;</span><br></pre></td></tr></table></figure></p><p>vertical-align值有很多，常用的就是middle，bottom，text-bottom等，我们先说middle。</p><h4 id="vertical-align时而没效果"><a href="#vertical-align时而没效果" class="headerlink" title="vertical-align时而没效果"></a>vertical-align时而没效果</h4><p>然而真实使用的时候，我们会发现这个属性“时灵时不灵”，有些情况下我们加了这个属性之后仍然不见img或者text有任何的变化。<strong>那是因为vertical-align只作用在inline-block或者inline，还有table-cell等元素内</strong>。同时这两种还有所不同。</p><a id="more"></a><ol><li><p>对于行内元素</p><ol><li>text-top<br>使元素的顶部与父元素的字体顶部对齐。</li><li>text-bottom<br>使元素的底部与父元素的字体底部对齐。</li><li>middle<br>使元素的中部与父元素的基线加上父元素x-height（译注：”x”高度）的一半（交叉处）对齐。</li></ol></li><li><p>对于table-cell 的常用</p><ol><li>top<br> 使单元格内边距的上边缘与该行顶部对齐。</li><li>middle<br> 使单元格内边距盒模型在该行内居中对齐。</li><li>bottom<br> 使单元格内边距的下边缘与该行底部对齐。</li></ol></li></ol><blockquote><p>vertical-align并不是在高度内居中，而是对齐在行高内的middle线上。</p></blockquote><p>所以我总结了两种使用vertical-align居中的方法：</p><ol><li>第一种</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"vertical-align: middle;display: table-cell;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"02.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>文本居中<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这种情况下图片和文字可以分行显示文字在图片下面同时图片和文字作为整体在元素内垂直居中。</p></blockquote><ol start="2"><li>第二种</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;height:180px;line-height:180px;&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;02.jpg&quot; alt=&quot;图片&quot; style=&quot;vertical-align:middle;&quot; /&gt;</span><br><span class="line">    这是文本内容.</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这种情况下文字是因为line-height属性而居中，同时img上的vertical-align：middle属性使其对齐在middle线上，如果父盒子去掉了line-height属性的话那么文字将不会再垂直居中。（可以试试bottom和text-bottom的不同。）</p></blockquote><ol start="3"><li><p>Flex</p><p> flex布局需要使用<code>align-items</code>来进行上下居中, 这个属性是<code>父元素</code>的属性, 可以统一设置<code>子元素</code>的上下对齐方式.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:flex;</span><br><span class="line"><span class="attribute">align-items</span>: center </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这样.box元素内的子元素是可以垂直居中的。那么要单独设置某个子元素的上下对齐方式的话需要使用<code>align-self: center</code> 这个属性. 它可以单独设置某个子元素的对齐方式, 且覆盖父元素的样式. </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:flex;</span><br><span class="line"><span class="attribute">align-items</span>: center </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line"><span class="attribute">align-self</span>: center </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span><br></pre></td></tr></table></figure><p>over</p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular中ng-Repeat的track by 的使用（$Index）</title>
      <link href="/Angular/angular%E4%B8%ADng-repeat%E7%9A%84track%20by%20%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88$index%EF%BC%89/"/>
      <url>/Angular/angular%E4%B8%ADng-repeat%E7%9A%84track%20by%20%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88$index%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="在angular中使用ng-repeat时数组中有重复元素"><a href="#在angular中使用ng-repeat时数组中有重复元素" class="headerlink" title="在angular中使用ng-repeat时数组中有重复元素"></a>在angular中使用ng-repeat时数组中有重复元素</h3><ul><li>当我们在循环的数组中存在有重复的元素时候，angular的ng-repeat就会报错，那是因为其不允许collection有相同的id（相同的元素会形成相同的id）出现。而基本的数据类型它的id就是它自身的值。</li></ul><a id="more"></a><ul><li><p>我们要避免这种情况通常会使用<code>track by $index</code> 来让其生成自己不同的id，这样是最常用的直接通过索引来生成id。我们也可以通过自己设置业务上的id，然后用其进行遍历<code>track by item.id</code>.</p></li><li><p>总结一下，解决重复问题的方法就是<code>item in items track by $index</code></p></li></ul><h3 id="使用-index会出现的问题。"><a href="#使用-index会出现的问题。" class="headerlink" title="使用$index会出现的问题。"></a>使用$index会出现的问题。</h3><ul><li>我们使用<code>$index</code>不仅仅是为了避免重复元素的问题，有时候会被使用<code>$index</code>的索引来进行一部分操作，这里有一个坑需要注意。</li></ul><blockquote><p>当我们使用<code>$index</code>的时候，下列情况会出现<code>$index</code>跟原序列不匹配的情况</p></blockquote><ol><li>当我们改变列表的顺序的时候</li><li>当我们在列表中插入或者删除的时候</li></ol><hr><ul><li>由于<code>$index</code>会跟随item上移下移，或者随之被删除。（例如你把列表第二条和第一条位置互换，这时候列表现在第一条的$index依旧为2，第二条还是原来的1）这时候你再使用<code>$index</code>传值就不在是新数组的索引了，不再匹配。</li></ul><p><em>所以使用$index的时候要特别注意这些问题</em></p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular 的Http请求回调（success 和 Error）</title>
      <link href="/Angular/angular%20%E7%9A%84http%E8%AF%B7%E6%B1%82%E5%9B%9E%E8%B0%83%EF%BC%88success%20%E5%92%8C%20error%EF%BC%89/"/>
      <url>/Angular/angular%20%E7%9A%84http%E8%AF%B7%E6%B1%82%E5%9B%9E%E8%B0%83%EF%BC%88success%20%E5%92%8C%20error%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>前面有文章写过angular的$http请求的简单书写和使用。<br>回顾一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">var Server = angular.module(&quot;Server&quot;, []);</span><br><span class="line"></span><br><span class="line">Server.service(&quot;Api&quot;, [&quot;$http&quot;, function ($http) &#123;</span><br><span class="line">return &#123;</span><br><span class="line">getTest : function (params, callback) &#123;</span><br><span class="line">            $http(&#123;</span><br><span class="line">                url: &apos;www.baidu.com?name=xxx&amp;passwd=xxx&apos;,</span><br><span class="line">                method: &apos;GET&apos;</span><br><span class="line">            &#125;).success(callback);</span><br><span class="line">        &#125;,</span><br><span class="line">        postTest : function (data, callback) &#123;</span><br><span class="line">            $http(&#123;</span><br><span class="line">                url: &apos;www.baidu.com&apos;,</span><br><span class="line">                data: data,</span><br><span class="line">                method: &apos;POST&apos;</span><br><span class="line">            &#125;).success(callback);</span><br><span class="line">&#125;</span><br><span class="line">&#125;]);</span><br><span class="line"></span><br><span class="line">var App = angular.module(&quot;App&quot;, [ &quot;Server&quot;]);</span><br><span class="line">App.controller(&apos;Ctrl&apos;, [&apos;$scope&apos;, &apos;Api&apos;,</span><br><span class="line">    function($scope, Api) &#123;</span><br><span class="line">    Api.getTest(&quot;?name=xxx&amp;passwd=xxx&quot;, function(res)&#123;</span><br><span class="line">    //res为返回值</span><br><span class="line">alert(&quot;请求成功！&quot;)</span><br><span class="line">&#125;);</span><br><span class="line">Api.postTest(&#123;name: xxx, passwd: xxx&#125;, function(res)&#123;</span><br><span class="line">    //res为返回值</span><br><span class="line">alert(&quot;请求成功！&quot;)</span><br><span class="line">&#125;);</span><br><span class="line">    &#125;]);</span><br></pre></td></tr></table></figure><a id="more"></a><p>这里以GET和POST请求为例。首先我们需要在APP中注入Server这个模块，才能使用里面的service服务Api，如上代码所示，注入Server之后我们就可以在控制器Ctl里面注入Api服务，然后使用我们之前定义好的接口。</p><ol><li>GET请求中params 代表了？之后的参数，即 params == ‘?name=xxx&amp;passwd=xxx’,这样就可以通过传参的方式把参数加入到地址上，callback是请求成功后的回调，是个function，我们可以在里面打印出请求成功的返回值。<ol start="2"><li>POST请求中data代表请求参数，传入之后直接请求即可，其他跟get请求类似。</li></ol></li></ol><h2 id="error"><a href="#error" class="headerlink" title="error"></a>error</h2><p>还有一点需要说的是http请求有时候会失败，当我们http请求失败的时候，将不会再调用success回调函数，而是会进入error回调，下面我就写一下http请求的success和error同时存在的写法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var Server = angular.module(&quot;Server&quot;, []);</span><br><span class="line"></span><br><span class="line">Server.service(&quot;Api&quot;, [&quot;$http&quot;, function ($http) &#123;</span><br><span class="line">return &#123;</span><br><span class="line">getTest : function (params, successCallback, errorCallback) &#123;</span><br><span class="line">            $http(&#123;</span><br><span class="line">                url: &apos;www.baidu.com?name=xxx&amp;passwd=xxx&apos;,</span><br><span class="line">                method: &apos;GET&apos;</span><br><span class="line">            &#125;).then(successCallback, errorCallback);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;]);</span><br><span class="line"></span><br><span class="line">var App = angular.module(&quot;App&quot;, [ &quot;Server&quot;]);</span><br><span class="line">App.controller(&apos;Ctrl&apos;, [&apos;$scope&apos;, &apos;Api&apos;,</span><br><span class="line">    function($scope, Api) &#123;</span><br><span class="line">    Api.getTest(&quot;?name=xxx&amp;passwd=xxx&quot;, function(res)&#123;</span><br><span class="line">    //res为返回值</span><br><span class="line">alert(&quot;请求成功！&quot;)</span><br><span class="line">&#125;, function(res)&#123;</span><br><span class="line">    //res为返回值</span><br><span class="line">alert(&quot;请求失败！&quot;)</span><br><span class="line">&#125;);</span><br><span class="line">    &#125;]);</span><br></pre></td></tr></table></figure><p>用法几乎一样，只不过把success(callback)改成了then(callback1, callback2).然后在调用的时候再加入一个function即可。</p><p>最简单的get写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$http(&#123;</span><br><span class="line">          url: &apos;www.baidu.com?name=xxx&amp;passwd=xxx&apos;,</span><br><span class="line">          method: &apos;GET&apos;</span><br><span class="line">      &#125;).success(callback);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
