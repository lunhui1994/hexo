<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git入门篇</title>
      <link href="/Git/Git%E5%85%A5%E9%97%A8%E7%AF%87/"/>
      <url>/Git/Git%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h5 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h5><ul><li>首先我们需要去github官网申请git账号。<a href="https://github.com/" target="_blank" rel="noopener">git官网</a></li><li><p>申请之后，我们进入自己的linux服务器</p></li><li><p>安装git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y git</span><br><span class="line"></span><br><span class="line">git --version</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 生成key</span><br><span class="line">ssh-keygen</span><br><span class="line">//查看公钥  </span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li>然后在GitHub上加入这个公钥 <a href="https://github.com/settings/keys" target="_blank" rel="noopener">配置公钥</a> </li></ul><p><img src="/img/github-key.jpg" alt="github-key"></p><ul><li>设置git命令的简写模式（alias）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.st status</span><br></pre></td></tr></table></figure><ul><li>设置自己的名字和邮箱</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;your name&quot;</span><br><span class="line">git config --global user.email &quot;your email @.com&quot;</span><br></pre></td></tr></table></figure><ul><li><h5 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h5></li></ul><p>如果你想使用别人的项目，就需要fork。<br><img src="/img/github-fork.jpg" alt="github-fork"></p><ul><li>一般我们参与公司项目，都会先fork公司的仓库。</li></ul><ul><li><h5 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h5></li></ul><p>进入一个你想存放项目的文件夹。<br><img src="/img/github-clone.jpg" alt="github-clone"></p><p>如图复制ssh地址。</p><ul><li>一般我们复制的这个ssh地址，是先fork了公司的仓库，然后回到自己的仓库下面复制自己的ssh。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:xxx/xxx.git</span><br></pre></td></tr></table></figure><p>然后就可以对代码进行修改和提交了。</p><ul><li><h5 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h5></li></ul><p>项目有不同的分支。<br>一般本地主分支为master。<br>自己的远程仓库为 origin<br>如果是公司的项目，可能还会添加一个公司仓库 gongsi</p><p>可以用以下命令查看。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git br -va</span><br></pre></td></tr></table></figure></p><p>一般我们都master分支上。</p><p>那么当我们修改了master分支的文件，但是又想恢复它到我们修改之前的状态，就需要checkout</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git co xxx.html</span><br></pre></td></tr></table></figure><p>checkout也可以创建本地分支: </p><p>origin/develop为远程仓库origin里面的一条分支，</p><p>我们要在本地创建一条和它一样的分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git co -b develop origin/develop</span><br></pre></td></tr></table></figure><p>另一种情况 本地和远程都只有master分支，</p><p>我们要在master的基础上添加订制功能，</p><p>需要独立出来一条和master一样的分支，然后再修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git co -b develop origin/master</span><br><span class="line"></span><br><span class="line"># 增加完新功能之后</span><br><span class="line"></span><br><span class="line">git push origin develop</span><br></pre></td></tr></table></figure><p>这样就会在本地和远程origin都创建了一条develop分支完成定制功能的添加又不影响原来的master分支。</p><ul><li><h5 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h5></li></ul><p>当我们修改某个文件，使用git st就可以看到哪些文件被修改了。<br>然后使用 git add 可以将我们修改过的文件添加进暂存区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git st</span><br><span class="line"></span><br><span class="line">git add xxx.html</span><br></pre></td></tr></table></figure></p><p>commit为某次修改的描述，是阶段性的。<br>我们每完成一个功能，或者每修复一个bug，最好都进行一次提交。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ci -m &apos;描述&apos;</span><br></pre></td></tr></table></figure><p>最后将代码push到我们的远程分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master(分支名)</span><br></pre></td></tr></table></figure><ul><li><h5 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h5>有时候我们会后悔添加了文件。那么可以用reset 返回</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset xxx.html</span><br></pre></td></tr></table></figure><p>这样就可以返回add之前的文件状态。</p><p>同样的我们如果已经push到远程分支了</p><p>想要回到我们push之前的状态，或者再之前的某个版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure><p>以上两个步骤，第一步是查看我们这个分支的所有版本号。</p><p>复制你想要回退的版本号，然后执行第二步，就会回退到目标版本了。</p><p>然后再次执行你想要add，ci，push等命令，将你想要提交的文件push到远程。</p><ul><li><h5 id="fetch-merge"><a href="#fetch-merge" class="headerlink" title="fetch/merge"></a>fetch/merge</h5></li></ul><p>push之后我们的远程分支就会和本地分支的内容一样了。</p><p>但是如果我们是一个公共项目，那就需要并入公共仓库（gongsi）。</p><p>这个就需要管理员来操作了。</p><p><img src="/img/github-pull1.jpg" alt="github-pull1"></p><p><img src="/img/github-pull2.jpg" alt="github-pull2"></p><p>等管理员合并了之后，别人就需要fetch并且merge你的代码，以此来使大家的代码都是同步的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line"></span><br><span class="line">git merge gongsi/master</span><br></pre></td></tr></table></figure><p>每次push之前我们都应该先merge一下公共仓库的代码。<br>以免我们在旧代码上修改提交导致冲突。</p><ul><li><h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h5></li></ul><p>那么我们如何删除自己的本地分支和远程分支呢，拿new_master举例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git br -d new_master</span><br><span class="line">git push origin -d new_master</span><br></pre></td></tr></table></figure><ul><li><h5 id="remote"><a href="#remote" class="headerlink" title="remote"></a>remote</h5></li></ul><p>当我们从某个git地址clone下来仓库后，仓库的远程地址就是你所clone的地址。</p><p>此时如果我们想修改我们的远程仓库怎么办呢（也就是修改origin的远程地址）</p><p>那就用到remote了</p><p>首先查看远程地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure></p><p>然后修改远程地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url [仓库名称] [url]</span><br><span class="line"></span><br><span class="line"># 例如：修改origin这个仓库的远程地址。</span><br><span class="line"># git remote set-url origin git@github.com:xiaoming/project.git</span><br></pre></td></tr></table></figure><p>那么如果要新添加一个远程地址呢？比如我们添加公司的（或者其他任何）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote add [自定义远程仓库名] [url]</span><br><span class="line"></span><br><span class="line"># 例如：</span><br><span class="line"># git remote add gongsi git@github.com:gongsi/project.git</span><br></pre></td></tr></table></figure><p>添加完公司的仓库之后，我们远程公司的仓库有了，但是本地还没有，怎么办呢，就用到前面的checkout了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git co -b [创建本地分支名] [远程仓库名/远程仓库分支名]</span><br><span class="line"></span><br><span class="line"># 例如：创建一个本地分支 develop 该分支的内容和gongsi/develop分支的内容一致。</span><br><span class="line"># git co -b develop gongsi/develop</span><br></pre></td></tr></table></figure><p>推送到自己的远程分支。<br>如果我们的origin上没有 develop 分支，那就会自动创建一个。</p><p>这样就保持三个分支一致了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin develop</span><br></pre></td></tr></table></figure><ul><li><h5 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h5></li></ul><p>有的时候，我们正在修改master分支。突然有一个紧急需求需要在develop上修改。</p><p>但是master还没有修改完，我们不能切换分支。</p><p>那怎么办呢？我们可以使用stash。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br><span class="line"></span><br><span class="line">git co develop</span><br><span class="line"></span><br><span class="line">git co master</span><br><span class="line"></span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><p>以上三个步骤</p><p>第一步 将我们修改的内容缓存起来</p><p>第二步 切换到develop 分支,然后修改提交之后</p><p>第三步 切换到master分支</p><p>第四步 恢复切换到develop之前的master分支的修改内容。</p><p>以上就是常用的git命令，当然还有更多的和更深的命令，可以扩展了解一下。</p><p>另外我们装完git如果颜色都是白色的，会感觉不太容易区分。可以配置下颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.branch auto</span><br><span class="line">git config --global color.interactive auto</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux文件共享服务(Samba安装配置)</title>
      <link href="/Linux/linux%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E6%9C%8D%E5%8A%A1(samba%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE)/"/>
      <url>/Linux/linux%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E6%9C%8D%E5%8A%A1(samba%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE)/</url>
      
        <content type="html"><![CDATA[<p>我们的服务器基本都是linux系统的，但是我们需要在windows下开发。</p><p>解决方案有两种：</p><ol><li>通过git同步linux和windows下的代码。</li><li>通过文件共享使windows连接linux下的共享文件夹</li></ol><p>现在说第二种方式如何实现：</p><p>Samba的介绍我就不多说了，总结一下就是可以在windows下操作编辑linux里面共享的内容。</p><a id="more"></a><p>#####（一）samba 安装</p><p>安装之前用rpm确定一下自己的服务器是否已经安装过了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep samba</span><br></pre></td></tr></table></figure><p>如果没有，我们就通过yum来下载rpm包来安装它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y samba</span><br></pre></td></tr></table></figure><p>安装完成之后可以再通过第一条命令查看是否安装成功。</p><p>安装成功之后，我们就需要修改samba的配置文件了。</p><p>#####（二）samba 配置</p><p>一般都在etc中<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/samba/smb.conf</span><br></pre></td></tr></table></figure></p><p> 打开之后其他的不用管，在该配置文件的末尾增加一段</p><p> 例如我们要共享根目录下的opt文件夹</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[opt]</span><br><span class="line">        comment = OPT</span><br><span class="line">        path = /opt/</span><br><span class="line">        public = yes</span><br><span class="line">        writable = yes</span><br><span class="line">        printable = no</span><br><span class="line">        guest ok = yes</span><br></pre></td></tr></table></figure><p>path 是你要共享的路径。</p><p>保存之后重启服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl start smb</span><br><span class="line"></span><br><span class="line">systemctl restart smb</span><br><span class="line"></span><br><span class="line">systemctl stop smb</span><br></pre></td></tr></table></figure><p>重启完之后基本samba就算安装配置完成。</p><p>想要使用还需要配置samba所需要的端口。</p><p>#####（三）配置 samba 端口</p><p>在这里使用阿里云服务器举例。</p><p><img src="/img/anquanzu.jpg" alt="github-key"><br><img src="/img/anquanzu1.jpg" alt="github-key"><br><img src="/img/anquanzu2.jpg" alt="github-key"></p><p>如图添加安全组规则</p><p>分别添加 136/138和445端口。</p><p>至此linux系统的问题都ok了。</p><p>#####（四）映射网络驱动器</p><p>然后到你的windows系统中</p><ol><li>右键我的电脑，映射网络驱动器。</li><li>输入\ip\xxx   以opt为例：\ip\opt ,ip为你的linux服务器ip</li><li>点击完成输入你的用户和密码。</li></ol><p>我们也可以创建一个用来使用samba的用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbpasswd -a xiaoming  #添加用户xiaoming到Samba用户中</span><br></pre></td></tr></table></figure><p>然后接着会让你设置密码，设置完之后。重启samba就可以了。</p><p>#####（五）配置 samba 防火墙</p><p>如果连接不上，请关闭windows的防火墙试试。</p><p>如果还不行就设置下linux的防火墙</p><p>iptables</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iptables -I RH-Firewall-1-INPUT 5 -m state --state NEW -m tcp -p tcp --dport 139 -j ACCEPT</span><br><span class="line">iptables -I RH-Firewall-1-INPUT 5 -m state --state NEW -m tcp -p tcp --dport 445 -j ACCEPT</span><br><span class="line">iptables -I RH-Firewall-1-INPUT 5 -p udp -m udp --dport 137 -j ACCEPT</span><br><span class="line">iptables -I RH-Firewall-1-INPUT 5 -p udp -m udp --dport 138-j ACCEPT</span><br><span class="line">iptables-save</span><br><span class="line">systemctl restart iptables</span><br></pre></td></tr></table></figure><p>selinux</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setsebool -P samba_enable_home_dirs on</span><br><span class="line">setsebool -P samba_export_all_rw on</span><br></pre></td></tr></table></figure><p>然后重新映射网络位置。</p><p>#####（六）放弃</p><p>如果还不可以，那放弃就好了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_145. 二叉树的后序遍历</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_145.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_145.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>给定一个二叉树，返回它的 后序 遍历。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,null,2,3]  </span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3 </span><br><span class="line"></span><br><span class="line">输出: [3,2,1]</span><br></pre></td></tr></table></figure></p><p>说明&amp;&amp;进阶:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 递归算法很简单，你可以通过迭代算法完成吗？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">前序排列的顺序是左，右，父。</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>递归，递归判断条件，该节点左右节点是否为null，递归时先左后右。跟前序遍历唯一的差别是最后再push。</code></pre><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * function TreeNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.left = this.right = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;TreeNode&#125; root</span><br><span class="line"> * @return &#123;number[]&#125;</span><br><span class="line"> */</span><br><span class="line"> let postorderArr = [];</span><br><span class="line"> let addNode = (root) =&gt; &#123;</span><br><span class="line">     root.left &amp;&amp; addNode(root.left);</span><br><span class="line">     root.right &amp;&amp; addNode(root.right);</span><br><span class="line">     postorderArr.push(root.val) // 唯一的差别</span><br><span class="line"> &#125;</span><br><span class="line"> let postorderTraversal  = (root) =&gt; &#123;</span><br><span class="line">     postorderArr = [];</span><br><span class="line">     if (!root) &#123;</span><br><span class="line">         return postorderArr;</span><br><span class="line">    &#125;</span><br><span class="line">     addNode(root);</span><br><span class="line">     return postorderArr;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><p>   迭代法，基于栈的特性将递推出来的节点压进栈中。然后遵循先进后出的原则，直至将栈排空。</p><p>   后序遍历的迭代法比较前序遍历要复杂一些。</p><p>   我的思路是打表，已经遍历过的节点需要标记（截断）。</p><h3 id="解答二"><a href="#解答二" class="headerlink" title="解答二"></a>解答二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * function TreeNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.left = this.right = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;TreeNode&#125; root</span><br><span class="line"> * @return &#123;number[]&#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">let postorderArr = [], nodeList = [], nowNode;</span><br><span class="line">let postorderTraversal  = (root) =&gt; &#123;</span><br><span class="line">    postorderArr = [];</span><br><span class="line">    if (!root) &#123;</span><br><span class="line">        return postorderArr;</span><br><span class="line">    &#125;</span><br><span class="line">    nodeList = [], nowNode = root;</span><br><span class="line">     while(nodeList.length &gt; 0 || nowNode) &#123;</span><br><span class="line">        while (nowNode) &#123;</span><br><span class="line">            nowNode.flag = true; // 标记该节点已经进入过数组</span><br><span class="line">            nodeList.push(nowNode);</span><br><span class="line">            </span><br><span class="line">            //如果该节点的左节点已经遍历过了就不需要遍历了  先左</span><br><span class="line">            </span><br><span class="line">            if (nowNode.left &amp;&amp; !nowNode.left.flag) &#123; </span><br><span class="line">                nowNode = nowNode.left;</span><br><span class="line">            </span><br><span class="line">            //如果该节点的右节点已经遍历过了就不需要遍历了  后右</span><br><span class="line"></span><br><span class="line">            &#125; else if (nowNode.right &amp;&amp; !nowNode.right.flag) &#123; </span><br><span class="line">                nowNode = nowNode.right;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">            </span><br><span class="line">                //左右节点都遍历过的相当于叶节点（度为0，没有子节点）</span><br><span class="line">            </span><br><span class="line">                nowNode = null; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 从栈中取值</span><br><span class="line">        nowNode = nodeList.pop(); </span><br><span class="line"></span><br><span class="line">        // 用来区分是否为叶节点 若为叶则赋值null，遍历下一轮。</span><br><span class="line">        </span><br><span class="line">        if (!nowNode.right || nowNode.right.flag) &#123;</span><br><span class="line">            postorderArr.push(nowNode.val);</span><br><span class="line">            nowNode = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return postorderArr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_144. 二叉树的前序遍历</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_144.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_144.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>给定一个二叉树，返回它的 前序 遍历。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,null,2,3]  </span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3 </span><br><span class="line"></span><br><span class="line">输出: [1,2,3]</span><br></pre></td></tr></table></figure></p><p>说明&amp;&amp;进阶:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 递归算法很简单，你可以通过迭代算法完成吗？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">前序排列的顺序是父节点在前，然后遍历左树，然后遍历右树。</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>递归，递归判断条件，该节点左右节点是否为null，递归时先左后右。</code></pre><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * function TreeNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.left = this.right = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;TreeNode&#125; root</span><br><span class="line"> * @return &#123;number[]&#125;</span><br><span class="line"> */</span><br><span class="line">let frontArr = [];</span><br><span class="line">let addNode = (root) =&gt; &#123;</span><br><span class="line">    frontArr.push(root.val)</span><br><span class="line">    root.left &amp;&amp; addNode(root.left);</span><br><span class="line">    root.right &amp;&amp; addNode(root.right);</span><br><span class="line">&#125;</span><br><span class="line">let preorderTraversal = (root) =&gt; &#123;</span><br><span class="line">    frontArr = [];</span><br><span class="line">    if (!root) &#123;</span><br><span class="line">        return frontArr;</span><br><span class="line">    &#125;</span><br><span class="line">    addNode(root);</span><br><span class="line">    return frontArr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><p>   迭代法，基于栈的特性将递推出来的节点压进栈中。然后遵循先进后出的原则，直至将栈排空。</p><h3 id="解答二"><a href="#解答二" class="headerlink" title="解答二"></a>解答二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * function TreeNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.left = this.right = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;TreeNode&#125; root</span><br><span class="line"> * @return &#123;number[]&#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">let frontArr = [], nodeList = [], nowNode;</span><br><span class="line">let preorderTraversal = (root) =&gt; &#123;</span><br><span class="line">    frontArr = [];</span><br><span class="line">    if (!root) &#123;</span><br><span class="line">        return frontArr;</span><br><span class="line">    &#125;</span><br><span class="line">    nodeList = [root];</span><br><span class="line">    while(nodeList.length &gt; 0) &#123;</span><br><span class="line">        nowNode = nodeList.pop();</span><br><span class="line">        frontArr.push(nowNode.val);</span><br><span class="line">        nowNode.right &amp;&amp; nodeList.push(nowNode.right);</span><br><span class="line">        nowNode.left &amp;&amp; nodeList.push(nowNode.left);        </span><br><span class="line">    &#125;</span><br><span class="line">    return frontArr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_94. 二叉树的中序遍历</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_94.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_94.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>给定一个二叉树，返回它的 中序 遍历。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,null,2,3]  </span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3 </span><br><span class="line"></span><br><span class="line">输出: [1,3,2]</span><br></pre></td></tr></table></figure></p><p>说明&amp;&amp;进阶:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 递归算法很简单，你可以通过迭代算法完成吗？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">前序排列的顺序是左，父，右。</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>递归，递归判断条件，该节点左右节点是否为null，递归时先左后右。</code></pre><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * function TreeNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.left = this.right = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;TreeNode&#125; root</span><br><span class="line"> * @return &#123;number[]&#125;</span><br><span class="line"> */</span><br><span class="line">var addNode = function (root) &#123;</span><br><span class="line">    root.left &amp;&amp; addNode(root.left);</span><br><span class="line">    inorderArr.push(root.val); // 前，中序遍历唯一区别 </span><br><span class="line">    root.right &amp;&amp; addNode(root.right);</span><br><span class="line">&#125;</span><br><span class="line">let inorderArr = [];</span><br><span class="line">var inorderTraversal = function(root) &#123;</span><br><span class="line">    inorderArr = [];</span><br><span class="line">    if (!root) &#123;</span><br><span class="line">        return inorderArr;</span><br><span class="line">    &#125;</span><br><span class="line">    addNode(root);</span><br><span class="line">    return inorderArr</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><p>   迭代法，基于栈的特性将递推出来的节点压进栈中。然后遵循先进后出的原则，直至将栈排空。</p><h3 id="解答二"><a href="#解答二" class="headerlink" title="解答二"></a>解答二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * function TreeNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.left = this.right = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;TreeNode&#125; root</span><br><span class="line"> * @return &#123;number[]&#125;</span><br><span class="line"> */</span><br><span class="line">let inorderArr = [], nodeList = [], nowNode;</span><br><span class="line">var inorderTraversal = function(root) &#123;</span><br><span class="line">    inorderArr = [], nodeList = [], nowNode = root;</span><br><span class="line">    if (!root) &#123;</span><br><span class="line">        return inorderArr;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    while(nodeList.length &gt; 0 || nowNode) &#123;</span><br><span class="line">        while (nowNode) &#123;</span><br><span class="line">            nodeList.push(nowNode);</span><br><span class="line">            nowNode = nowNode.left;</span><br><span class="line">        &#125;</span><br><span class="line">        nowNode = nodeList.pop();</span><br><span class="line">        inorderArr.push(nowNode.val);</span><br><span class="line">        nowNode = nowNode.right;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return inorderArr</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_264. 丑数 II</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_264.%20%E4%B8%91%E6%95%B0%20II/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_264.%20%E4%B8%91%E6%95%B0%20II/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>编写一个程序，找出第 n 个丑数。</p><p>丑数就是只包含质因数 2, 3, 5 的正整数。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: n = 10</span><br><span class="line">输出: 12</span><br><span class="line">解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。</span><br></pre></td></tr></table></figure></p><p>提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 是丑数。</span><br><span class="line">n 不超过1690。</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>方法一暴力循环（毫无疑问超时了）</code></pre><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var isUgly = function(num) &#123;</span><br><span class="line">    if (num &lt; 1) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">     while(num % 2 == 0) &#123;</span><br><span class="line">             num/=2</span><br><span class="line">         &#125; </span><br><span class="line">     while(num % 3 == 0) &#123;</span><br><span class="line">             num/=3</span><br><span class="line">         &#125; </span><br><span class="line">     while(num % 5 == 0) &#123;</span><br><span class="line">             num/=5</span><br><span class="line">         &#125;</span><br><span class="line">    </span><br><span class="line">    return (num == 1) ? true : false;</span><br><span class="line">&#125;;</span><br><span class="line">    var nthUglyNumber = function(n) &#123;</span><br><span class="line">    var ugly = 1;</span><br><span class="line">    for (var i = 0; i &lt; n; ugly++) &#123;</span><br><span class="line">        if (isUgly(ugly)) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ugly;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><pre><code>1. 根据题目的意思，我们首先知道丑数的因子只能是(2, 3, 5).当我们要从[1],推算出[1,2,3,4,5,6,8,9...]丑数序列时,过程如下var arr = [1]; 推算第二个数：比较arr[0]*2 和 arr[0]*3 和arr[0]*5 中取最小的一个arr[0]*2放进数组中： [1, arr[0]*2]。依次类推下次比较：arr[1]*2 和 arr[0]*3 和 arr[0]*5 中取最小arr[0]*3放进数组中： [1, arr[0]*2, arr[0]*3]依次类推下次比较：arr[1]*2 和 arr[1]*3 和 arr[0]*5 中取最小arr[1]*2放进数组中： [1, arr[0]*2, arr[0]*3, arr[1]*2]等等。。2. 由上可以看出，我们需要丑数组arr, 还有2,3,5三个质因数分别乘到了arr的第几个数。拿2作例子：我们需要知道数组的前多少个已经乘过2了。当arr[0]*2 之后，下次就该arr[1]*2跟其他的作比较了。即这2，3，5需要三个标记。在上面举例中第三次之后的下标为：[2, 1, 0].即下次比较应该用arr[2]*2 和 arr[1]*3 和arr[0]*5 来比较哪个小。3. 中间会遇到比如 arr[2]*2 == arr[1]*3 这样的情况。此时把2，3 的下标都+1即可.最后依次求到目标数组arr的第n个数即为答案。</code></pre><h3 id="解答二"><a href="#解答二" class="headerlink" title="解答二"></a>解答二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var nthUglyNumber = function(n) &#123;</span><br><span class="line">    var arr = [1], indexArr = [0, 0, 0],v2,v3,v5,temp;</span><br><span class="line">    for(var i = 0; i &lt;= n; i++) &#123;</span><br><span class="line">        v2 = arr[indexArr[0]] * 2;        </span><br><span class="line">        v3 = arr[indexArr[1]] * 3;</span><br><span class="line">        v5 = arr[indexArr[2]] * 5;</span><br><span class="line">        temp = Math.min(v2,Math.min(v3,v5)); // 判断最小</span><br><span class="line">        if (temp == v2) &#123;</span><br><span class="line">            indexArr[0]++;</span><br><span class="line">        &#125;</span><br><span class="line">        if (temp == v3) &#123;</span><br><span class="line">            indexArr[1]++;</span><br><span class="line">        &#125;</span><br><span class="line">        if (temp == v5) &#123;</span><br><span class="line">            indexArr[2]++;</span><br><span class="line">        &#125;</span><br><span class="line">        arr.push(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    return arr[n-1];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_26. 删除排序数组中的重复项</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_26.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_26.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定数组 nums = [1,1,2], </span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></p><p>提示：</p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span><br><span class="line">int len = removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>题目中原地的意思大概就是要在原数组中操作不能开辟新的数组空间。题目简单，就是去除数组中的重复元素。首先想到的是删除数组中的重复元素，用到了splice。</code></pre><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var removeDuplicates = function(nums) &#123;</span><br><span class="line">    for (var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">        if (nums.includes(nums[i], i + 1)) &#123;</span><br><span class="line">            nums.splice(i, 1);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return nums.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><pre><code>由于第一种方法用到了splice，所以其实时空间复杂度还是比较高的。所以，根据题目要求我们其实只需要保证数组的前面排列的是我们需要的就可以了。超过的部分我可以忽略不计。那其实就是依次从头填充数组就可以了！直到遍历完数组的最后一位。双指针就解决了。一个用来遍历数组，一个用来从头修改数组。由于题目告诉为排序数组，所以我们可以用i，i+1判断。</code></pre><h3 id="解答二"><a href="#解答二" class="headerlink" title="解答二"></a>解答二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var removeDuplicates = function(nums) &#123;</span><br><span class="line">    var next = 0;</span><br><span class="line">    for (var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">        if (nums[i] != nums[i+1]) &#123;</span><br><span class="line">            nums[next] = nums[i];</span><br><span class="line">            next++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路三"><a href="#解题思路三" class="headerlink" title="解题思路三"></a>解题思路三</h3><pre><code>了解一下ES6的array.includes(searchEle, fromIndex);判断数组种是否含有searchEle。(true / false);searchEle为搜索的元素（必填），fromIndex为从数组的哪一位开始搜索。使用includes同时可以判断非排序的数组</code></pre><h3 id="解答三"><a href="#解答三" class="headerlink" title="解答三"></a>解答三</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var removeDuplicates = function(nums) &#123;</span><br><span class="line">    var j = 0;</span><br><span class="line">    for (var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">        if (!nums.includes(nums[i], i + 1)) &#123;</span><br><span class="line">            nums[j] = nums[i];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return j;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_5198. 丑数 III</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_5198.%20%E4%B8%91%E6%95%B0%20III/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_5198.%20%E4%B8%91%E6%95%B0%20III/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>请你帮忙设计一个程序，用来找出第 n 个丑数。</p><p>丑数是可以被 a 或 b 或 c 整除的 正整数。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3, a = 2, b = 3, c = 5</span><br><span class="line">输出：4</span><br><span class="line">解释：丑数序列为 2, 3, 4, 5, 6, 8, 9, 10... 其中第 3 个是 4。</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4, a = 2, b = 3, c = 4</span><br><span class="line">输出：6</span><br><span class="line">解释：丑数序列为 2, 3, 4, 6, 8, 9, 12... 其中第 4 个是 6。</span><br></pre></td></tr></table></figure></p><p>示例 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 5, a = 2, b = 11, c = 13</span><br><span class="line">输出：10</span><br><span class="line">解释：丑数序列为 2, 4, 6, 8, 10, 11, 12, 13... 其中第 5 个是 10。</span><br></pre></td></tr></table></figure></p><p>示例 4:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1000000000, a = 2, b = 217983653, c = 336916467</span><br><span class="line">输出：1999999984</span><br></pre></td></tr></table></figure></p><p>提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;= n, a, b, c &lt;= 10^9</span><br><span class="line">1 &lt;= a * b * c &lt;= 10^18</span><br><span class="line">本题结果在 [1, 2 * 10^9] 的范围内</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>方法一暴力循环（毫无疑问超时了）</code></pre><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    var nthUglyNumber = function(n, a, b, c) &#123;</span><br><span class="line">    var num = 1;</span><br><span class="line">    for (var i = 1; i &lt;= n; num++) &#123;</span><br><span class="line">        if (num % a == 0 || num % b == 0 || num % c == 0) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return num - 1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><pre><code>1.找出该数可能存在的范围，首先可以思考判断得出最小的值为n ，最大为min(a,b,c) * n2.假设最终结果为finalValue，求出该值的序列长度nums。例如：下面的例子中finalValue为6，而其序列就为[2, 3, 4, 6],长度为4===n。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4, a = 2, b = 3, c = 4</span><br><span class="line">输出：6</span><br><span class="line">解释：丑数序列为 2, 3, 4, 6, 8, 9, 12... 其中第 4 个是 6。</span><br></pre></td></tr></table></figure>3.通过二分法查找finalValue4.判断条件为: nums.length === n ? ，如果相等即为该值。** 注意：finalValue必须符合是a，b，c的倍数，且是所有符合条件的值中最小的一个。 **</code></pre><h3 id="解答二"><a href="#解答二" class="headerlink" title="解答二"></a>解答二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//最大公约数 ：a和 a%b 的最大公约数 和 a 和 b 的最大公约数一致</span><br><span class="line">var maxComFn = function(a, b) &#123;</span><br><span class="line">    if (a % b === 0) &#123;</span><br><span class="line">        return b;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return maxComFn(b, a % b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//最小公倍数  公式法： a*b === a和b的最大公约数 * a和b的最小公倍数</span><br><span class="line">var minComFn = function(a, b) &#123;</span><br><span class="line">    var maxC = maxComFn(a, b)</span><br><span class="line">    return a * b / maxC;</span><br><span class="line">&#125;</span><br><span class="line">//值的序列长度  容斥定理， 含有a，b，c的个数 - ab，ac，bc的公倍数的个数 + abc公倍数的个数</span><br><span class="line">var inNumsFn = function(a, b, c, num) &#123;</span><br><span class="line">    return Math.floor(num / a) + </span><br><span class="line">        Math.floor(num / b) +</span><br><span class="line">        Math.floor(num / c) -</span><br><span class="line">        Math.floor(num / minComFn(a, b)) -</span><br><span class="line">        Math.floor(num / minComFn(a, c)) -</span><br><span class="line">        Math.floor(num / minComFn(c, b)) +</span><br><span class="line">        Math.floor(num / minComFn(c, minComFn(a, b)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var nthUglyNumber = function(n, a, b, c) &#123;</span><br><span class="line">    var maxCom = maxComFn(a, maxComFn(b, c));</span><br><span class="line">    let mid,</span><br><span class="line">        left = n,</span><br><span class="line">        right = n * Math.min(a, b, c);</span><br><span class="line">    while (left &lt; right) &#123;</span><br><span class="line">        mid = Math.floor((left + right) / 2);</span><br><span class="line">        if (inNumsFn(a, b, c, mid) &lt; n) &#123;</span><br><span class="line">            left = mid + 1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            right = mid; //一直求到最小。</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_1189. “气球” 的最大数量</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_1189.%20%E2%80%9C%E6%B0%94%E7%90%83%E2%80%9D%20%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_1189.%20%E2%80%9C%E6%B0%94%E7%90%83%E2%80%9D%20%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>给你一个字符串 text，你需要使用 text 中的字母来拼凑尽可能多的单词 “balloon”（气球）。</p><p>字符串 text 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 “balloon”。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：text = &quot;nlaebolko&quot;</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：text = &quot;loonbalxballpoon&quot;</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure></p><p>提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;= text.length &lt;= 10^4</span><br><span class="line">text 全部由小写英文字母组成</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>先找出各个字母的个数，然后找出其中的最小值(o,l数量除以2)。用match正则检测字符串中符合条件的字母，其长度即为该字母在字符串中的个数。</code></pre><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var maxNumberOfBalloons = function(text) &#123;</span><br><span class="line">    let regexp, singleNum, min = text.length;</span><br><span class="line">    for (let i in &quot;balon&quot;) &#123;</span><br><span class="line">        regexp = new RegExp(&quot;balon&quot;[i], &apos;g&apos;);</span><br><span class="line">        singleNum = text.match(regexp).length;</span><br><span class="line">        if (&quot;balon&quot;[i]) == &apos;o&apos; || &quot;balon&quot;[i]) == &apos;l&apos;) &#123;</span><br><span class="line">            singleNum = Math.floor(singleNum / 2)</span><br><span class="line">        &#125;</span><br><span class="line">        min = (min &lt;= singleNum) ? min : singleNum;</span><br><span class="line">    &#125;</span><br><span class="line">    return min;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><pre><code>用split分割字符串，分割之后的数组长度-1 就是该字符(分隔符)在该字符串中的个数。</code></pre><h3 id="解答二"><a href="#解答二" class="headerlink" title="解答二"></a>解答二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var maxNumberOfBalloons = function(text) &#123;</span><br><span class="line">    let singleNum, min = text.length;</span><br><span class="line">    for (let i in &quot;balon&quot;) &#123;</span><br><span class="line">        singleNum = text.split(&quot;balon&quot;[i]).length - 1;</span><br><span class="line">        if (&quot;balon&quot;[i]) == &apos;o&apos; || &quot;balon&quot;[i]) == &apos;l&apos;) &#123;</span><br><span class="line">            singleNum = Math.floor(singleNum / 2)</span><br><span class="line">        &#125;</span><br><span class="line">        min = (min &lt;= singleNum) ? min : singleNum;</span><br><span class="line">    &#125;</span><br><span class="line">    return min;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_14. 最长公共前缀</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_14.%20%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_14.%20%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><pre><code>编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 &quot;&quot;。</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出: &quot;fl&quot;</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line">解释: 输入不存在公共前缀。</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>依序判断所有字符串的第N位字符是否一致。一致就加入共同前缀，不一致就跳出返回之前的前缀。</code></pre><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var longestCommonPrefix = function(strs) &#123;</span><br><span class="line">    // 首先判断一下边界情况：</span><br><span class="line">    // 1. 当长度为0时，结果必然为&quot;&quot;;</span><br><span class="line">    // 2. 当长度为1时，结果必然为&quot;strs[0]&quot;;</span><br><span class="line">    if (!strs.length) &#123;return &quot;&quot;;&#125;;</span><br><span class="line">    if (strs.length == 1) &#123;return strs[0]&#125;;</span><br><span class="line">    // 定义公共前缀</span><br><span class="line">    let comStr = &quot;&quot;;</span><br><span class="line">    // 循环每个字符串的每个字母,以第一个字符串的长度为准</span><br><span class="line">    for (let i = 0; i &lt; strs[0].length; i++) &#123;</span><br><span class="line">        // 定义每次循环的第一个字符串的字母 当其字符串长度不够时，取值为undefined,所以会判断为不相等跳出循环。</span><br><span class="line">        let item = strs[0][i];</span><br><span class="line">        // 循环数组</span><br><span class="line">        for (let j = 0; j &lt; strs.length; j++) &#123;</span><br><span class="line">            //判断所有字符串的第i个字母是否一致，不一致返回原来的共同前缀。</span><br><span class="line">            if (strs[j][i] != item) &#123;  </span><br><span class="line">                return comStr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //一致的话将该字母加入共同前缀</span><br><span class="line">        comStr += item;</span><br><span class="line">    &#125;</span><br><span class="line">    // 回共同前缀 当所有字符串都一致的情况下才会在此处返回。</span><br><span class="line">    return comStr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><pre><code>对数组中的字符串排序，然后比较最大和最小的字符串的公共前缀。即为数组的公共前缀</code></pre><h3 id="解答二"><a href="#解答二" class="headerlink" title="解答二"></a>解答二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var longestCommonPrefix = function(strs) &#123;</span><br><span class="line">    if (!strs.length) &#123;return &quot;&quot;;&#125;;</span><br><span class="line">    if (strs.length == 1) &#123;return strs[0]&#125;;</span><br><span class="line">    let comStr = &quot;&quot;;</span><br><span class="line">    strs.sort();</span><br><span class="line">    for (let i = 0; i &lt; strs[0].length; i++) &#123;</span><br><span class="line">        if (strs[0][i] != strs[strs.length - 1][i]) &#123;</span><br><span class="line">            return strs[0].slice(0, (i + 1));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return strs[0];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_35. 搜索插入位置</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_35.%20%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_35.%20%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>你可以假设数组中无重复元素。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 5</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 0</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>利用findIndex函数遍历数组。</code></pre><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var findFuc = function(el, index, arr) &#123;</span><br><span class="line">    return el &gt;= this</span><br><span class="line">&#125;</span><br><span class="line">var searchInsert = function(nums, target) &#123;</span><br><span class="line">    return nums.findIndex(findFuc, target) == -1 ? nums.length : nums.findIndex(findFuc, target)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h3><pre><code>利用二分法遍历数组。</code></pre><h3 id="解答二"><a href="#解答二" class="headerlink" title="解答二"></a>解答二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var searchInsert = function(nums, target) &#123;</span><br><span class="line">    if (nums[0] &gt;= target) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125; </span><br><span class="line">    if (nums[nums.length - 1] &lt; target) &#123;</span><br><span class="line">        return nums.length;</span><br><span class="line">    &#125; </span><br><span class="line">    let left = 0, right = nums.length - 1, mid = parseInt((nums.length - 1)/2);</span><br><span class="line">    while(left &lt; (right-1)) &#123;</span><br><span class="line">        if (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; else if (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return mid;</span><br><span class="line">        &#125;</span><br><span class="line">        mid = parseInt((left + right) / 2);</span><br><span class="line">    &#125;</span><br><span class="line">    return right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5 Drag &amp; Drop 拖拽与拖放</title>
      <link href="/JavaScript/HTML5%20drag%20&amp;%20drop%20%E6%8B%96%E6%8B%BD%E4%B8%8E%E6%8B%96%E6%94%BE/"/>
      <url>/JavaScript/HTML5%20drag%20&amp;%20drop%20%E6%8B%96%E6%8B%BD%E4%B8%8E%E6%8B%96%E6%94%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="拖拽与拖放"><a href="#拖拽与拖放" class="headerlink" title="拖拽与拖放"></a>拖拽与拖放</h2><blockquote><p>drop &amp; drag 是html5自带的拖拽与拖放的api</p></blockquote><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><p>所有需要被拖动的元素都要加上draggable属性，默认除了a，img等标签外不可拖动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// html 行内绑定</span><br><span class="line">&lt;element ondrag=&quot;myScript&quot;&gt;</span><br><span class="line">// js 绑定元素</span><br><span class="line">object.ondrag=function()&#123;&#125;;</span><br><span class="line">// 全局监听</span><br><span class="line">object.addEventListener(&quot;drag&quot;, myScript);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="相关重点api"><a href="#相关重点api" class="headerlink" title="相关重点api"></a>相关重点api</h3><ul><li>拖拽元素上触发的事件（事件target是拖拽元素）</li></ul><ol><li>dragstart  被拖拽元素开始被拖拽时触发。</li><li>drag  被拖拽元素拖拽中触发</li><li>dragend  完成拖动时触发。</li></ol><ul><li>拖拽目标容器上的事件（事件target是目标容器）</li></ul><ol start="4"><li>dragenter  被拖拽元素在进入其原始容器内的时候触发。</li><li>dragleave  跟enter相对应。</li><li>dragover  在另一容器内时触发（实测，只要我开始拖动之后就一直触发，且该事件需要阻止浏览器默认事件，因为在其他容器内都是默认不能拖动的。）</li><li>drop 释放鼠标时候触发</li></ol><h3 id="DataTransfer-是拖拽元素的一个媒介对象，可以设置一些功能"><a href="#DataTransfer-是拖拽元素的一个媒介对象，可以设置一些功能" class="headerlink" title="DataTransfer 是拖拽元素的一个媒介对象，可以设置一些功能"></a>DataTransfer 是拖拽元素的一个媒介对象，可以设置一些功能</h3><ul><li><p>dataTransfer.dropEffect：设置或返回拖放目标上允许发生的拖放行为。如果此设置的拖放行为不在effectAllowed属性设置的多种拖放行为之内，拖放操作将会失败。该属性值只允许none、copy、link、move值之一。</p></li><li><p>dataTransfer.effectAllowed：设置或返回被拖动元素允许发生的拖动行为。该属性值可设置为none、copy、copyLink、copyMove、link、linkMove、move、all、uninitialized。</p></li><li><p>dataTransfer.items：该属性返回DataTransferItems对象，该对象代表了拖动数据。</p></li><li><p>dataTransfer.setDragImage(element x,y)：设置拖放操作的自定义图标。其中element设置自定义图标，x设置图标与鼠标在水平方向的距离；y设置图标与鼠标在垂直方向的距离。</p></li><li><p>dataTransfer.addElement(element)：添加自定义图标。</p></li><li><p>dataTransfer.types：该属性返回一个DOMStringList对象，该对象包括了存入dataTransfer中数据的所有类型。</p></li><li><p>dataTransfer.getData(format)：获取DataTransfer对象中设置format格式的数据。其中format代表数据格式，data代表数据。</p></li><li><p>dataTransfer.clearData([format])：清除DataTransfer对象中format格式的数据，如果省略format格式，则意味着清除DataTransfer对象中的全部数据。</p></li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;span  draggable=&quot;true&quot; &gt;&lt;/span&gt;  // 所有需要被拖动的元素都要加上draggable属性，默认除了a，img等标签外不可拖动。</span><br><span class="line"></span><br><span class="line">//start drag end 中 event都是被拖拽的元素</span><br><span class="line"></span><br><span class="line">document.addEventListener(&quot;dragstart&quot;, function (event) &#123; </span><br><span class="line">    var id = $(event.target).prop(&apos;id&apos;); </span><br><span class="line">    event.dataTransfer.dropEffect = &apos;move&apos; //设置拖动样式</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//dragover dragleave   dragenter drop 中event都代表拖放的容器元素  </span><br><span class="line"></span><br><span class="line">document.addEventListener(&quot;dragover&quot;, function(event) &#123;  </span><br><span class="line">    // drop 阻止浏览器默认事件</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    console.log(&quot;容器内&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>下一章：</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Font-Family字体对照表及效果展示</title>
      <link href="/Css/font-family%E5%AD%97%E4%BD%93%E5%AF%B9%E7%85%A7%E8%A1%A8%E5%8F%8A%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA/"/>
      <url>/Css/font-family%E5%AD%97%E4%BD%93%E5%AF%B9%E7%85%A7%E8%A1%A8%E5%8F%8A%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>直接进demo演示页面查看吧。</p><p><a href="http://www.zsfmyz.top/demo/font/">demo演示地址</a></p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Video截图功能实现</title>
      <link href="/JavaScript/Video%E6%88%AA%E5%9B%BE%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
      <url>/JavaScript/Video%E6%88%AA%E5%9B%BE%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p>因为所在公司业务为视频编解码，所以项目大多数是围绕视频展开的，之前做了一个快编项目，可以当作一个web端的小型视频编辑器。当中就需要对视频当前帧图进行截取，然后后续当作视频的封面或者海报图。 那么我就需要实现这么一个视频截图的功能。</p></blockquote><a id="more"></a><h3 id="API简介"><a href="#API简介" class="headerlink" title="API简介"></a>API简介</h3><ol><li><p>首先视频截图在我们大前端实现，就要借助canvas的drawImage()这个api了。</p><ul><li>drawImage 该api的功能简单讲就是将一张图片(Source image)绘制在canvas(Destination canvas)上. </li><li><p>语法：</p><blockquote><p>void ctx.drawImage(image, dx, dy);<br>void ctx.drawImage(image, dx, dy, dWidth, dHeight);<br>void ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);</p></blockquote></li><li><p>image： 原图片Element.</p></li><li>sx, sy, sWidth, sHeight : 需要在原图取起点x，y，宽，高；</li><li>dx, dy, dWidth, dHeight：在目标canvas上绘制的起点x，y，宽，高。</li><li>image，dx，dy为必填</li></ul></li><li><p>当我们截取并绘制完图片之后，就需要将在canvas上绘制的图片转化为图片了，那就需要 toDataURL(‘image/png’) 将其转换。</p><ul><li>该方法返回一个用作展示的图片地址。 </li><li><p>语法：</p><blockquote><p>canvas.toDataURL(type, encoderOptions); </p></blockquote></li><li><p>type: 默认为 image/png， 可选 image/jpeg或者image/webp </p></li><li>encoderOptions：当type为 jpeg或者webp 时，可以选择0-1区间内的值作为输出的图片质量。</li></ul></li></ol><p> <strong>MDN</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL" target="_blank" rel="noopener">HTMLCanvasElement.toDataURL()</a> </li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL" target="_blank" rel="noopener">CanvasRenderingContext2D.drawImage()</a></li></ul><hr><p>回到正题，函数实现</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>HTML</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;video id=&quot;video&quot; controls=&quot;controls&quot;&gt;</span><br><span class="line">    &lt;source src=&quot;../videos/xxx.mp4&quot; /&gt;</span><br><span class="line">&lt;/video&gt;</span><br><span class="line">&lt;button id=&quot;capture&quot;&gt;Capture&lt;/button&gt;</span><br><span class="line">&lt;div id=&quot;output&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><strong>Script</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(function() &#123;</span><br><span class="line">    var video, $output;</span><br><span class="line">    var scale = 0.25;</span><br><span class="line">    var initialize = function() &#123;</span><br><span class="line">        $output = $(&quot;#output&quot;);</span><br><span class="line">        video = $(&quot;#video&quot;).get(0);</span><br><span class="line">        $(&quot;#capture&quot;).click(captureImage);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    var captureImage = function() &#123;</span><br><span class="line">        var canvas = document.createElement(&quot;canvas&quot;);</span><br><span class="line">        canvas.width = video.videoWidth * scale;</span><br><span class="line">        canvas.height = video.videoHeight * scale;</span><br><span class="line"></span><br><span class="line">        canvas.getContext(&apos;2d&apos;).drawImage(video, 0, 0, canvas.width, canvas.height);</span><br><span class="line">        </span><br><span class="line">        var img = document.createElement(&quot;img&quot;);</span><br><span class="line"></span><br><span class="line">        img.src = canvas.toDataURL(&apos;image/png&apos;);</span><br><span class="line">        </span><br><span class="line">        $output.prepend(img);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $(initialize);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p><a href="http://www.zsfmyz.top/demo/1/">demo演示地址</a></p><p>大家可以用webstrom内置的服务器进行测试。</p><p>使用chrome浏览器需要一个服务器环境，否则canvas的toDataURL方法会报错。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Border-Radius(圆角)失效了？</title>
      <link href="/Css/border-radius(%E5%9C%86%E8%A7%92)%E5%A4%B1%E6%95%88%E4%BA%86%EF%BC%9F/"/>
      <url>/Css/border-radius(%E5%9C%86%E8%A7%92)%E5%A4%B1%E6%95%88%E4%BA%86%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天涉及两个属性：</p><ol><li>overscroll: scroll-y / scroll-x / scroll;</li><li>border-radius: 10px;</li></ol></blockquote><a id="more"></a><p>原本这两个属性是没有什么联系的，但是当同时出现在同一个元素上时，就会发生圆角效果被滑动条覆盖的情况。<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">div &#123;</span><br><span class="line">border-radius:10px;</span><br><span class="line">overflow:scroll-y;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>这种情况下，div的右上角和右下角都会因为滚动条的存在而显示的是直角。<br>其实div的四个角确实已经有了圆角的效果，但是滚动条属于div内部的元素，层级高，所以将div的圆角遮挡住了。那么我们解决这种情况的方法也很简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">div &#123;</span><br><span class="line">border-radius: 10px;</span><br><span class="line">overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">ul &#123;</span><br><span class="line">overflow: scroll-y;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;ul&gt;&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>我们在原本需要滚动的盒子内部加上一层滚动元素，将滚动的效果放在内部的滚动元素上，外部div加上overflow: hidden;并设置圆角，就可以达到我们需要的效果。</p><p>同样的我们也可以在当前元素的外层加上圆角遮罩，最终效果同上。</p><p>如有其他情况欢迎补充</p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建配置总结</title>
      <link href="/Hexo/Hexo%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/"/>
      <url>/Hexo/Hexo%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>主题是material-x</p><p>简介：</p><ol><li><strong>Hexo 添加Favicon</strong></li><li><strong>Hexo 添加百度统计</strong></li><li><strong>Hexo RSS订阅</strong></li><li><strong>Hexo 添加看板娘</strong></li><li><strong>Hexo 网站地图</strong></li><li><strong>Hexo 评论系统 gitalk</strong></li></ol><a id="more"></a><h3 id="Hexo-添加Favicon"><a href="#Hexo-添加Favicon" class="headerlink" title="Hexo 添加Favicon"></a>Hexo 添加Favicon</h3><p><strong>根目录_config.yml</strong></p><ul><li>根目录为public的时候,图片放在source下面的img里面就可以，没有的话创建个img文件夹。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">favicon: https://www.xxx.com/img/favicon.ico</span><br></pre></td></tr></table></figure><h3 id="Hexo-添加百度统计"><a href="#Hexo-添加百度统计" class="headerlink" title="Hexo 添加百度统计"></a>Hexo 添加百度统计</h3><ol><li>首先肯定是要去百度统计注册一下了。。<a href="https://tongji.baidu.com/web/" target="_blank" rel="noopener">百度统计</a>注册完成之后生成统计代码，备用。</li><li><p>在<strong>主题配置文件_config.yml</strong>里面添加一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Analytics</span><br><span class="line">cnzz: true</span><br></pre></td></tr></table></figure></li><li><p>找到 <strong>\hexo\themes\pacman\layout_partial</strong>,在这个文件夹中创建一个cnzz.ejs的文件然后将下面内容复制进去，记得替换中间的script</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">&lt;% if (theme.cnzz)&#123; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 将中间这一块script替换成你的统计代码 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var cnzz_protocol = ((&quot;https:&quot; == document.location.protocol) ? &quot; https://&quot;: &quot; http://&quot;);</span><br><span class="line">    document.write(unescape(&quot;%3Cspan id=&apos;cnzz_stat_icon_1000543074&apos;%3E%3C/span%3E%3Cscript src=&apos;&quot; + cnzz_protocol + &quot;s19.cnzz.com/z_stat.php%3Fid%3D1000543074%26show%3Dpic&apos; type=&apos;text/javascript&apos;%3E%3C/script%3E&quot;));</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li><li><p>在 <strong>\hexo\themes\pacman\layout_partial\footer.ejs</strong>中加一行下面的代码，然后就结束了。重启生效就可以了。然后在百度中心检测代码有没有安装成功，生效了就可以看报告了。这个过程需要一定的时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(&apos;cnzz&apos;) %&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Hexo-RSS订阅"><a href="#Hexo-RSS订阅" class="headerlink" title="Hexo RSS订阅"></a>Hexo RSS订阅</h3><ol><li>进入hexo目录</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>根目录_config.yml</strong>中添加</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#RSS订阅</span><br><span class="line">plugin:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">type: atom</span><br><span class="line">path: atom.xml</span><br><span class="line">limit: 20</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>主题目录下_config.yml</strong>中添加<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure></li></ol><h3 id="Hexo-添加看板娘"><a href="#Hexo-添加看板娘" class="headerlink" title="Hexo 添加看板娘"></a>Hexo 添加看板娘</h3><ol><li>进入hexo目录</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>根目录_config.yml</strong>中添加</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#看板娘</span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: false</span><br><span class="line">  log: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko #可选择不同的看板娘名称</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br><span class="line">  react:</span><br><span class="line">    opacity: 0.7</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>可以添加看板娘列表</strong>中添加<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure></li></ol><p>想用哪个就 npm install –save xxx ， 然后在配置文件use: xxx 进行修改就好了。</p><ol start="4"><li><strong>取消看板娘</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>然后去掉配置文件里面的配置就好了</p><h3 id="Hexo-网站地图"><a href="#Hexo-网站地图" class="headerlink" title="Hexo 网站地图"></a>Hexo 网站地图</h3><ol><li><strong>添加sitemap</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save #sitemap.xml适合提交给谷歌搜素引擎</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save #baidusitemap.xml适合提交百度搜索引擎</span><br></pre></td></tr></table></figure><p>然后在站点配置文件_config.yml中添加以下代码</p><ol start="2"><li>自动生成sitemap,在<strong>根目录_config.yml</strong>中添加</li></ol><p>sitemap:<br>    path: sitemap.xml<br>baidusitemap:<br>    path: baidusitemap.xml</p><p>最后修改<strong>根目录_config.yml</strong>中的url</p><p>url: http://你的网站</p><p>然后hexo g, 会在/public目录下生成sitemap.xml和baidusitemap.xml 网站地图。</p><h3 id="Hexo-评论系统-gitalk"><a href="#Hexo-评论系统-gitalk" class="headerlink" title="Hexo 评论系统 gitalk"></a>Hexo 评论系统 gitalk</h3><ol><li><p><strong>创建评论仓库</strong></p><ol><li>首先到<a href="https://github.com/new" target="_blank" rel="noopener">github中创建repository</a>，库名称可以叫XXXtalk，因为这个仓库是用来存储我们的评论内容的。</li><li>创建好之后，进入这个仓库的settings界面找到issues选项，确保它的勾选着的。</li></ol></li><li><p><strong>注册Github Application</strong></p><ol><li>到<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">github中创建Github Application</a>。</li><li>名称和描述可以随意填写，两个URL填写你的博客地址就可以了。注册之后就可以看到Client ID 和 Client Secret。这两个是我们需要的东西。</li></ol></li><li><p><strong>根目录下配置gitalk</strong></p><ol><li><p>将下面的代码赋值到根目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gitalk: </span><br><span class="line">    clientID: 你的clientID </span><br><span class="line">    clientSecret: 你的clientSecret</span><br><span class="line">    repo: 你的repo名 //xxxtalk 刚才我们创建的仓库名</span><br><span class="line">    owner: 你的GitHub名 </span><br><span class="line">    admin: [你的GitHub名称]</span><br></pre></td></tr></table></figure></li><li><p>接下来hexo g 执行之后，你会发现你的文章下面会出现评论了。</p></li></ol></li><li><p><strong>错误处理</strong></p><ol><li>第一次添加gitalk出现了 Error:Validation Failed 这样的错误具体原因是因为Github 限制 labal 长度不能超过 50引起的。 解决办法是使用md5对id进行加密。</li><li><p>解决方案：<br>首先将下面的内容保存为md5.js放在 themes/material-X/source/js/ 下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">! function(n) &#123;</span><br><span class="line">    &quot;use strict&quot;;</span><br><span class="line">    function t(n, t) &#123;</span><br><span class="line">        var r = (65535 &amp; n) + (65535 &amp; t);</span><br><span class="line">        return (n &gt;&gt; 16) + (t &gt;&gt; 16) + (r &gt;&gt; 16) &lt;&lt; 16 | 65535 &amp; r</span><br><span class="line">    &#125;</span><br><span class="line">    function r(n, t) &#123;</span><br><span class="line">        return n &lt;&lt; t | n &gt;&gt;&gt; 32 - t</span><br><span class="line">    &#125;</span><br><span class="line">    function e(n, e, o, u, c, f) &#123;</span><br><span class="line">        return t(r(t(t(e, n), t(u, f)), c), o)</span><br><span class="line">    &#125;</span><br><span class="line">    function o(n, t, r, o, u, c, f) &#123;</span><br><span class="line">        return e(t &amp; r | ~t &amp; o, n, t, u, c, f)</span><br><span class="line">    &#125;</span><br><span class="line">    function u(n, t, r, o, u, c, f) &#123;</span><br><span class="line">        return e(t &amp; o | r &amp; ~o, n, t, u, c, f)</span><br><span class="line">    &#125;</span><br><span class="line">    function c(n, t, r, o, u, c, f) &#123;</span><br><span class="line">        return e(t ^ r ^ o, n, t, u, c, f)</span><br><span class="line">    &#125;</span><br><span class="line">    function f(n, t, r, o, u, c, f) &#123;</span><br><span class="line">        return e(r ^ (t | ~o), n, t, u, c, f)</span><br><span class="line">    &#125;</span><br><span class="line">    function i(n, r) &#123;</span><br><span class="line">        n[r &gt;&gt; 5] |= 128 &lt;&lt; r % 32, n[14 + (r + 64 &gt;&gt;&gt; 9 &lt;&lt; 4)] = r;</span><br><span class="line">        var e, i, a, d, h, l = 1732584193,</span><br><span class="line">            g = -271733879,</span><br><span class="line">            v = -1732584194,</span><br><span class="line">            m = 271733878;</span><br><span class="line">        for (e = 0; e &lt; n.length; e += 16) i = l, a = g, d = v, h = m, g = f(g = f(g = f(g = f(g = c(g = c(g = c(g = c(g = u(g = u(g = u(g = u(g = o(g = o(g = o(g = o(g, v = o(v, m = o(m, l = o(l, g, v, m, n[e], 7, -680876936), g, v, n[e + 1], 12, -389564586), l, g, n[e + 2], 17, 606105819), m, l, n[e + 3], 22, -1044525330), v = o(v, m = o(m, l = o(l, g, v, m, n[e + 4], 7, -176418897), g, v, n[e + 5], 12, 1200080426), l, g, n[e + 6], 17, -1473231341), m, l, n[e + 7], 22, -45705983), v = o(v, m = o(m, l = o(l, g, v, m, n[e + 8], 7, 1770035416), g, v, n[e + 9], 12, -1958414417), l, g, n[e + 10], 17, -42063), m, l, n[e + 11], 22, -1990404162), v = o(v, m = o(m, l = o(l, g, v, m, n[e + 12], 7, 1804603682), g, v, n[e + 13], 12, -40341101), l, g, n[e + 14], 17, -1502002290), m, l, n[e + 15], 22, 1236535329), v = u(v, m = u(m, l = u(l, g, v, m, n[e + 1], 5, -165796510), g, v, n[e + 6], 9, -1069501632), l, g, n[e + 11], 14, 643717713), m, l, n[e], 20, -373897302), v = u(v, m = u(m, l = u(l, g, v, m, n[e + 5], 5, -701558691), g, v, n[e + 10], 9, 38016083), l, g, n[e + 15], 14, -660478335), m, l, n[e + 4], 20, -405537848), v = u(v, m = u(m, l = u(l, g, v, m, n[e + 9], 5, 568446438), g, v, n[e + 14], 9, -1019803690), l, g, n[e + 3], 14, -187363961), m, l, n[e + 8], 20, 1163531501), v = u(v, m = u(m, l = u(l, g, v, m, n[e + 13], 5, -1444681467), g, v, n[e + 2], 9, -51403784), l, g, n[e + 7], 14, 1735328473), m, l, n[e + 12], 20, -1926607734), v = c(v, m = c(m, l = c(l, g, v, m, n[e + 5], 4, -378558), g, v, n[e + 8], 11, -2022574463), l, g, n[e + 11], 16, 1839030562), m, l, n[e + 14], 23, -35309556), v = c(v, m = c(m, l = c(l, g, v, m, n[e + 1], 4, -1530992060), g, v, n[e + 4], 11, 1272893353), l, g, n[e + 7], 16, -155497632), m, l, n[e + 10], 23, -1094730640), v = c(v, m = c(m, l = c(l, g, v, m, n[e + 13], 4, 681279174), g, v, n[e], 11, -358537222), l, g, n[e + 3], 16, -722521979), m, l, n[e + 6], 23, 76029189), v = c(v, m = c(m, l = c(l, g, v, m, n[e + 9], 4, -640364487), g, v, n[e + 12], 11, -421815835), l, g, n[e + 15], 16, 530742520), m, l, n[e + 2], 23, -995338651), v = f(v, m = f(m, l = f(l, g, v, m, n[e], 6, -198630844), g, v, n[e + 7], 10, 1126891415), l, g, n[e + 14], 15, -1416354905), m, l, n[e + 5], 21, -57434055), v = f(v, m = f(m, l = f(l, g, v, m, n[e + 12], 6, 1700485571), g, v, n[e + 3], 10, -1894986606), l, g, n[e + 10], 15, -1051523), m, l, n[e + 1], 21, -2054922799), v = f(v, m = f(m, l = f(l, g, v, m, n[e + 8], 6, 1873313359), g, v, n[e + 15], 10, -30611744), l, g, n[e + 6], 15, -1560198380), m, l, n[e + 13], 21, 1309151649), v = f(v, m = f(m, l = f(l, g, v, m, n[e + 4], 6, -145523070), g, v, n[e + 11], 10, -1120210379), l, g, n[e + 2], 15, 718787259), m, l, n[e + 9], 21, -343485551), l = t(l, i), g = t(g, a), v = t(v, d), m = t(m, h);</span><br><span class="line">        return [l, g, v, m]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function a(n) &#123;</span><br><span class="line">        var t, r = &quot;&quot;,</span><br><span class="line">            e = 32 * n.length;</span><br><span class="line">        for (t = 0; t &lt; e; t += 8) r += String.fromCharCode(n[t &gt;&gt; 5] &gt;&gt;&gt; t % 32 &amp; 255);</span><br><span class="line">        return r</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function d(n) &#123;</span><br><span class="line">        var t, r = [];</span><br><span class="line">        for (r[(n.length &gt;&gt; 2) - 1] = void 0, t = 0; t &lt; r.length; t += 1) r[t] = 0;</span><br><span class="line">        var e = 8 * n.length;</span><br><span class="line">        for (t = 0; t &lt; e; t += 8) r[t &gt;&gt; 5] |= (255 &amp; n.charCodeAt(t / 8)) &lt;&lt; t % 32;</span><br><span class="line">        return r</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function h(n) &#123;</span><br><span class="line">        return a(i(d(n), 8 * n.length))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function l(n, t) &#123;</span><br><span class="line">        var r, e, o = d(n),</span><br><span class="line">            u = [],</span><br><span class="line">            c = [];</span><br><span class="line">        for (u[15] = c[15] = void 0, o.length &gt; 16 &amp;&amp; (o = i(o, 8 * n.length)), r = 0; r &lt; 16; r += 1) u[r] = 909522486 ^ o[r], c[r] = 1549556828 ^ o[r];</span><br><span class="line">        return e = i(u.concat(d(t)), 512 + 8 * t.length), a(i(c.concat(e), 640))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function g(n) &#123;</span><br><span class="line">        var t, r, e = &quot;&quot;;</span><br><span class="line">        for (r = 0; r &lt; n.length; r += 1) t = n.charCodeAt(r), e += &quot;0123456789abcdef&quot;.charAt(t &gt;&gt;&gt; 4 &amp; 15) + &quot;0123456789abcdef&quot;.charAt(15 &amp; t);</span><br><span class="line">        return e</span><br><span class="line">    &#125;</span><br><span class="line">    function v(n) &#123;</span><br><span class="line">        return unescape(encodeURIComponent(n))</span><br><span class="line">    &#125;</span><br><span class="line">    function m(n) &#123;</span><br><span class="line">        return h(v(n))</span><br><span class="line">    &#125;</span><br><span class="line">    function p(n) &#123;</span><br><span class="line">        return g(m(n))</span><br><span class="line">    &#125;</span><br><span class="line">    function s(n, t) &#123;</span><br><span class="line">        return l(v(n), v(t))</span><br><span class="line">    &#125;</span><br><span class="line">    function C(n, t) &#123;</span><br><span class="line">        return g(s(n, t))</span><br><span class="line">    &#125;</span><br><span class="line">    function A(n, t, r) &#123;</span><br><span class="line">        return t ? r ? s(t, n) : C(t, n) : r ? m(n) : p(n)</span><br><span class="line">    &#125;</span><br><span class="line">    &quot;function&quot; == typeof define &amp;&amp; define.amd ? define(function() &#123;</span><br><span class="line">        return A</span><br><span class="line">    &#125;) : &quot;object&quot; == typeof module &amp;&amp; module.exports ? module.exports = A : n.md5 = A</span><br><span class="line">&#125;(this);</span><br></pre></td></tr></table></figure><p> 保存之后，修改主题目录下 layout/_partial/scripts.ejs 138行，修改如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (enableGitalk) &#123; %&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;/js/md5.js&quot;&gt;&lt;/script&gt; // 添加！！！！</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var gitalk = new Gitalk(&#123;</span><br><span class="line">            clientID: &quot;&lt;%- config.gitalk.clientID %&gt;&quot;,</span><br><span class="line">            clientSecret: &quot;&lt;%- config.gitalk.clientSecret %&gt;&quot;,</span><br><span class="line">            repo: &quot;&lt;%- config.gitalk.repo %&gt;&quot;,</span><br><span class="line">            owner: &quot;&lt;%- config.gitalk.owner %&gt;&quot;,</span><br><span class="line">            admin: &quot;&lt;%- config.gitalk.admin %&gt;&quot;,</span><br><span class="line">            &lt;% if(page.gitalk &amp;&amp; page.gitalk.id) &#123; %&gt;</span><br><span class="line">            id: &quot;&lt;%= page.gitalk.id %&gt;&quot;,</span><br><span class="line">            &lt;% &#125; else &#123; %&gt;</span><br><span class="line">            id: md5(location.pathname), // 修改！！！！</span><br><span class="line">            &lt;% &#125; %&gt;</span><br><span class="line">            distractionFreeMode: false // Facebook-like distraction free mode</span><br><span class="line">        &#125;);</span><br><span class="line">        gitalk.render(&apos;gitalk-container&apos;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p> 如上一处添加，一处修改，当然也可以将这块代码完全替换了也可以，然后hexo g 之后问题应该就解决了。</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Z-Index失效了？</title>
      <link href="/Css/z-index%E5%A4%B1%E6%95%88%E4%BA%86%EF%BC%9F%20/"/>
      <url>/Css/z-index%E5%A4%B1%E6%95%88%E4%BA%86%EF%BC%9F%20/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p>我们在使用z-index的时候，有时候会发现，无论怎么样增大z-index的值，都无法改变目标元素的层级。</p></blockquote><ul><li><strong> 其实是这几种情况在作怪 </strong></li></ul><ol><li><strong>position</strong></li><li><strong>float</strong></li><li><strong>opcity</strong> <a id="more"></a></li></ol><h3 id="父盒子的层级问题"><a href="#父盒子的层级问题" class="headerlink" title="父盒子的层级问题"></a>父盒子的层级问题</h3><ul><li>父盒子的层级问题，当你的父盒子层级小于另一个父盒子层级的时候，你子元素的z-index再高都是没有用的。该元素的层级只在该元素所在的容器内起作用。该种情况大家应该容易理解，不过也可以看下面的例子。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        .a1&#123;</span><br><span class="line">            position:relative;</span><br><span class="line">            z-index: 2;</span><br><span class="line">            width:400px;</span><br><span class="line">            height:400px;</span><br><span class="line">            background: black;</span><br><span class="line">            border:1px solid #eee;</span><br><span class="line">            margin-bottom: -100px;</span><br><span class="line">        &#125;</span><br><span class="line">        .a&#123;</span><br><span class="line">            position:relative;</span><br><span class="line">            z-index: 1;</span><br><span class="line">            width:400px;</span><br><span class="line">            height:400px;</span><br><span class="line">            background: yellow;</span><br><span class="line">            left:0;</span><br><span class="line">            border:1px solid #eee;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .b&#123;</span><br><span class="line">            position:absolute;</span><br><span class="line">            left:0;</span><br><span class="line">            top:0;</span><br><span class="line">            z-index: 50;</span><br><span class="line">            width:200px;</span><br><span class="line">            height:200px;</span><br><span class="line">            background: red;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .c&#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left:0;</span><br><span class="line">            top:0;</span><br><span class="line">            z-index:1111;</span><br><span class="line">            width:100px;</span><br><span class="line">            height:100px;</span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;a1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;a&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;b&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="opcity属性"><a href="#opcity属性" class="headerlink" title="opcity属性"></a>opcity属性</h3><ul><li>opcity属性，当你要设置两个元素的z-index值的时候，要注意是否给其中一个元素添加了opcity属性，如果添加了，那么添加了opcity属性的元素将一直在最上层，这个我在另一篇文章中讲过。</li><li><a href="http://www.zsfmyz.top/2018/06/29/Opcity%E5%BC%95%E5%8F%91%E7%9A%84%E5%85%83%E7%B4%A0%E5%B1%82%E7%BA%A7%E5%8F%98%E5%8C%96/">opcity引发的元素层级变化</a></li></ul><hr><h3 id="position影响"><a href="#position影响" class="headerlink" title="position影响"></a>position影响</h3><ul><li>还有就是比较普遍的，我们设置层级一般都是因为设置了position，当你设置的两个子元素，一个有position属性，另一个没有position的时候，拥有position属性的元素将一直在其他元素上方。如下面的例子</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        .a&#123;</span><br><span class="line">            position:relative;</span><br><span class="line">            z-index: 1;</span><br><span class="line">            width:400px;</span><br><span class="line">            height:400px;</span><br><span class="line">            background: yellow;</span><br><span class="line">            left:0;</span><br><span class="line">            border:1px solid #eee;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .b&#123;</span><br><span class="line">            position:absolute;</span><br><span class="line">            left:0;</span><br><span class="line">            top:0;</span><br><span class="line">            z-index: 50;</span><br><span class="line">            width:200px;</span><br><span class="line">            height:200px;</span><br><span class="line">            background: red;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .c&#123;</span><br><span class="line">            z-index:100;</span><br><span class="line">            width:100px;</span><br><span class="line">            height:100px;</span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;a&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;b&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>需要给c也加上position属性才让bc可以先同处一级，然后z-index才会起作用。</p><h3 id="float影响"><a href="#float影响" class="headerlink" title="float影响"></a>float影响</h3><ul><li>那如果我把子元素的position都去掉呢？当父盒子有position而所有子元素都没有position属性的时候，z-index一样全部失效，后面的盒子将会覆盖前面的盒子，z-index无效。</li><li>同样的我们两个都加上浮动的效果跟上面的效果是一样的，后覆盖前，z-index无效</li><li>一个加float另一个不加，则是加float的元素一直浮动在最上层。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        .a&#123;</span><br><span class="line">            position:absolute;</span><br><span class="line">            z-index: 1;</span><br><span class="line">            width:400px;</span><br><span class="line">            height:400px;</span><br><span class="line">            background: yellow;</span><br><span class="line">            left:0;</span><br><span class="line">            border:1px solid #eee;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .b&#123;</span><br><span class="line">            z-index: -10;</span><br><span class="line">            width:200px;</span><br><span class="line">            height:200px;</span><br><span class="line">            background: red;</span><br><span class="line">            margin-bottom: -100px;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .c&#123;</span><br><span class="line">            z-index:101;</span><br><span class="line">            width:100px;</span><br><span class="line">            height:100px;</span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;a&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;b&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>其他情况欢迎补充。</p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V-Model</title>
      <link href="/Vue/v-model/"/>
      <url>/Vue/v-model/</url>
      
        <content type="html"><![CDATA[<p>最近学习vue，从最基础的文档看起。到目前基础已经看完。有两个问题很迷茫。</p><ol><li>vue的动态参数（2.6新增）。demo一直报错。分析原因是因为vue不允许动态添加根一级的变量。（不理解）</li><li>组件中v-model的使用文档中说的让我有点绕。不过已经顺过来了，所以来分享一下。</li></ol><a id="more"></a><h2 id="官方给出的例子是这样。-可以直接使用"><a href="#官方给出的例子是这样。-可以直接使用" class="headerlink" title="官方给出的例子是这样。(可以直接使用)"></a>官方给出的例子是这样。(可以直接使用)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HTML:</span><br><span class="line"></span><br><span class="line">&lt;custom-input v-model=&quot;searchText&quot;&gt;&lt;/custom-input&gt;</span><br><span class="line"></span><br><span class="line">JS:</span><br><span class="line">Vue.component(&apos;custom-input&apos;, &#123;</span><br><span class="line">  props: [&apos;value&apos;],</span><br><span class="line">  template: `</span><br><span class="line">    &lt;input</span><br><span class="line">      v-bind:value=&quot;value&quot;</span><br><span class="line">      v-on:input=&quot;$emit(&apos;input&apos;, $event.target.value)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="v-model可以改写为这种形式，两者完全等价。"><a href="#v-model可以改写为这种形式，两者完全等价。" class="headerlink" title="v-model可以改写为这种形式，两者完全等价。"></a>v-model可以改写为这种形式，两者完全等价。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=&quot;searchText&quot;&gt;</span><br><span class="line"></span><br><span class="line">等价于：</span><br><span class="line"></span><br><span class="line">&lt;input</span><br><span class="line">  v-bind:value=&quot;searchText&quot;</span><br><span class="line">  v-on:input=&quot;searchText = $event.target.value&quot;&gt; //（ $event.target.value为事件当前目标上的value值。）</span><br></pre></td></tr></table></figure><p>第二种写法：</p><ol><li>在input上绑定了input事件，通过触发input事件，执行给searchText赋值语句。</li><li>v-bind将searchText赋值给input标签的value属性。</li></ol><p>再看官方的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;custom-input v-model=&quot;searchText&quot;&gt;&lt;/custom-input&gt;</span><br></pre></td></tr></table></figure></p><p>等价于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;custom-input  </span><br><span class="line">v-bind:value=&quot;searchText&quot;</span><br><span class="line">  v-on:input=&quot;searchText = $event&quot;   //$event 为组件内部抛出来的值。（这个如果不明白可以看组件的自定义事件部分）</span><br><span class="line">&gt;&lt;/custom-input&gt;</span><br></pre></td></tr></table></figure></p><p>再加上官方的js写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;custom-input&apos;, &#123;</span><br><span class="line">  props: [&apos;value&apos;],</span><br><span class="line">  template: `</span><br><span class="line">    &lt;input</span><br><span class="line">      v-bind:value=&quot;value&quot;</span><br><span class="line">      v-on:input=&quot;$emit(&apos;input&apos;, $event.target.value)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>我们在组件内的input上监听了input事件，并且用该input事件对组件上的（自定义）input事件进行触发（searchText = $event”）；</li><li>将$  event.target.value作为参数传给     v-on:input=”searchText =  $ event “，$ event === $ event.target.value。执行语句searchText被赋值。</li><li>组件上的v-bind:value = “searchText” 是将searchText的值绑定到组件内部的props里的value上。</li><li>组件内部将props中的value 绑定到input的value上。就这样完成了一次双向绑定。</li></ol><p>而根据官方v-model的两种写法，组件上转换回v-modal的写法。就完成了。最终结果就如开头所示。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_7. 整数反转</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_7.%20%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_7.%20%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1:</p><blockquote><p>  输入: 123<br>  输出: 321</p></blockquote><p>示例 2:</p><blockquote><p>  输入: -123<br>  输出: -321<br>示例 3:</p></blockquote><blockquote><p>  输入: 120<br>  输出: 21</p></blockquote><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>题目就是反转，问题在于反转过程中是否溢出。</p><ol><li>先判断正负。</li><li>10位以内直接反转。</li><li>接下来就是10位数字的反转，反转过程中判断是否会溢出。（不能反转后再判断是否溢出，因为环境只能存储32位有符号整数，所以反转之后的如果真的溢出是保存不了的）<h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var max;</span><br><span class="line">var flag;</span><br><span class="line">var reverse = function(x) &#123;</span><br><span class="line">    x &lt; 0 ? (flag = &apos;-&apos;, max = &apos;2147483648&apos;) : (flag = &apos;+&apos;, max = &apos;2147483647&apos;);</span><br><span class="line">    var val = (Math.abs(x) + &apos;&apos;).split(&apos;&apos;);</span><br><span class="line">    if (val.length &lt; 10) &#123; return ((flag + val.reverse().join(&apos;&apos;)) - 0) &#125;</span><br><span class="line">    if (val.length = 10) &#123;</span><br><span class="line">        for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">            if (val[9 - i] &gt; max[i]) &#123;</span><br><span class="line">                return 0;</span><br><span class="line">            &#125; else if (val[9 - i] &lt; max[i]) &#123;</span><br><span class="line">                return ((flag + val.reverse().join(&apos;&apos;)) - 0)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>题目很简单，肯定还是可以优化的，如果有更好的办法可以留言。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode_2. 两数相加</title>
      <link href="/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
      <url>/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/leetcode_2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出：7 -&gt; 0 -&gt; 8</span><br><span class="line">原因：342 + 465 = 807</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>题目解析：<br>    该题给出两个链表，求出两个链表各个结点的和，那首先我们需要知道链表是什么样子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * function ListNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.next = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p>如上，链表的每个结点就是这个样子，next指向下一个结点，当然这是在js中简单的实现了链表。</p><p>然后知道了链表，那么就开始各位相加吧~，这个题唯一的难点就是在于各个结点相加的时候可能会产生进位。<br>比如9+2=11，那么就需要进一位，本位取10的余数为值，然后我们就需要在下一个结点相加时把前两位可能产生的进位也算进去。</p><p>如下是我的js解答：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * function ListNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.next = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @param &#123;ListNode&#125; l1</span><br><span class="line"> * @param &#123;ListNode&#125; l2</span><br><span class="line"> * @return &#123;ListNode&#125;</span><br><span class="line"> * y 为进位值</span><br><span class="line"> * i 代表和的位</span><br><span class="line"> * n 代表了和的每一位的值</span><br><span class="line"> * arr 代表和（我们用数组表示更方便一点）</span><br><span class="line"> */</span><br><span class="line">var addTwoNumbers = function(l1, l2) &#123;</span><br><span class="line">    var arr = [], i = 0, n = 0, y = 0;   //初始化</span><br><span class="line">    </span><br><span class="line">    //因为链表不一定同样长的，所以只要有一个链表的结点不为空，我们都需要继续计算；</span><br><span class="line">    //同时我们也要考虑进位，即使两个链表结束了，如果有进位的话，那我们还是需要再计算一次的。</span><br><span class="line">    </span><br><span class="line">    while (l1 !==  null || l2 !== null || y !== 0) &#123;  </span><br><span class="line"></span><br><span class="line">        //判断链表l1的该结点是否为null，如果为null初始化成值为0的结点，方便运算。</span><br><span class="line">        l1 = l1 ? l1 : new ListNode(0); </span><br><span class="line"></span><br><span class="line">         // 同理 l2</span><br><span class="line">        l2 = l2 ? l2 : new ListNode(0);</span><br><span class="line"></span><br><span class="line">         // 计算该位的两个结点的和，同时要加上前两位的进位。</span><br><span class="line">       var num = l1.val + l2.val + y;</span><br><span class="line">       </span><br><span class="line">        // 判断该位是否需要进位，需要进位的话就该位取10的余数，然后进一位（y = 1），反之初始化进位值为0。</span><br><span class="line">        num &gt; 9 ? (y = 1, n = num - 10) : (n = num, y = 0); </span><br><span class="line">        </span><br><span class="line">        arr[i] = n; //给和的每一位赋值</span><br><span class="line">        </span><br><span class="line">        i++; //进入下一次循环</span><br><span class="line">        </span><br><span class="line">        l1 = l1.next;  // 进入l1下一个结点</span><br><span class="line">        </span><br><span class="line">        l2 = l2.next; // 进入l2下一个结点</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //这里反转一下，原本是[7, 0, 8]反转为[8, 0, 7],方便后面生成链表。</span><br><span class="line">    arr = arr.reverse(); </span><br><span class="line"></span><br><span class="line">    //取第一个值创建第一个结点（也是最终链表的最后一个结点）</span><br><span class="line">    let listNode = new ListNode(arr.shift()) //取第一个值创建第一个结点（也是最终链表的最后一个结点）</span><br><span class="line">    </span><br><span class="line">    return arr.reduce((ori,cur)=&gt;&#123;</span><br><span class="line">    </span><br><span class="line">        let ln = new ListNode(cur) //生成当前结点</span><br><span class="line">    </span><br><span class="line">        ln.next = ori //将当前结点的next指向之前生成的链表的第一个结点</span><br><span class="line">    </span><br><span class="line">        return ln //返回新的链表（赋值给了 ori ）</span><br><span class="line">    </span><br><span class="line">    &#125;, listNode)</span><br><span class="line">    // listNode是初始值。</span><br><span class="line">    // 即链表末端的第一个值，我们之所以从最后一个开始创建链表也是因为方便。</span><br><span class="line">    // 因为我们要操作结点的next，所以用新结点的next指向原来的链表，要比找到链表的最后一个结点的next指向新结点要方便一些。</span><br><span class="line">    // 即从后往前生成链。</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>完全背包问题</title>
      <link href="/Algorithm/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>/Algorithm/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>这里借用一个题目的描述来说明要解决问题的背景。</p></blockquote><p>LiYuxiang是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同种类的草药，采每一种都需要一些时间，每一种也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”</p><p>如果你是LiYuxiang，你能完成这个任务吗？</p><p>此题和原题的不同点：</p><p>1.每种草药可以无限制地疯狂采摘。</p><p>2.药的种类眼花缭乱，采药时间好长好长啊！师傅等得菊花都谢了！</p><h2 id="一、-什么是背包算法"><a href="#一、-什么是背包算法" class="headerlink" title="一、 什么是背包算法"></a>一、 什么是背包算法</h2><p>背包算法的基础标准描述为：当前有N件商品，每件商品都有不同的价值v和重量w。我们要把这些商品放在容量为L的背包中，实现背包中的价值最大化。（第i件商品的价值为v[i]，重量为w[i])。上面的题目中的条件之一：草药无限（每件商品可以重复放入背包）即表明了该问题是完全背包问题。</p><a id="more"></a><h2 id="二、-背包算法的应用"><a href="#二、-背包算法的应用" class="headerlink" title="二、 背包算法的应用"></a>二、 背包算法的应用</h2><p>背包算法在我看来是一种“性价比”算法。即我们在有限的条件下得到最大的收获。例如曾经有个节目可以让嘉宾在有限的时间内选购满满购物车的货品。这个场景及其符合背包算法。或者例如我们在考试的时侯，都会尽可能的选择简单并且分数又多的题先做。同时我们也可以应用到其他问题上去。比如在选择购买多种原材料时，尽可能的缩小原材料成本。投资时对多种投资产品的选择组合。</p><h2 id="三、-背包算法的原理"><a href="#三、-背包算法的原理" class="headerlink" title="三、 背包算法的原理"></a>三、 背包算法的原理</h2><p>背包问题需要用到动态规划算法。当我们装一个商品的时侯需要判断几个条件：</p><ol><li>该商品的重量和背包大小的关系。如果背包的总容量小于商品的重量，那就GG，根本不用考虑了。</li><li>商品的重量小于背包剩余容量。即背包中之前装入的商品不需要拿出来就可以把当前商品装下，那也不用考虑，直接装就好了。</li><li>商品的重量小于背包总容量，但是剩余空间不够装了。那我们就需要考虑衡量一下，拿出来原有的一部分商品，装入现在的商品是不是划算的。</li></ol><p>从上面的三个条件可以看出最重要的就是第三条，我们需要判断价值。假设我们背包可以装<strong>8kg</strong>东西，现在有三个商品（商品都是以袋为单位销售不可拆分）：</p><table><thead><tr><th style="text-align:center">苹果</th><th style="text-align:center">香蕉</th><th>草莓</th></tr></thead><tbody><tr><td style="text-align:center">3kg</td><td style="text-align:center">2kg</td><td>5kg</td></tr><tr><td style="text-align:center">￥45</td><td style="text-align:center">￥20</td><td>￥150</td></tr></tbody></table><p>我们以1kg为单位打表:<br>第一次打表</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">0kg</th><th style="text-align:center">1kg</th><th style="text-align:center">2kg</th><th style="text-align:center">3kg</th><th style="text-align:center">4kg</th><th style="text-align:center">5kg</th><th style="text-align:center">6kg</th><th style="text-align:center">7kg</th><th style="text-align:center">8kg</th></tr></thead><tbody><tr><td style="text-align:center">无</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">苹果</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td></tr><tr><td style="text-align:center">香蕉</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">草莓</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table><p>第二次打表</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">0kg</th><th style="text-align:center">1kg</th><th style="text-align:center">2kg</th><th style="text-align:center">3kg</th><th style="text-align:center">4kg</th><th style="text-align:center">5kg</th><th style="text-align:center">6kg</th><th style="text-align:center">7kg</th><th style="text-align:center">8kg</th></tr></thead><tbody><tr><td style="text-align:center">无</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">苹果</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td></tr><tr><td style="text-align:center">香蕉</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">￥20</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥65</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td><td style="text-align:center">￥110</td></tr><tr><td style="text-align:center">草莓</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table><p>最终打表结果：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">0kg</th><th style="text-align:center">1kg</th><th style="text-align:center">2kg</th><th style="text-align:center">3kg</th><th style="text-align:center">4kg</th><th style="text-align:center">5kg</th><th style="text-align:center">6kg</th><th style="text-align:center">7kg</th><th style="text-align:center">8kg</th></tr></thead><tbody><tr><td style="text-align:center">无</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">苹果</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td></tr><tr><td style="text-align:center">香蕉</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">￥20</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥65</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td><td style="text-align:center">￥110</td></tr><tr><td style="text-align:center">草莓</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">￥20</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥150</td><td style="text-align:center">￥150</td><td style="text-align:center">￥170</td><td style="text-align:center">￥195</td></tr></tbody></table><p>如表我们的最终排列结果。</p><p>核心判断为：<code>bag[i-1][j]</code> 和<code>bag[i-1][j-k*w[i]] + k*v[i]</code> 的价值哪个大。<br>我来说明上面的变量都代表了什么：</p><ul><li><code>bag[i][j]</code> 代表了我们在看到第i个商品时，背包容量占用了<code>jkg</code>时，背包内物品的价值。</li><li>那么<code>bag[i-1][j]</code> 就代表了我们在看到第i-1个商品时，背包容量占用了<code>jkg</code>时，背包内装的价值。</li><li><code>v[i]</code>代表了当前商品的价值，<code>k*v[i]</code>代表了<code>k</code>个<code>v[i]</code>的价值（商品不限量）。</li><li><code>w[i]</code>代表了当前商品的重量，<code>k*w[i]</code>代表了<code>k</code>个<code>w[i]</code>的重量。</li><li><code>bag[i-1][j-k*w[i]]</code>就代表了上一个情况下，背包装了k个i商品时，余下空间在上一状态的最大价值。</li></ul><p>所以，我们的核心判断种需要 上一个情况下的背包的所有状态。当我们把背包中 <code>k*w[i]</code>的空间腾出来用来装k个i商品，加上剩余空间可以装的商品的最大价值。如果它<strong>小于</strong>上一个状态下<code>bag[i-1][j]</code>所装货品的价值，那么我们就没必要替换这部分空间了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//两个循环</span><br><span class="line">for (3) //3个商品</span><br><span class="line">for (8) // 8种占用空间的情况（1kg-8kg）</span><br><span class="line"></span><br><span class="line">// 核心判断</span><br><span class="line">if (bag[i-1][j] &gt; bag[i-1][j-k*w[i]] + k*v[i]) &#123;</span><br><span class="line">bag[i][j] = bag[i-1][j];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">bag[i][j] = bag[i-1][j-k*w[i]] + k*v[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实回到生活上，我们的想法跟这个是一样的，当我们有个背包要装满的时侯，我们先看到了苹果，那么当然的，我们要尽可能多的把苹果装到包包里。如果有剩余空间装不下那也只能浪费着。然后我们发现了香蕉，我们会开始想着怎么用香蕉代替一部分苹果把空间填满。在这个思考的过程中，我们会一直比较什么样的组合价值最大。草莓也是一样。</p><p>其实如开头所说，我说这是“性价比”。上面我们商品出现的顺序是随机的。其实我们装东西判断价值，其实就是装性价比最高的物品。 不过同时需要考虑到空间的利用率。如果我们事先把性价比高的物品排在前面，那么效率会提高不少。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 对象数组查找某一个对象 findIndex</title>
      <link href="/JavaScript/ES6%20%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E6%9F%A5%E6%89%BE%E6%9F%90%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%20findIndex/"/>
      <url>/JavaScript/ES6%20%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E6%9F%A5%E6%89%BE%E6%9F%90%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%20findIndex/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 查找数组特定元素需要用到的方法就是<strong>findIndex()</strong>。</p></blockquote><h2 id="用法与定义"><a href="#用法与定义" class="headerlink" title="用法与定义"></a>用法与定义</h2><ul><li>findIndex() 方法返回传入一个测试<strong>条件</strong>（函数）符合条件的数组<strong>第一个</strong>元素位置。</li><li>findIndex() 方法为数组中的每个元素都调用一次函数执行：<br>  当数组中的元素在测试条件时返回 true 时, findIndex() 返回<strong>符合条件</strong>的元素的<strong>索引位置</strong>，<em>之后的值不会再调用    执行函数。</em><br>如果没有符合条件的元素返回 <strong>-1</strong></li></ul><a id="more"></a><p>以上是比较官方的对于findIndex()的定义</p><hr><p><strong>接下来我结合实例来进行自己的解释.</strong></p><ol><li>第一条的意思如下:<br>当条件函数返回<strong>true</strong>的时候，findindex会跳出，然后返回当前元素的下标。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//首先是普通数组</span><br><span class="line"></span><br><span class="line">var dataArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];</span><br><span class="line"></span><br><span class="line">function fn(num, numIndex, nums)&#123;</span><br><span class="line">//该函数的三个参数，num代表当前项，numIndex代表当前项下标，nums代表该数组。</span><br><span class="line">return num &gt; 5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dataArr.findIndex(fn);//值为5(即6的下标)</span><br><span class="line"></span><br><span class="line">------------------------分割线-----------------------------</span><br><span class="line"></span><br><span class="line">//同样的假如你的数组是个对象数组：</span><br><span class="line">var objArr = [&#123;</span><br><span class="line">name: &apos;小王&apos;,</span><br><span class="line">age: 14</span><br><span class="line">&#125;,&#123;</span><br><span class="line">name: &apos;大王&apos;,</span><br><span class="line">age: 41</span><br><span class="line">&#125;,&#123;</span><br><span class="line">name: &apos;老王&apos;,</span><br><span class="line">age: 61</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line">function objFn(obj, objIndex, objs)&#123;</span><br><span class="line">return num.age &gt; 20;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">objArr .findIndex(objFn);//值为1(即大王的下标)</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>第二条的意思就更好理解了，因为findindex只返回第一个符合条件的元素下标，所以在找到第一个符合条件的元素之后，他会跳出该函数，之后的数组内的元素将不再调用，相当于加了个break；</li></ol><p><strong>实际用法举例</strong></p><p>假如我们要在所有人里面挑选队友，但是不想重复。在我们通过id查找的时候，就可以这么写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var allPeple = [&#123;</span><br><span class="line">name: &apos;小王&apos;,</span><br><span class="line">id: 14</span><br><span class="line">&#125;,&#123;</span><br><span class="line">name: &apos;大王&apos;,</span><br><span class="line">id: 41</span><br><span class="line">&#125;,&#123;</span><br><span class="line">name: &apos;老王&apos;,</span><br><span class="line">id: 61</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line">var myTeamArr = [&#123;</span><br><span class="line">name: &apos;小王&apos;,</span><br><span class="line">id: 14</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line">var PId = 14; //假如这个是要添加的人的ID</span><br><span class="line"></span><br><span class="line">function pFn(p)&#123;return p.id == PId ;&#125;</span><br><span class="line"></span><br><span class="line">//判断myteam里是不是有这个队员，如果==-1 代表没有，在allPeople中找到他，添加入我的队伍</span><br><span class="line"></span><br><span class="line">myTeamArr.findIndex(pFn) == -1 ? myTeamArr.push(allPeple.find(pFn)) : alert(&apos;已存在该人员&apos;);</span><br><span class="line"></span><br><span class="line">//这样写可以将两个for循环直接总结成一行代码</span><br></pre></td></tr></table></figure></p><p><strong>另外需要补充的一点</strong></p><blockquote><p>与其相对应的有<strong>find</strong>()函数，用法一致，只不过返回的是<strong>元素本身</strong>，而不是元素的下标。</p></blockquote><p><strong>兼容性</strong></p><blockquote><p>因为是es6的所以使用的时候要注意兼容性问题，<strong>ie11</strong>及之前的版本都<strong>不可兼容。</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Call，apply，bind的区别及实现</title>
      <link href="/JavaScript/call%EF%BC%8Capply%EF%BC%8Cbind%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
      <url>/JavaScript/call%EF%BC%8Capply%EF%BC%8Cbind%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>call，apply，bind的区别<br>这三个函数的左右都是为了指定当前的this。</p></blockquote><p>不同点：</p><ol><li>call，apply 两者都是对函数的直接调用，bind的返回值仍然是一个函数。<br>  举例：<code>a.call(b)  或者  a.apply(b)   而bind需要 a.bind(b)()这样才能执行</code></li><li>call和apply的传参方式不同，第一个值都是this的指向，第二个举例</li></ol><a id="more"></a>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a.call(b, 参数1，参数2，参数3)</span><br><span class="line">a.apply(b, [参数1，参数2，参数3])</span><br><span class="line"></span><br><span class="line">//同样的bind的传参方式和call相同，但又因为bind返回的是函数，所以我们可以像正常函数传参一样</span><br><span class="line"></span><br><span class="line">a.bind(b)(参数1，参数2，参数3)</span><br></pre></td></tr></table></figure><p>以上就是三者的差别。</p><p>接下来我们实现他们的功能函数。</p><ol><li><p>call：</p><blockquote><p>call的传入参数是（ctx,…[]）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.mycall = funciton (ctx) &#123;</span><br><span class="line">if (typeof this != &quot;function&quot;) &#123;</span><br><span class="line">throw new TypeError(&apos;error&apos;);</span><br><span class="line">&#125;</span><br><span class="line">ctx = ctx || window;</span><br><span class="line">ctx.fn = this;</span><br><span class="line">var args = ...arguments.splice(1);</span><br><span class="line">var result = ctx.fn(args);</span><br><span class="line">delete ctx.fn;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>apply:</p><blockquote><p>apply的传入参数跟call不同，第二个参数是数组。</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.myapply = funciton (ctx) &#123;</span><br><span class="line">if (typeof this != &apos;function&apos;) &#123;</span><br><span class="line">throw new TypeError(&apos;error&apos;);</span><br><span class="line">&#125;</span><br><span class="line">ctx = ctx || window;</span><br><span class="line">ctx.fn = this;</span><br><span class="line">var result;</span><br><span class="line">if (arguments[1]) &#123;</span><br><span class="line">result = ctx.fn(arguments[1]);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">result = ctx.fn();</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>bind 返回的是个函数<blockquote><p>bind 返回的是个函数，同样可以执行传参 ，我们可以用myapply实现</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Funtion.prototype.myBind = function(ctx,...args1)&#123;</span><br><span class="line">return (...args2) =&gt; &#123;</span><br><span class="line">this.myapply(ctx, args1.concat(args2))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Opacity引发的元素层级变化</title>
      <link href="/Css/Opcity%E5%BC%95%E5%8F%91%E7%9A%84%E5%85%83%E7%B4%A0%E5%B1%82%E7%BA%A7%E5%8F%98%E5%8C%96/"/>
      <url>/Css/Opcity%E5%BC%95%E5%8F%91%E7%9A%84%E5%85%83%E7%B4%A0%E5%B1%82%E7%BA%A7%E5%8F%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p> 发现这个问题是在图片上定位了一个删除按钮，当我用opacity属性对图片进行透明化处理的时候，发现删除按钮不管用了，最后发现删除按钮是被图片覆盖了，究其原因是因为opacity这个属性造成的层级变化。</p></blockquote><ol><li>我发现含有opacity属性的元素层级会比其他元素的层级高，这时候z-index是不起作用的，opacity会一直高于其他元素的层级。</li><li>给其他元素加上position属性，会使该元素跟opacity处在同一层级之上，这时候你再给元素附加z-index就可以起作用了。</li></ol><a id="more"></a><h3 id="总结和解决方案"><a href="#总结和解决方案" class="headerlink" title="总结和解决方案"></a>总结和解决方案</h3><ul><li><p>总结：当你使用opacity的时候会对元素层级造成影响</p></li><li><p>解决办法：加上position和z-index可以对opacity元素进行覆盖</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: red;</span><br><span class="line">            color: #fff;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">        .box1&#123;</span><br><span class="line">            opacity: 0.8;</span><br><span class="line">        &#125;</span><br><span class="line">        .box2&#123;</span><br><span class="line">            background-color: blue;</span><br><span class="line">            margin-left: 30px;</span><br><span class="line">            margin-top: -160px;</span><br><span class="line">            position: relative;</span><br><span class="line">            z-index: 100;</span><br><span class="line">        &#125;</span><br><span class="line">        .box3&#123;</span><br><span class="line">            background-color: green;</span><br><span class="line">            margin-left: 60px;</span><br><span class="line">            margin-top: -160px;</span><br><span class="line">            opacity: 0.7;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>如上：box2的层级是最高的。</p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux压缩命令常用：tar，tgz，gzip，zip</title>
      <link href="/Linux/linux%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4%E5%B8%B8%E7%94%A8%EF%BC%9Atar%EF%BC%8Ctgz%EF%BC%8Cgzip%EF%BC%8Czip/"/>
      <url>/Linux/linux%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4%E5%B8%B8%E7%94%A8%EF%BC%9Atar%EF%BC%8Ctgz%EF%BC%8Cgzip%EF%BC%8Czip/</url>
      
        <content type="html"><![CDATA[<p>linux压缩命令常用的有三个：tar，tgz，gzip，zip</p><a id="more"></a><h2 id="一，tar"><a href="#一，tar" class="headerlink" title="一，tar"></a>一，tar</h2><p>（一） tar压缩命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf examples.tar files|dir</span><br><span class="line">#说明：</span><br><span class="line">-c, --create  create a new archive 创建一个归档文件</span><br><span class="line">-v, --verbose verbosely list files processed 显示创建归档文件的进程</span><br><span class="line">-f, --file=ARCHIVE use archive file or device ARCHIVE  后面要立刻接被处理的档案名,比如--file=examples.tar</span><br><span class="line"></span><br><span class="line">#举例：</span><br><span class="line">tar -cvf file.tar file1       #file1文件</span><br><span class="line">tar -cvf file.tar file1 file2 #file1，file2文件</span><br><span class="line">tar -cvf file.tar dir         #dir目录</span><br></pre></td></tr></table></figure><p>（二） tar 解压命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf examples.tar （解压至当前目录下）</span><br><span class="line">tar -xvf examples.tar  -C /path (/path 解压至其它路径)</span><br><span class="line"></span><br><span class="line">#说明：</span><br><span class="line">-x, --extract, extract files from an archive 从一个归档文件中提取文件</span><br><span class="line"></span><br><span class="line">#举例：</span><br><span class="line">tar -xvf file.tar</span><br><span class="line">tar -xvf file.tar -C /temp  #解压到temp目录下</span><br></pre></td></tr></table></figure><h2 id="二，tgz"><a href="#二，tgz" class="headerlink" title="二，tgz"></a>二，tgz</h2><p>（一） tgz压缩命令（tar.gz,tgz格式是相同的，命名不同而已）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf examples.tgz examples (examples当前执行路径下的目录)</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">-z, --gzip filter the archive through gzip 通过gzip压缩的形式对文件进行归档</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line">tar -zcvf file.tgz dir #dir目录</span><br></pre></td></tr></table></figure><p>（二） tgz 解压命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf examples.tar （解压至当前执行目录下）</span><br><span class="line">tar -zxvf examples.tar  -C /path (/path 解压至其它路径)</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line">tar -zcvf file.tgz</span><br><span class="line">tar -zcvf file.tgz -C /temp</span><br></pre></td></tr></table></figure><h2 id="三，gzip"><a href="#三，gzip" class="headerlink" title="三，gzip"></a>三，gzip</h2><p>（一）gzip压缩：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -d examples.gz examples</span><br></pre></td></tr></table></figure><p>（二）gzip解压：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunzip examples.gz</span><br></pre></td></tr></table></figure><h2 id="四，zip"><a href="#四，zip" class="headerlink" title="四，zip"></a>四，zip</h2><blockquote><p>zip 格式是开放且免费的，所以广泛使用在 Windows、Linux、MacOS 平台，要说 zip<br>有什么缺点的话，就是它的压缩率并不是很高，不如 rar及 tar.gz 等格式。</p></blockquote><p>压缩：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r examples.zip examples (examples为目录)</span><br></pre></td></tr></table></figure><p>解压：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip examples.zip</span><br></pre></td></tr></table></figure><h2 id="六-rar"><a href="#六-rar" class="headerlink" title="六 .rar"></a>六 .rar</h2><p>压缩：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rar -a examples.rar examples</span><br></pre></td></tr></table></figure><p>解压：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rar -x examples.rar</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Css3 + Js：有趣的图片马赛克~ (高斯模糊)</title>
      <link href="/Css/css3%20+%20Js%EF%BC%9A%E6%9C%89%E8%B6%A3%E7%9A%84%E5%9B%BE%E7%89%87%E9%A9%AC%E8%B5%9B%E5%85%8B~%20(%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A)/"/>
      <url>/Css/css3%20+%20Js%EF%BC%9A%E6%9C%89%E8%B6%A3%E7%9A%84%E5%9B%BE%E7%89%87%E9%A9%AC%E8%B5%9B%E5%85%8B~%20(%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A)/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 前两篇文介绍了css3的过滤器filter用来实现图片的高斯模糊效果，还有js拖拽的功能。<br> 要实现局部模糊就要把两者结合起来，计算位移就可以了。</p></blockquote><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="*实现原理**"></a>*实现原理**</h3><blockquote><p>原理其实很简单，就是两张图的叠加。底部一张<strong>清晰</strong>的图，上面一个<strong>高斯模糊</strong>过的图，将<strong>高斯模糊</strong>的图当作上层元素的背景，利用背景定位使其只显示一部分，然后把这个高斯模糊的窗口放置在高清图的上层，背景图片的位置与下面的图片位置一致，这样看起来就像一张高清的图片打上了马赛克一样。讲起来不是很清楚，大家可以看一下代码。</p></blockquote><a id="more"></a><h2 id="基础版本"><a href="#基础版本" class="headerlink" title="基础版本"></a>基础版本</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    #css_box &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 500px;</span><br><span class="line">        background: url(&apos;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1567844929804&amp;di=75928af77a3db7ff54cd4eab49361bc0&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fblog%2F201307%2F19%2F20130719082039_k2NHG.jpeg&apos;) no-repeat;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #css_target &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 0px;</span><br><span class="line">        top: 0px;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background: inherit;</span><br><span class="line">        filter: blur(10px);</span><br><span class="line">        /* 继承父元素的background属性 */</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;demo post white-box article-type-post&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;css_box&quot;&gt;</span><br><span class="line">        &lt;div id=&quot;css_target&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var bar = document.getElementById(&quot;css_box&quot;);</span><br><span class="line">    var target = document.getElementById(&quot;css_target&quot;);</span><br><span class="line"></span><br><span class="line">    startDrag(bar, target, function(x, y) &#123;</span><br><span class="line">        target.style.backgroundPosition = (-1 * x) + &quot;px &quot; + (-1 * y) + &quot;px&quot;;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="JS-当作JS文件引入"><a href="#JS-当作JS文件引入" class="headerlink" title="JS (当作JS文件引入)"></a>JS (当作JS文件引入)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">var getCss = function(o, key) &#123;</span><br><span class="line">    return o.currentStyle ? o.currentStyle[key] : document.defaultView.getComputedStyle(o, false)[key];</span><br><span class="line">&#125;;</span><br><span class="line">// 拖拽</span><br><span class="line">var startDrag = function(bar, target, callback) &#123;</span><br><span class="line">    maxX = parseInt(getCss(bar, &quot;width&quot;)) - parseInt(getCss(target, &quot;width&quot;));</span><br><span class="line">    maxY = parseInt(getCss(bar, &quot;height&quot;)) - parseInt(getCss(target, &quot;height&quot;));</span><br><span class="line">    var resX = 0,</span><br><span class="line">        resY = 0;</span><br><span class="line">    var params = &#123;</span><br><span class="line">        left: 0,</span><br><span class="line">        top: 0,</span><br><span class="line">        currentX: 0,</span><br><span class="line">        currentY: 0,</span><br><span class="line">        flag: false</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    if (getCss(target, &quot;left&quot;) !== &quot;auto&quot;) &#123;</span><br><span class="line">        params.left = getCss(target, &quot;left&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (getCss(target, &quot;top&quot;) !== &quot;auto&quot;) &#123;</span><br><span class="line">        params.top = getCss(target, &quot;top&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    target.onmousedown = function(event) &#123;</span><br><span class="line">        params.flag = true;</span><br><span class="line">        if (!event) &#123;</span><br><span class="line">            event = window.event;</span><br><span class="line">            bar.onselectstart = function() &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        var e = event;</span><br><span class="line">        params.currentX = e.clientX;</span><br><span class="line">        params.currentY = e.clientY;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    document.onmouseup = function() &#123;</span><br><span class="line">        params.flag = false;</span><br><span class="line">        if (getCss(target, &quot;left&quot;) !== &quot;auto&quot;) &#123;</span><br><span class="line">            params.left = getCss(target, &quot;left&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (getCss(target, &quot;top&quot;) !== &quot;auto&quot;) &#123;</span><br><span class="line">            params.top = getCss(target, &quot;top&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    document.onmousemove = function(event) &#123;</span><br><span class="line">        var e = event ? event : window.event;</span><br><span class="line">        if (params.flag) &#123;</span><br><span class="line">            var nowX = e.clientX,</span><br><span class="line">                nowY = e.clientY;</span><br><span class="line"></span><br><span class="line">            var disX = nowX - params.currentX,</span><br><span class="line">                disY = nowY - params.currentY;</span><br><span class="line">            if ((parseInt(params.left) + disX) &gt; maxX) &#123;</span><br><span class="line">                resX = maxX;</span><br><span class="line">            &#125; else if ((parseInt(params.left) + disX) &lt; 0) &#123;</span><br><span class="line">                resX = 0;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                resX = parseInt(params.left) + disX;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if ((parseInt(params.top) + disY) &gt; maxY) &#123;</span><br><span class="line">                resY = maxY;</span><br><span class="line">            &#125; else if ((parseInt(params.top) + disY) &lt; 0) &#123;</span><br><span class="line">                resY = 0;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                resY = parseInt(params.top) + disY;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            target.style.left = resX + &apos;px&apos;</span><br><span class="line"></span><br><span class="line">            target.style.top = resY + &apos;px&apos;</span><br><span class="line"></span><br><span class="line">            if (typeof callback == &quot;function&quot;) &#123;</span><br><span class="line">                callback(resX, resY);</span><br><span class="line">            &#125;</span><br><span class="line">            if (event.preventDefault) &#123;</span><br><span class="line">                event.preventDefault();</span><br><span class="line">            &#125;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="兼容移动端优化版本"><a href="#兼容移动端优化版本" class="headerlink" title="兼容移动端优化版本"></a>兼容移动端优化版本</h2><h3 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    #css_box &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        touch-action: none;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 500px;</span><br><span class="line">        background: url(&apos;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1567844929804&amp;di=75928af77a3db7ff54cd4eab49361bc0&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fblog%2F201307%2F19%2F20130719082039_k2NHG.jpeg&apos;) no-repeat;</span><br><span class="line">        background-size: contain;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #css_target &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 0px;</span><br><span class="line">        top: 0px;</span><br><span class="line">        background: inherit;</span><br><span class="line">        filter: blur(10px);</span><br><span class="line">        touch-action: none;</span><br><span class="line">        /* 继承父元素的background属性 */</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;demo post white-box article-type-post&quot;&gt;</span><br><span class="line">    &lt;h2 class=&quot;title&quot;&gt;mosaic Demo &lt;a style=&quot;color: #bd4117;&quot; href=&quot;http://www.zsfmyz.top/Css/Css3%20+%20Js%EF%BC%9A%E5%9B%BE%E7%89%87%E7%9A%84%E5%B1%80%E9%83%A8%E6%A8%A1%E7%B3%8A%EF%BC%88%E9%A9%AC%E8%B5%9B%E5%85%8B%EF%BC%89/&quot;&gt;传送门&lt;/a&gt;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id=&quot;css_box&quot;&gt;</span><br><span class="line">        &lt;div id=&quot;css_target&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;p id=&quot;position_img&quot;&gt;X: 0 px Y: 0 px&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"> $(document).ready(function() &#123;</span><br><span class="line">    var bar = document.getElementById(&quot;css_box&quot;);</span><br><span class="line">    var target = document.getElementById(&quot;css_target&quot;);</span><br><span class="line">    var p_img = document.getElementById(&quot;position_img&quot;);</span><br><span class="line"></span><br><span class="line">    // 兼容分辨率</span><br><span class="line">    bar.style.height = (parseInt(getCss(bar, &quot;width&quot;)) * 636 / 900) + &apos;px&apos;;</span><br><span class="line">    target.style.backgroundSize = parseInt(getCss(bar, &quot;width&quot;)) + &apos;px &apos; + (parseInt(getCss(bar, &quot;width&quot;)) * 636 / 900) + &apos;px&apos;;</span><br><span class="line"></span><br><span class="line">    startDrag(bar, target, function(x, y) &#123;</span><br><span class="line">        target.style.backgroundPosition = (-1 * x) + &quot;px &quot; + (-1 * y) + &quot;px&quot;;</span><br><span class="line">        p_img.innerText = &quot;X: &quot; + target.style.left + &quot; Y: &quot; + target.style.top; </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="JS-当作JS文件引入-1"><a href="#JS-当作JS文件引入-1" class="headerlink" title="JS (当作JS文件引入)"></a>JS (当作JS文件引入)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/jquery@3.3.1/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">        // 拖拽</span><br><span class="line">        var startDrag = function(bar, target, callback) &#123;</span><br><span class="line">            var getCss = function(o, key) &#123;</span><br><span class="line">                return o.currentStyle ? o.currentStyle[key] : document.defaultView.getComputedStyle(o, false)[key];</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            var down = function(event) &#123;</span><br><span class="line">                // 兼容分辨率</span><br><span class="line">                bar.style.height = (parseInt(getCss(bar, &quot;width&quot;)) * 636 / 900) + &apos;px&apos;;</span><br><span class="line">                target.style.backgroundSize = parseInt(getCss(bar, &quot;width&quot;)) + &apos;px &apos; + (parseInt(getCss(bar, &quot;width&quot;)) * 636 / 900) + &apos;px&apos;;</span><br><span class="line"></span><br><span class="line">                params.flag = true;</span><br><span class="line">                if (!event) &#123;</span><br><span class="line">                    event = window.event;</span><br><span class="line">                    bar.onselectstart = function() &#123;</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                var e = event;</span><br><span class="line">                params.currentX = e.clientX || e.changedTouches[0].clientX;</span><br><span class="line">                params.currentY = e.clientY || e.changedTouches[0].clientY;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            var up = function() &#123;</span><br><span class="line">                params.flag = false;</span><br><span class="line">                if (getCss(target, &quot;left&quot;) !== &quot;auto&quot;) &#123;</span><br><span class="line">                    params.left = getCss(target, &quot;left&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                if (getCss(target, &quot;top&quot;) !== &quot;auto&quot;) &#123;</span><br><span class="line">                    params.top = getCss(target, &quot;top&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            var move = function(event) &#123;</span><br><span class="line">                var e = event ? event : window.event;</span><br><span class="line">                if (params.flag) &#123;</span><br><span class="line">                    var nowX = e.clientX || e.changedTouches[0].clientX,</span><br><span class="line">                        nowY = e.clientY || e.changedTouches[0].clientY;</span><br><span class="line">                    var disX = nowX - params.currentX,</span><br><span class="line">                        disY = nowY - params.currentY;</span><br><span class="line">                    if ((parseInt(params.left) + disX) &gt; maxX) &#123;</span><br><span class="line">                        resX = maxX;</span><br><span class="line">                    &#125; else if ((parseInt(params.left) + disX) &lt; 0) &#123;</span><br><span class="line">                        resX = 0;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        resX = parseInt(params.left) + disX;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if ((parseInt(params.top) + disY) &gt; maxY) &#123;</span><br><span class="line">                        resY = maxY;</span><br><span class="line">                    &#125; else if ((parseInt(params.top) + disY) &lt; 0) &#123;</span><br><span class="line">                        resY = 0;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        resY = parseInt(params.top) + disY;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    target.style.left = resX + &apos;px&apos;</span><br><span class="line"></span><br><span class="line">                    target.style.top = resY + &apos;px&apos;</span><br><span class="line"></span><br><span class="line">                    if (typeof callback == &quot;function&quot;) &#123;</span><br><span class="line">                        callback(resX, resY);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (event.preventDefault) &#123;</span><br><span class="line">                        event.preventDefault();</span><br><span class="line">                    &#125;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var resX = 0,</span><br><span class="line">                resY = 0;</span><br><span class="line">            var params = &#123;</span><br><span class="line">                left: 0,</span><br><span class="line">                top: 0,</span><br><span class="line">                currentX: 0,</span><br><span class="line">                currentY: 0,</span><br><span class="line">                flag: false</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            if (getCss(target, &quot;left&quot;) !== &quot;auto&quot;) &#123;</span><br><span class="line">                params.left = getCss(target, &quot;left&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (getCss(target, &quot;top&quot;) !== &quot;auto&quot;) &#123;</span><br><span class="line">                params.top = getCss(target, &quot;top&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if ((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) &#123;</span><br><span class="line">                console.log(&quot;mobile&quot;);</span><br><span class="line">                target.style.width = &apos;100px&apos;;</span><br><span class="line">                target.style.height = &apos;100px&apos;;</span><br><span class="line">                maxX = parseInt(getCss(bar, &quot;width&quot;)) - parseInt(getCss(target, &quot;width&quot;));</span><br><span class="line">                maxY = parseInt(getCss(bar, &quot;height&quot;)) - parseInt(getCss(target, &quot;height&quot;));</span><br><span class="line"></span><br><span class="line">                target.ontouchstart = down</span><br><span class="line"></span><br><span class="line">                document.ontouchend = up</span><br><span class="line"></span><br><span class="line">                document.ontouchmove = move</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                console.log(&quot;pc&quot;);</span><br><span class="line">                target.style.width = &apos;150px&apos;;</span><br><span class="line">                target.style.height = &apos;150px&apos;;</span><br><span class="line">                maxX = parseInt(getCss(bar, &quot;width&quot;)) - parseInt(getCss(target, &quot;width&quot;));</span><br><span class="line">                maxY = parseInt(getCss(bar, &quot;height&quot;)) - parseInt(getCss(target, &quot;height&quot;));</span><br><span class="line"></span><br><span class="line">                target.onmousedown = down</span><br><span class="line"></span><br><span class="line">                document.onmouseup = up</span><br><span class="line"></span><br><span class="line">                document.onmousemove = move</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>以上就是局部模糊的实现方法。可以直接套用。将JS部分当作文件引入。否则要把初始化函数放在函数声明的后面。</p></blockquote><p>最后可查看实际效果：<a href="http://www.zsfmyz.top/demo/mosaic/">demo演示地址</a></p><p><em>借鉴于张大神</em></p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3：图片的高斯模糊效果</title>
      <link href="/Css/CSS3%EF%BC%9A%E5%9B%BE%E7%89%87%E7%9A%84%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/"/>
      <url>/Css/CSS3%EF%BC%9A%E5%9B%BE%E7%89%87%E7%9A%84%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS3：图片的高斯模糊效果"><a href="#CSS3：图片的高斯模糊效果" class="headerlink" title="CSS3：图片的高斯模糊效果"></a>CSS3：图片的高斯模糊效果</h1><blockquote><p> 最近项目中需要预览视频中加马赛克的效果（高斯模糊），于是找到了css3的一个属性filter来进行高斯模糊</p></blockquote><a id="more"></a><h2 id="filter（滤镜）"><a href="#filter（滤镜）" class="headerlink" title="filter（滤镜）"></a>filter（滤镜）</h2><blockquote><p>可以用来定义图片或者div的饱和度，模糊程度，亮度等一系列。具体参考 <a href="http://www.runoob.com/cssref/css3-pr-filter.html" target="_blank" rel="noopener">CSS3：filter 属性</a></p></blockquote><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p><img src="https://img-blog.csdn.net/20180518144313540?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h2 id="兼容性方案"><a href="#兼容性方案" class="headerlink" title="兼容性方案"></a>兼容性方案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//高斯模糊</span><br><span class="line">-webkit-filter：blur(10px);</span><br><span class="line">filter:blur(10px);</span><br></pre></td></tr></table></figure><p>高斯模糊的这个属性是对整个元素进行高斯模糊。如果你需要局部模糊，需要结合背景定位。原理就是两层图片叠加，底层清晰，上层模糊。接下来我会结合拖拽和背景定位实现图片的局部模糊。下一篇传送门：<strong><a href="http://www.zsfmyz.top/JavaScript/HTML5%20drag%20&amp;%20drop%20%E6%8B%96%E6%8B%BD%E4%B8%8E%E6%8B%96%E6%94%BE/">js拖拽实现</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5 Video 全屏</title>
      <link href="/JavaScript/HTML5%20video%20%E5%85%A8%E5%B1%8F/"/>
      <url>/JavaScript/HTML5%20video%20%E5%85%A8%E5%B1%8F/</url>
      
        <content type="html"><![CDATA[<h5 id="当我们使用video标签的时候，有时候因为更多的需要，我们要自己自定义控制栏，而进入和退出全屏也是其中的一部分"><a href="#当我们使用video标签的时候，有时候因为更多的需要，我们要自己自定义控制栏，而进入和退出全屏也是其中的一部分" class="headerlink" title="当我们使用video标签的时候，有时候因为更多的需要，我们要自己自定义控制栏，而进入和退出全屏也是其中的一部分"></a>当我们使用video标签的时候，有时候因为更多的需要，我们要自己自定义控制栏，而进入和退出全屏也是其中的一部分</h5><hr><ul><li>不同的浏览器有不同的实现方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// Webkit</span><br><span class="line">element.webkitRequestFullScreen();//进入全屏</span><br><span class="line">document.webkitCancelFullScreen();//退出全屏</span><br><span class="line"></span><br><span class="line">// Firefox</span><br><span class="line">element.mozRequestFullScreen();</span><br><span class="line">document.mozCancelFullScreen();</span><br><span class="line"> </span><br><span class="line">// W3C </span><br><span class="line">element.requestFullscreen();</span><br><span class="line">document.exitFullscreen();</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>一般兼容性写法，我们先使用w3c标准的方法，如果不可以在兼容不同浏览器。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//进入全屏</span><br><span class="line">function FullScreen() &#123;</span><br><span class="line">    var ele = document.documentElement;</span><br><span class="line">    if (ele .requestFullscreen) &#123;</span><br><span class="line">        ele .requestFullscreen();</span><br><span class="line">    &#125; else if (ele .mozRequestFullScreen) &#123;</span><br><span class="line">        ele .mozRequestFullScreen();</span><br><span class="line">    &#125; else if (ele .webkitRequestFullScreen) &#123;</span><br><span class="line">        ele .webkitRequestFullScreen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//退出全屏</span><br><span class="line">function exitFullscreen() &#123;</span><br><span class="line">    var de = document;</span><br><span class="line">    if (de.exitFullscreen) &#123;</span><br><span class="line">        de.exitFullscreen();</span><br><span class="line">    &#125; else if (de.mozCancelFullScreen) &#123;</span><br><span class="line">        de.mozCancelFullScreen();</span><br><span class="line">    &#125; else if (de.webkitCancelFullScreen) &#123;</span><br><span class="line">        de.webkitCancelFullScreen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接下来是用例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(ele).on(&apos;click&apos;,function()&#123;</span><br><span class="line">    FullScreen();</span><br><span class="line">   // exitFullscreen();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular 的 uiRouter 的 方法$state.includes （判断当前激活路由）</title>
      <link href="/Angular/angular%20%E7%9A%84%20uiRouter%20%E7%9A%84%20%E6%96%B9%E6%B3%95$state.includes%20%EF%BC%88%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E6%BF%80%E6%B4%BB%E8%B7%AF%E7%94%B1%EF%BC%89/"/>
      <url>/Angular/angular%20%E7%9A%84%20uiRouter%20%E7%9A%84%20%E6%96%B9%E6%B3%95$state.includes%20%EF%BC%88%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E6%BF%80%E6%B4%BB%E8%B7%AF%E7%94%B1%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="angular-的-uiRouter-的-方法-state-includes-（判断当前激活路由）"><a href="#angular-的-uiRouter-的-方法-state-includes-（判断当前激活路由）" class="headerlink" title="angular 的 uiRouter 的 方法$state.includes （判断当前激活路由）"></a>angular 的 uiRouter 的 方法$state.includes （判断当前激活路由）</h3><p>作用：</p><ol><li><p>该方法用于判断当前激活的也就是地址栏的路由地址是哪个路由。</p></li><li><p>比如   $state.includes(‘app’) 那么如果页面地址为“<a href="http://www.baidu.com#/app”" target="_blank" rel="noopener">www.baidu.com#/app”</a> 或者 “<a href="http://www.baidu.com#/app/xxx”" target="_blank" rel="noopener">www.baidu.com#/app/xxx”</a> 的时候，该方法的值会返回true。<br>（<em>一般我们定义的路由和地址栏地址是相互对应的，方便管理。举例也是在app.xxx对应app/xxx这样设置路由的情况下</em>）</p></li><li><p>如激活的路由为 app.page.page1 那么</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$state.includes(&apos;app&apos;)              //返回 true</span><br><span class="line">$state.includes(&apos;app.page&apos;)         //返回 true</span><br><span class="line">$state.includes(&apos;app.page.page1&apos;)   //返回 true</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><p>用法：</p><blockquote><p>知道了它的作用，接下来看看它的使用背景。</p><ol><li>我们可以用来激活当前menu的状态。即使当前路由对应的菜单高亮或激活状态。</li></ol></blockquote><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ng-init=&quot;menu_flag= !($state.includes(&apos;app.page1&apos;) || $state.includes(&apos;app.page2&apos;))&quot;&gt; 主菜单&lt;/div&gt;</span><br><span class="line">&lt;div ng-hide=&quot;menu_flag&quot;&gt;</span><br><span class="line">    &lt;div ng-class=&quot;&#123;active: $state.includes(&apos;app.page1&apos;)&#125;&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:;&quot; ui-sref=&quot;app.page1&quot;&gt;子菜单一&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div ng-class=&quot;&#123;active: $state.includes(&apos;app.page2&apos;)&#125;&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:;&quot; ui-sref=&quot;app.page2&quot;&gt;子菜单二&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// ......  n个类似结构组成的菜单</span><br><span class="line"></span><br><span class="line">&lt;div ng-init=&quot;menu_flag1= !($state.includes(&apos;app.page3&apos;) || $state.includes(&apos;app.page4&apos;))&quot;&gt; 主菜单&lt;/div&gt;</span><br><span class="line">&lt;div ng-hide=&quot;menu_flag1&quot;&gt;</span><br><span class="line">    &lt;div ng-class=&quot;&#123;active: $state.includes(&apos;app.page3&apos;)&#125;&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:;&quot; ui-sref=&quot;app.page1&quot;&gt;子菜单一&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div ng-class=&quot;&#123;active: $state.includes(&apos;app.page4&apos;)&#125;&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:;&quot; ui-sref=&quot;app.page2&quot;&gt;子菜单二&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol><li><p>如上我们的菜单构成是由若干个类似结构构成，主menu控制若干个子menu。active是我们定义的激活菜单的css类名，当我们选中某个菜单时激活该菜单。即可借用$state.includes()来实现该功能。</p></li><li><p>同时，当我们的主menu要控制闭合和展开的话，当我们刷新的时候，我们通过判断<code>($state.includes(&#39;app.page3&#39;) || $state.includes(&#39;app.page4&#39;))</code> 的值来在刷新之后判断该主菜单是否闭合。</p></li><li>当然我们也可以这样定义我们的路由。当然我们也可以这样定义我们的路由。例如： 一层菜单为 app.menu1 , 该主菜单下路由定义为</li></ol><table><thead><tr><th>路由名称</th><th>一级路由定义</th><th>二级路由定义</th></tr></thead><tbody><tr><td>一层菜单</td><td>app.menu1</td><td></td></tr><tr><td>二层菜单</td><td></td><td>app.menu1.menu1_1</td></tr><tr><td>二层菜单</td><td></td><td>app.menu1.menu1_2</td></tr></tbody></table><p>这样的话我们在主菜单闭合上只需要判断 <code>$state.includes(app.menu1)</code> 即可。</p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文本的水平垂直居中</title>
      <link href="/Css/%E6%96%87%E6%9C%AC%E6%96%87%E5%AD%97%E5%9C%A8DIV%E4%B8%AD%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E6%98%BE%E7%A4%BA/"/>
      <url>/Css/%E6%96%87%E6%9C%AC%E6%96%87%E5%AD%97%E5%9C%A8DIV%E4%B8%AD%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<p>#文字居中</p><p>##垂直居中（vertical-align）<br>我们都知道有这么一个属性可以让图片，文本等在元素中垂直居中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vertical-align:middle;</span><br></pre></td></tr></table></figure></p><p>vertical-align值有很多，常用的就是middle，bottom，text-bottom等，我们先说middle。</p><a id="more"></a><h4 id="vertical-align时而没效果"><a href="#vertical-align时而没效果" class="headerlink" title="vertical-align时而没效果"></a>vertical-align时而没效果</h4><p>然而真实使用的时候，我们会发现这个属性“时灵时不灵”，有些情况下我们加了这个属性之后仍然不见img或者text有任何的变化。那是因为vertical-align只作用在inline-block或者inline，还有table-cell等元素内。同时这两种还有有所不同。</p><blockquote><p>vertical-align并不是在高度内居中，而是对齐在行高内的middle线上。</p></blockquote><p>所以我总结了两种使用vertical-align居中的方法：</p><ol><li>第一种</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;vertical-align: middle;display: table-cell;&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;02.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;p&gt;文本居中&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这种情况下图片和文字可以分行显示文字在图片下面同时图片和文字作为整体在元素内垂直居中。</p></blockquote><ol start="2"><li>第二种</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;height:180px;line-height:180px;&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;02.jpg&quot; alt=&quot;图片&quot; style=&quot;vertical-align:middle;&quot; /&gt;</span><br><span class="line">    这是文本内容.</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这种情况下文字是因为line-height属性而居中，跟vertical-align属性没有关系。同时img对齐在middle线上，但是如果父盒子去掉了line-height属性的话那么将会不起作用。（可以试试bottom和text-bottom的不同。）</p></blockquote><hr><p>##水平居中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-align:center;</span><br></pre></td></tr></table></figure><p>over</p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular中ng-Repeat的track by 的使用（$Index）</title>
      <link href="/Angular/angular%E4%B8%ADng-repeat%E7%9A%84track%20by%20%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88$index%EF%BC%89/"/>
      <url>/Angular/angular%E4%B8%ADng-repeat%E7%9A%84track%20by%20%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88$index%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="在angular中使用ng-repeat时数组中有重复元素"><a href="#在angular中使用ng-repeat时数组中有重复元素" class="headerlink" title="在angular中使用ng-repeat时数组中有重复元素"></a>在angular中使用ng-repeat时数组中有重复元素</h3><ul><li>当我们在循环的数组中存在有重复的元素时候，angular的ng-repeat就会报错，那是因为其不允许collection有相同的id（相同的元素会形成相同的id）出现。而基本的数据类型它的id就是它自身的值。</li></ul><a id="more"></a><ul><li><p>我们要避免这种情况通常会使用<code>track by $index</code> 来让其生成自己不同的id，这样是最常用的直接通过索引来生成id。我们也可以通过自己设置业务上的id，然后用其进行遍历<code>track by item.id</code>.</p></li><li><p>总结一下，解决重复问题的方法就是<code>item in items track by $index</code></p></li></ul><h3 id="使用-index会出现的问题。"><a href="#使用-index会出现的问题。" class="headerlink" title="使用$index会出现的问题。"></a>使用$index会出现的问题。</h3><ul><li>我们使用<code>$index</code>不仅仅是为了避免重复元素的问题，有时候会被使用<code>$index</code>的索引来进行一部分操作，这里有一个坑需要注意。</li></ul><blockquote><p>当我们使用<code>$index</code>的时候，下列情况会出现<code>$index</code>跟原序列不匹配的情况</p></blockquote><ol><li>当我们改变列表的顺序的时候</li><li>当我们在列表中插入或者删除的时候</li></ol><hr><ul><li>由于<code>$index</code>会跟随item上移下移，或者随之被删除。（例如你把列表第二条和第一条位置互换，这时候列表现在第一条的$index依旧为2，第二条还是原来的1）这时候你再使用<code>$index</code>传值就不在是新数组的索引了，不再匹配。</li></ul><p><em>所以使用$index的时候要特别注意这些问题</em></p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular 的Http请求回调（success 和 Error）</title>
      <link href="/Angular/angular%20%E7%9A%84http%E8%AF%B7%E6%B1%82%E5%9B%9E%E8%B0%83%EF%BC%88success%20%E5%92%8C%20error%EF%BC%89/"/>
      <url>/Angular/angular%20%E7%9A%84http%E8%AF%B7%E6%B1%82%E5%9B%9E%E8%B0%83%EF%BC%88success%20%E5%92%8C%20error%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>前面有文章写过angular的$http请求的简单书写和使用。<br>回顾一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">var Server = angular.module(&quot;Server&quot;, []);</span><br><span class="line"></span><br><span class="line">Server.service(&quot;Api&quot;, [&quot;$http&quot;, function ($http) &#123;</span><br><span class="line">return &#123;</span><br><span class="line">getTest : function (params, callback) &#123;</span><br><span class="line">            $http(&#123;</span><br><span class="line">                url: &apos;www.baidu.com?name=xxx&amp;passwd=xxx&apos;,</span><br><span class="line">                method: &apos;GET&apos;</span><br><span class="line">            &#125;).success(callback);</span><br><span class="line">        &#125;,</span><br><span class="line">        postTest : function (data, callback) &#123;</span><br><span class="line">            $http(&#123;</span><br><span class="line">                url: &apos;www.baidu.com&apos;,</span><br><span class="line">                data: data,</span><br><span class="line">                method: &apos;POST&apos;</span><br><span class="line">            &#125;).success(callback);</span><br><span class="line">&#125;</span><br><span class="line">&#125;]);</span><br><span class="line"></span><br><span class="line">var App = angular.module(&quot;App&quot;, [ &quot;Server&quot;]);</span><br><span class="line">App.controller(&apos;Ctrl&apos;, [&apos;$scope&apos;, &apos;Api&apos;,</span><br><span class="line">    function($scope, Api) &#123;</span><br><span class="line">    Api.getTest(&quot;?name=xxx&amp;passwd=xxx&quot;, function(res)&#123;</span><br><span class="line">    //res为返回值</span><br><span class="line">alert(&quot;请求成功！&quot;)</span><br><span class="line">&#125;);</span><br><span class="line">Api.postTest(&#123;name: xxx, passwd: xxx&#125;, function(res)&#123;</span><br><span class="line">    //res为返回值</span><br><span class="line">alert(&quot;请求成功！&quot;)</span><br><span class="line">&#125;);</span><br><span class="line">    &#125;]);</span><br></pre></td></tr></table></figure><a id="more"></a><p>这里以GET和POST请求为例。首先我们需要在APP中注入Server这个模块，才能使用里面的service服务Api，如上代码所示，注入Server之后我们就可以在控制器Ctl里面注入Api服务，然后使用我们之前定义好的接口。</p><ol><li>GET请求中params 代表了？之后的参数，即 params == ‘?name=xxx&amp;passwd=xxx’,这样就可以通过传参的方式把参数加入到地址上，callback是请求成功后的回调，是个function，我们可以在里面打印出请求成功的返回值。<ol start="2"><li>POST请求中data代表请求参数，传入之后直接请求即可，其他跟get请求类似。</li></ol></li></ol><h2 id="error"><a href="#error" class="headerlink" title="error"></a>error</h2><p>还有一点需要说的是http请求有时候会失败，当我们http请求失败的时候，将不会再调用success回调函数，而是会进入error回调，下面我就写一下http请求的success和error同时存在的写法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var Server = angular.module(&quot;Server&quot;, []);</span><br><span class="line"></span><br><span class="line">Server.service(&quot;Api&quot;, [&quot;$http&quot;, function ($http) &#123;</span><br><span class="line">return &#123;</span><br><span class="line">getTest : function (params, successCallback, errorCallback) &#123;</span><br><span class="line">            $http(&#123;</span><br><span class="line">                url: &apos;www.baidu.com?name=xxx&amp;passwd=xxx&apos;,</span><br><span class="line">                method: &apos;GET&apos;</span><br><span class="line">            &#125;).then(successCallback, errorCallback);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;]);</span><br><span class="line"></span><br><span class="line">var App = angular.module(&quot;App&quot;, [ &quot;Server&quot;]);</span><br><span class="line">App.controller(&apos;Ctrl&apos;, [&apos;$scope&apos;, &apos;Api&apos;,</span><br><span class="line">    function($scope, Api) &#123;</span><br><span class="line">    Api.getTest(&quot;?name=xxx&amp;passwd=xxx&quot;, function(res)&#123;</span><br><span class="line">    //res为返回值</span><br><span class="line">alert(&quot;请求成功！&quot;)</span><br><span class="line">&#125;, function(res)&#123;</span><br><span class="line">    //res为返回值</span><br><span class="line">alert(&quot;请求失败！&quot;)</span><br><span class="line">&#125;);</span><br><span class="line">    &#125;]);</span><br></pre></td></tr></table></figure><p>用法几乎一样，只不过把success(callback)改成了then(callback1, callback2).然后在调用的时候再加入一个function即可。</p><p>最简单的get写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$http(&#123;</span><br><span class="line">          url: &apos;www.baidu.com?name=xxx&amp;passwd=xxx&apos;,</span><br><span class="line">          method: &apos;GET&apos;</span><br><span class="line">      &#125;).success(callback);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
