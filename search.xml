<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>z-index失效了？</title>
      <link href="/2019/08/27/z-index%E5%A4%B1%E6%95%88%E4%BA%86%EF%BC%9F/"/>
      <url>/2019/08/27/z-index%E5%A4%B1%E6%95%88%E4%BA%86%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们在使用z-index的时候，有时候会发现，无论怎么样增大z-index的值，都无法改变目标元素的层级。</p></blockquote><ul><li><strong> 其实是这几种情况在作怪 </strong></li></ul><ol><li><strong>position</strong></li><li><strong>float</strong></li><li><strong>opcity</strong> </li></ol><ul><li>父盒子的层级问题，当你的父盒子层级小于另一个父盒子层级的时候，你子元素的z-index再高都是没有用的。该元素的层级只在该元素所在的容器内起作用。该种情况大家应该容易理解，不过也可以看下面的例子。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        .a1&#123;</span><br><span class="line">            position:relative;</span><br><span class="line">            z-index: 2;</span><br><span class="line">            width:400px;</span><br><span class="line">            height:400px;</span><br><span class="line">            background: black;</span><br><span class="line">            border:1px solid #eee;</span><br><span class="line">            margin-bottom: -100px;</span><br><span class="line">        &#125;</span><br><span class="line">        .a&#123;</span><br><span class="line">            position:relative;</span><br><span class="line">            z-index: 1;</span><br><span class="line">            width:400px;</span><br><span class="line">            height:400px;</span><br><span class="line">            background: yellow;</span><br><span class="line">            left:0;</span><br><span class="line">            border:1px solid #eee;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .b&#123;</span><br><span class="line">            position:absolute;</span><br><span class="line">            left:0;</span><br><span class="line">            top:0;</span><br><span class="line">            z-index: 50;</span><br><span class="line">            width:200px;</span><br><span class="line">            height:200px;</span><br><span class="line">            background: red;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .c&#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left:0;</span><br><span class="line">            top:0;</span><br><span class="line">            z-index:1111;</span><br><span class="line">            width:100px;</span><br><span class="line">            height:100px;</span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;a1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;a&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;b&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>opcity属性，当你要设置两个元素的z-index值的时候，要注意是否给其中一个元素添加了opcity属性，如果添加了，那么添加了opcity属性的元素将一直在最上层，这个我在之前的文章中讲过</li><li><a href="https://blog.csdn.net/lunhui1994_/article/details/80853410" target="_blank" rel="noopener">opcity引发的元素层级变化</a></li></ul><hr><ul><li>还有就是比较普遍的，我们设置层级一般都是因为设置了position，当你设置的两个子元素，一个有position属性，另一个没有position的时候，拥有position属性的元素将一直在其他元素上方。如下面的例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        .a&#123;</span><br><span class="line">            position:relative;</span><br><span class="line">            z-index: 1;</span><br><span class="line">            width:400px;</span><br><span class="line">            height:400px;</span><br><span class="line">            background: yellow;</span><br><span class="line">            left:0;</span><br><span class="line">            border:1px solid #eee;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .b&#123;</span><br><span class="line">            position:absolute;</span><br><span class="line">            left:0;</span><br><span class="line">            top:0;</span><br><span class="line">            z-index: 50;</span><br><span class="line">            width:200px;</span><br><span class="line">            height:200px;</span><br><span class="line">            background: red;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .c&#123;</span><br><span class="line">            z-index:100;</span><br><span class="line">            width:100px;</span><br><span class="line">            height:100px;</span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;a&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;b&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li></ul><p>需要给c也加上position属性才让bc可以先同处一级，然后z-index才会起作用。</p><ul><li>那如果我把子元素的position都去掉呢？当父盒子有position而所有子元素都没有position属性的时候，z-index一样全部失效，后面的盒子将会覆盖前面的盒子，z-index无效。</li><li>同样的我们两个都加上浮动的效果跟上面的效果是一样的，后覆盖前，z-index无效</li><li>一个加float另一个不加，则是加float的元素一直浮动在最上层。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        .a&#123;</span><br><span class="line">            position:absolute;</span><br><span class="line">            z-index: 1;</span><br><span class="line">            width:400px;</span><br><span class="line">            height:400px;</span><br><span class="line">            background: yellow;</span><br><span class="line">            left:0;</span><br><span class="line">            border:1px solid #eee;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .b&#123;</span><br><span class="line">            z-index: -10;</span><br><span class="line">            width:200px;</span><br><span class="line">            height:200px;</span><br><span class="line">            background: red;</span><br><span class="line">            margin-bottom: -100px;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .c&#123;</span><br><span class="line">            z-index:101;</span><br><span class="line">            width:100px;</span><br><span class="line">            height:100px;</span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;a&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;b&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>其他情况欢迎补充。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>angular 的 uiRouter 的 方法$state.includes （判断当前激活路由）</title>
      <link href="/2019/08/27/angular%20%E7%9A%84%20uiRouter%20%E7%9A%84%20%E6%96%B9%E6%B3%95$state.includes%20%EF%BC%88%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E6%BF%80%E6%B4%BB%E8%B7%AF%E7%94%B1%EF%BC%89/"/>
      <url>/2019/08/27/angular%20%E7%9A%84%20uiRouter%20%E7%9A%84%20%E6%96%B9%E6%B3%95$state.includes%20%EF%BC%88%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E6%BF%80%E6%B4%BB%E8%B7%AF%E7%94%B1%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="angular-的-uiRouter-的-方法-state-includes-（判断当前激活路由）"><a href="#angular-的-uiRouter-的-方法-state-includes-（判断当前激活路由）" class="headerlink" title="angular 的 uiRouter 的 方法$state.includes （判断当前激活路由）"></a>angular 的 uiRouter 的 方法$state.includes （判断当前激活路由）</h3><p>作用：</p><ol><li><p>该方法用于判断当前激活的也就是地址栏的路由地址是哪个路由。</p></li><li><p>比如   $state.includes(‘app’) 那么如果页面地址为“<a href="http://www.baidu.com#/app”" target="_blank" rel="noopener">www.baidu.com#/app”</a> 或者 “<a href="http://www.baidu.com#/app/xxx”" target="_blank" rel="noopener">www.baidu.com#/app/xxx”</a> 的时候，该方法的值会返回true。<br>（<em>一般我们定义的路由和地址栏地址是相互对应的，方便管理。举例也是在app.xxx对应app/xxx这样设置路由的情况下</em>）</p></li><li><p>如激活的路由为 app.page.page1 那么</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$state.includes(&apos;app&apos;)              //返回 true</span><br><span class="line">$state.includes(&apos;app.page&apos;)         //返回 true</span><br><span class="line">$state.includes(&apos;app.page.page1&apos;)   //返回 true</span><br></pre></td></tr></table></figure></li></ol><p>用法：</p><blockquote><p>知道了它的作用，接下来看看它的使用背景。</p><ol><li>我们可以用来激活当前menu的状态。即使当前路由对应的菜单高亮或激活状态。</li></ol></blockquote><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ng-init=&quot;menu_flag= !($state.includes(&apos;app.page1&apos;) || $state.includes(&apos;app.page2&apos;))&quot;&gt; 主菜单&lt;/div&gt;</span><br><span class="line">&lt;div ng-hide=&quot;menu_flag&quot;&gt;</span><br><span class="line">    &lt;div ng-class=&quot;&#123;active: $state.includes(&apos;app.page1&apos;)&#125;&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:;&quot; ui-sref=&quot;app.page1&quot;&gt;子菜单一&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div ng-class=&quot;&#123;active: $state.includes(&apos;app.page2&apos;)&#125;&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:;&quot; ui-sref=&quot;app.page2&quot;&gt;子菜单二&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// ......  n个类似结构组成的菜单</span><br><span class="line"></span><br><span class="line">&lt;div ng-init=&quot;menu_flag1= !($state.includes(&apos;app.page3&apos;) || $state.includes(&apos;app.page4&apos;))&quot;&gt; 主菜单&lt;/div&gt;</span><br><span class="line">&lt;div ng-hide=&quot;menu_flag1&quot;&gt;</span><br><span class="line">    &lt;div ng-class=&quot;&#123;active: $state.includes(&apos;app.page3&apos;)&#125;&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:;&quot; ui-sref=&quot;app.page1&quot;&gt;子菜单一&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div ng-class=&quot;&#123;active: $state.includes(&apos;app.page4&apos;)&#125;&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:;&quot; ui-sref=&quot;app.page2&quot;&gt;子菜单二&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol><li><p>如上我们的菜单构成是由若干个类似结构构成，主menu控制若干个子menu。active是我们定义的激活菜单的css类名，当我们选中某个菜单时激活该菜单。即可借用$state.includes()来实现该功能。</p></li><li><p>同时，当我们的主menu要控制闭合和展开的话，当我们刷新的时候，我们通过判断<code>($state.includes(&#39;app.page3&#39;) || $state.includes(&#39;app.page4&#39;))</code> 的值来在刷新之后判断该主菜单是否闭合。</p></li><li>当然我们也可以这样定义我们的路由。当然我们也可以这样定义我们的路由。例如： 一层菜单为 app.menu1 , 该主菜单下路由定义为</li></ol><table><thead><tr><th>路由名称</th><th>一级路由定义</th><th>二级路由定义</th></tr></thead><tbody><tr><td>一层菜单</td><td>app.menu1</td><td></td></tr><tr><td>二层菜单</td><td></td><td>app.menu1.menu1_1</td></tr><tr><td>二层菜单</td><td></td><td>app.menu1.menu1_2</td></tr></tbody></table><p>这样的话我们在主菜单闭合上只需要判断 <code>$state.includes(app.menu1)</code> 即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_2. 两数相加</title>
      <link href="/2019/08/27/leetcode_2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
      <url>/2019/08/27/leetcode_2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>示例：</p><pre><code>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)输出：7 -&gt; 0 -&gt; 8原因：342 + 465 = 807</code></pre><p>题目解析：<br>    该题给出两个链表，求出两个链表各个结点的和，那首先我们需要知道链表是什么样子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * function ListNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.next = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p>如上，链表的每个结点就是这个样子，next指向下一个结点，当然这是在js中简单的实现了链表。</p><p>然后知道了链表，那么就开始各位相加吧~，这个题唯一的难点就是在于各个结点相加的时候可能会产生进位。比如9+2=11，那么就需要进一位，本位取10的余数为值，然后我们就需要在下一个结点相加时把前两位可能产生的进位也算进去。</p><p>如下是我的js解答：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * function ListNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.next = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @param &#123;ListNode&#125; l1</span><br><span class="line"> * @param &#123;ListNode&#125; l2</span><br><span class="line"> * @return &#123;ListNode&#125;</span><br><span class="line"> * y 为进位值</span><br><span class="line"> * i 代表和的位</span><br><span class="line"> * n 代表了和的每一位的值</span><br><span class="line"> * arr 代表和（我们用数组表示更方便一点）</span><br><span class="line"> */</span><br><span class="line">var addTwoNumbers = function(l1, l2) &#123;</span><br><span class="line">    var arr = [], i = 0, n = 0, y = 0;   //初始化</span><br><span class="line">    </span><br><span class="line">    //因为链表不一定同样长的，所以只要有一个链表的结点不为空，我们都需要继续计算；同时我们也要考虑进位，即使两个链表结束了，如果有进位的话，那我们还是需要再计算一次的。</span><br><span class="line">    </span><br><span class="line">    while (l1 !==  null || l2 !== null || y !== 0) &#123;  </span><br><span class="line">        l1 = l1 ? l1 : new ListNode(0); //判断链表l1的该结点是否为null，如果为null初始化成值为0的结点，方便运算。</span><br><span class="line">        </span><br><span class="line">        l2 = l2 ? l2 : new ListNode(0); // 同理</span><br><span class="line">       var num = l1.val + l2.val + y; // 计算该位的两个结点的和，同时要加上前两位的进位。</span><br><span class="line">        </span><br><span class="line">        num &gt; 9 ? (y = 1, n = num - 10) : (n = num, y = 0); // 判断该位是否需要进位，需要进位的话就该位取10的余数，然后进一位（y = 1），反之初始化进位值为0。</span><br><span class="line">        </span><br><span class="line">        arr[i] = n; //给和的每一位赋值</span><br><span class="line">        </span><br><span class="line">        i++; //进入下一次循环</span><br><span class="line">        </span><br><span class="line">        l1 = l1.next;  // 进入l1下一个结点</span><br><span class="line">        </span><br><span class="line">        l2 = l2.next; // 进入l2下一个结点</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    arr = arr.reverse(); //这里反转一下，原本是[7, 0, 8]反转为[8, 0, 7],方便后面生成链表。</span><br><span class="line">    </span><br><span class="line">    let listNode = new ListNode(arr.shift()) //取第一个值创建第一个结点（是最终链表的最后一个结点）</span><br><span class="line">    </span><br><span class="line">    return arr.reduce((ori,cur)=&gt;&#123;</span><br><span class="line">    </span><br><span class="line">        let ln = new ListNode(cur) //生成当前结点</span><br><span class="line">    </span><br><span class="line">        ln.next = ori //将当前结点的next指向之前生成的链表的第一个结点</span><br><span class="line">    </span><br><span class="line">        return ln //返回新的链表（赋值给了 ori ）</span><br><span class="line">    </span><br><span class="line">    &#125;,listNode)// listNode是初始值。即链表末端的第一个值，我们之所以从最后一个开始创建链表也是因为方便。因为我们要操作结点的next，所以将新结点的next指向原来的链表，要比找到链表的最后一个结点的next指向新结点要方便一些。</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6 对象数组查找某一个对象 findIndex</title>
      <link href="/2019/08/27/ES6%20%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E6%9F%A5%E6%89%BE%E6%9F%90%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%20findIndex/"/>
      <url>/2019/08/27/ES6%20%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E6%9F%A5%E6%89%BE%E6%9F%90%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%20findIndex/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 查找数组特定元素需要用到的方法就是<strong>findIndex()</strong>。</p></blockquote><h2 id="用法与定义"><a href="#用法与定义" class="headerlink" title="用法与定义"></a>用法与定义</h2><ul><li>findIndex() 方法返回传入一个测试<strong>条件</strong>（函数）符合条件的数组<strong>第一个</strong>元素位置。</li><li>findIndex() 方法为数组中的每个元素都调用一次函数执行：<br>  当数组中的元素在测试条件时返回 true 时, findIndex() 返回<strong>符合条件</strong>的元素的<strong>索引位置</strong>，<em>之后的值不会再调用    执行函数。</em><br>如果没有符合条件的元素返回 <strong>-1</strong></li></ul><p>以上是比较官方的对于findIndex()的定义</p><hr><p><strong>接下来我结合实例来进行自己的解释.</strong></p><ol><li>第一条的意思如下:<br>当条件函数返回<strong>true</strong>的时候，findindex会跳出，然后返回当前元素的下标。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//首先是普通数组</span><br><span class="line"></span><br><span class="line">var dataArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];</span><br><span class="line"></span><br><span class="line">function fn(num, numIndex, nums)&#123;</span><br><span class="line">//该函数的三个参数，num代表当前项，numIndex代表当前项下标，nums代表该数组。</span><br><span class="line">return num &gt; 5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dataArr.findIndex(fn);//值为5(即6的下标)</span><br><span class="line"></span><br><span class="line">------------------------分割线-----------------------------</span><br><span class="line"></span><br><span class="line">//同样的假如你的数组是个对象数组：</span><br><span class="line">var objArr = [&#123;</span><br><span class="line">name: &apos;小王&apos;,</span><br><span class="line">age: 14</span><br><span class="line">&#125;,&#123;</span><br><span class="line">name: &apos;大王&apos;,</span><br><span class="line">age: 41</span><br><span class="line">&#125;,&#123;</span><br><span class="line">name: &apos;老王&apos;,</span><br><span class="line">age: 61</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line">function objFn(obj, objIndex, objs)&#123;</span><br><span class="line">return num.age &gt; 20;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">objArr .findIndex(objFn);//值为1(即大王的下标)</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>第二条的意思就更好理解了，因为findindex只返回第一个符合条件的元素下标，所以在找到第一个符合条件的元素之后，他会跳出该函数，之后的数组内的元素将不再调用，相当于加了个break；</li></ol><p><strong>实际用法举例</strong></p><p>假如我们要在所有人里面挑选队友，但是不想重复。在我们通过id查找的时候，就可以这么写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var allPeple = [&#123;</span><br><span class="line">name: &apos;小王&apos;,</span><br><span class="line">id: 14</span><br><span class="line">&#125;,&#123;</span><br><span class="line">name: &apos;大王&apos;,</span><br><span class="line">id: 41</span><br><span class="line">&#125;,&#123;</span><br><span class="line">name: &apos;老王&apos;,</span><br><span class="line">id: 61</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line">var myTeamArr = [&#123;</span><br><span class="line">name: &apos;小王&apos;,</span><br><span class="line">id: 14</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line">var PId = 14; //假如这个是要添加的人的ID</span><br><span class="line"></span><br><span class="line">function pFn(p)&#123;return p.id == PId ;&#125;</span><br><span class="line"></span><br><span class="line">//判断myteam里是不是有这个队员，如果==-1 代表没有，在allPeople中找到他，添加入我的队伍</span><br><span class="line"></span><br><span class="line">myTeamArr.findIndex(pFn) == -1 ? myTeamArr.push(allPeple.find(pFn)) : alert(&apos;已存在该人员&apos;);</span><br><span class="line"></span><br><span class="line">//这样写可以将两个for循环直接总结成一行代码</span><br></pre></td></tr></table></figure></p><p><strong>另外需要补充的一点</strong></p><blockquote><p>与其相对应的有<strong>find</strong>()函数，用法一致，只不过返回的是<strong>元素本身</strong>，而不是元素的下标。</p></blockquote><p><strong>兼容性</strong></p><blockquote><p>因为是es6的所以使用的时候要注意兼容性问题，<strong>ie11</strong>及之前的版本都<strong>不可兼容。</strong></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>v-model</title>
      <link href="/2019/08/27/v-model/"/>
      <url>/2019/08/27/v-model/</url>
      
        <content type="html"><![CDATA[<p>最近学习vue，从最基础的文档看起。到目前基础已经看完。有两个问题很迷茫。</p><ol><li>vue的动态参数（2.6新增）。demo一直报错。分析原因是因为vue不允许动态添加根一级的变量。（不理解）</li><li>组件中v-model的使用文档中说的让我有点绕。不过已经顺过来了，所以来分享一下。</li></ol><h2 id="官方给出的例子是这样。-可以直接使用"><a href="#官方给出的例子是这样。-可以直接使用" class="headerlink" title="官方给出的例子是这样。(可以直接使用)"></a>官方给出的例子是这样。(可以直接使用)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HTML:</span><br><span class="line"></span><br><span class="line">&lt;custom-input v-model=&quot;searchText&quot;&gt;&lt;/custom-input&gt;</span><br><span class="line"></span><br><span class="line">JS:</span><br><span class="line">Vue.component(&apos;custom-input&apos;, &#123;</span><br><span class="line">  props: [&apos;value&apos;],</span><br><span class="line">  template: `</span><br><span class="line">    &lt;input</span><br><span class="line">      v-bind:value=&quot;value&quot;</span><br><span class="line">      v-on:input=&quot;$emit(&apos;input&apos;, $event.target.value)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="v-model可以改写为这种形式，两者完全等价。"><a href="#v-model可以改写为这种形式，两者完全等价。" class="headerlink" title="v-model可以改写为这种形式，两者完全等价。"></a>v-model可以改写为这种形式，两者完全等价。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=&quot;searchText&quot;&gt;</span><br><span class="line"></span><br><span class="line">等价于：</span><br><span class="line"></span><br><span class="line">&lt;input</span><br><span class="line">  v-bind:value=&quot;searchText&quot;</span><br><span class="line">  v-on:input=&quot;searchText = $event.target.value&quot;&gt; //（ $event.target.value为事件当前目标上的value值。）</span><br></pre></td></tr></table></figure><p>第二种写法：</p><ol><li>在input上绑定了input事件，通过触发input事件，执行给searchText赋值语句。</li><li>v-bind将searchText赋值给input标签的value属性。</li></ol><p>再看官方的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;custom-input v-model=&quot;searchText&quot;&gt;&lt;/custom-input&gt;</span><br></pre></td></tr></table></figure></p><p>等价于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;custom-input  </span><br><span class="line">v-bind:value=&quot;searchText&quot;</span><br><span class="line">  v-on:input=&quot;searchText = $event&quot;   //$event 为组件内部抛出来的值。（这个如果不明白可以看组件的自定义事件部分）</span><br><span class="line">&gt;&lt;/custom-input&gt;</span><br></pre></td></tr></table></figure></p><p>再加上官方的js写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;custom-input&apos;, &#123;</span><br><span class="line">  props: [&apos;value&apos;],</span><br><span class="line">  template: `</span><br><span class="line">    &lt;input</span><br><span class="line">      v-bind:value=&quot;value&quot;</span><br><span class="line">      v-on:input=&quot;$emit(&apos;input&apos;, $event.target.value)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>我们在组件内的input上监听了input事件，并且用该input事件对组件上的（自定义）input事件进行触发（searchText = $event”）；</li><li>将$  event.target.value作为参数传给     v-on:input=”searchText =  $ event “，$ event === $ event.target.value。执行语句searchText被赋值。</li><li>组件上的v-bind:value = “searchText” 是将searchText的值绑定到组件内部的props里的value上。</li><li>组件内部将props中的value 绑定到input的value上。就这样完成了一次双向绑定。</li></ol><p>而根据官方v-model的两种写法，组件上转换回v-modal的写法。就完成了。最终结果就如开头所示。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>完全背包问题</title>
      <link href="/2019/04/30/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>/2019/04/30/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>这里借用一个题目的描述来说明要解决问题的背景。</p></blockquote><p>LiYuxiang是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同种类的草药，采每一种都需要一些时间，每一种也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”</p><p>如果你是LiYuxiang，你能完成这个任务吗？</p><p>此题和原题的不同点：</p><p>1.每种草药可以无限制地疯狂采摘。</p><p>2.药的种类眼花缭乱，采药时间好长好长啊！师傅等得菊花都谢了！</p><h2 id="一、-什么是背包算法"><a href="#一、-什么是背包算法" class="headerlink" title="一、 什么是背包算法"></a>一、 什么是背包算法</h2><p>背包算法的基础标准描述为：当前有N件商品，每件商品都有不同的价值v和重量w。我们要把这些商品放在容量为L的背包中，实现背包中的价值最大化。（第i件商品的价值为v[i]，重量为w[i])。上面的题目中的条件之一：草药无限（每件商品可以重复放入背包）即表明了该问题是完全背包问题。</p><h2 id="二、-背包算法的应用"><a href="#二、-背包算法的应用" class="headerlink" title="二、 背包算法的应用"></a>二、 背包算法的应用</h2><p>背包算法在我看来是一种“性价比”算法。即我们在有限的条件下得到最大的收获。例如曾经有个节目可以让嘉宾在有限的时间内选购满满购物车的货品。这个场景及其符合背包算法。或者例如我们在考试的时侯，都会尽可能的选择简单并且分数又多的题先做。同时我们也可以应用到其他问题上去。比如在选择购买多种原材料时，尽可能的缩小原材料成本。投资时对多种投资产品的选择组合。</p><h2 id="三、-背包算法的原理"><a href="#三、-背包算法的原理" class="headerlink" title="三、 背包算法的原理"></a>三、 背包算法的原理</h2><p>背包问题需要用到动态规划算法。当我们装一个商品的时侯需要判断几个条件：</p><ol><li>该商品的重量和背包大小的关系。如果背包的总容量小于商品的重量，那就GG，根本不用考虑了。</li><li>商品的重量小于背包剩余容量。即背包中之前装入的商品不需要拿出来就可以把当前商品装下，那也不用考虑，直接装就好了。</li><li>商品的重量小于背包总容量，但是剩余空间不够装了。那我们就需要考虑衡量一下，拿出来原有的一部分商品，装入现在的商品是不是划算的。</li></ol><p>从上面的三个条件可以看出最重要的就是第三条，我们需要判断价值。假设我们背包可以装<strong>8kg</strong>东西，现在有三个商品（商品都是以袋为单位销售不可拆分）：</p><table><thead><tr><th style="text-align:center">苹果</th><th style="text-align:center">香蕉</th><th>草莓</th></tr></thead><tbody><tr><td style="text-align:center">3kg</td><td style="text-align:center">2kg</td><td>5kg</td></tr><tr><td style="text-align:center">￥45</td><td style="text-align:center">￥20</td><td>￥150</td></tr></tbody></table><p>我们以1kg为单位打表:<br>第一次打表</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">0kg</th><th style="text-align:center">1kg</th><th style="text-align:center">2kg</th><th style="text-align:center">3kg</th><th style="text-align:center">4kg</th><th style="text-align:center">5kg</th><th style="text-align:center">6kg</th><th style="text-align:center">7kg</th><th style="text-align:center">8kg</th></tr></thead><tbody><tr><td style="text-align:center">无</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">苹果</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td></tr><tr><td style="text-align:center">香蕉</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">草莓</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table><p>第二次打表</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">0kg</th><th style="text-align:center">1kg</th><th style="text-align:center">2kg</th><th style="text-align:center">3kg</th><th style="text-align:center">4kg</th><th style="text-align:center">5kg</th><th style="text-align:center">6kg</th><th style="text-align:center">7kg</th><th style="text-align:center">8kg</th></tr></thead><tbody><tr><td style="text-align:center">无</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">苹果</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td></tr><tr><td style="text-align:center">香蕉</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">￥20</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥65</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td><td style="text-align:center">￥110</td></tr><tr><td style="text-align:center">草莓</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table><p>最终打表结果：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">0kg</th><th style="text-align:center">1kg</th><th style="text-align:center">2kg</th><th style="text-align:center">3kg</th><th style="text-align:center">4kg</th><th style="text-align:center">5kg</th><th style="text-align:center">6kg</th><th style="text-align:center">7kg</th><th style="text-align:center">8kg</th></tr></thead><tbody><tr><td style="text-align:center">无</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">苹果</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td></tr><tr><td style="text-align:center">香蕉</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">￥20</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥65</td><td style="text-align:center">￥90</td><td style="text-align:center">￥90</td><td style="text-align:center">￥110</td></tr><tr><td style="text-align:center">草莓</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">￥20</td><td style="text-align:center">￥45</td><td style="text-align:center">￥45</td><td style="text-align:center">￥150</td><td style="text-align:center">￥150</td><td style="text-align:center">￥170</td><td style="text-align:center">￥195</td></tr></tbody></table><p>如表我们的最终排列结果。</p><p>核心判断为：<code>bag[i-1][j]</code> 和<code>bag[i-1][j-k*w[i]] + k*v[i]</code> 的价值哪个大。<br>我来说明上面的变量都代表了什么：</p><ul><li><code>bag[i][j]</code> 代表了我们在看到第i个商品时，背包容量占用了<code>jkg</code>时，背包内物品的价值。</li><li>那么<code>bag[i-1][j]</code> 就代表了我们在看到第i-1个商品时，背包容量占用了<code>jkg</code>时，背包内装的价值。</li><li><code>v[i]</code>代表了当前商品的价值，<code>k*v[i]</code>代表了<code>k</code>个<code>v[i]</code>的价值（商品不限量）。</li><li><code>w[i]</code>代表了当前商品的重量，<code>k*w[i]</code>代表了<code>k</code>个<code>w[i]</code>的重量。</li><li><code>bag[i-1][j-k*w[i]]</code>就代表了上一个情况下，背包装了k个i商品时，余下空间在上一状态的最大价值。</li></ul><p>所以，我们的核心判断种需要 上一个情况下的背包的所有状态。当我们把背包中 <code>k*w[i]</code>的空间腾出来用来装k个i商品，加上剩余空间可以装的商品的最大价值。如果它<strong>小于</strong>上一个状态下<code>bag[i-1][j]</code>所装货品的价值，那么我们就没必要替换这部分空间了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//两个循环</span><br><span class="line">for (3) //3个商品</span><br><span class="line">for (8) // 8种占用空间的情况（1kg-8kg）</span><br><span class="line"></span><br><span class="line">// 核心判断</span><br><span class="line">if (bag[i-1][j] &gt; bag[i-1][j-k*w[i]] + k*v[i]) &#123;</span><br><span class="line">bag[i][j] = bag[i-1][j];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">bag[i][j] = bag[i-1][j-k*w[i]] + k*v[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实回到生活上，我们的想法跟这个是一样的，当我们有个背包要装满的时侯，我们先看到了苹果，那么当然的，我们要尽可能多的把苹果装到包包里。如果有剩余空间装不下那也只能浪费着。然后我们发现了香蕉，我们会开始想着怎么用香蕉代替一部分苹果把空间填满。在这个思考的过程中，我们会一直比较什么样的组合价值最大。草莓也是一样。</p><p>其实如开头所说，我说这是“性价比”。上面我们商品出现的顺序是随机的。其实我们装东西判断价值，其实就是装性价比最高的物品。 不过同时需要考虑到空间的利用率。如果我们事先把性价比高的物品排在前面，那么效率会提高不少。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
