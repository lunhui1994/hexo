<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eighteen Blog</title>
  
  <subtitle>Eighteen Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.zsfmyz.top/"/>
  <updated>2020-09-23T03:39:21.086Z</updated>
  <id>https://www.zsfmyz.top/</id>
  
  <author>
    <name>赵十八</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS揭秘：4.边框内圆角</title>
    <link href="https://www.zsfmyz.top/Css/CSS%E6%8F%AD%E7%A7%98%EF%BC%9A5.%E6%9D%A1%E7%BA%B9%E8%83%8C%E6%99%AF%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://www.zsfmyz.top/Css/CSS揭秘：5.条纹背景（上）/</id>
    <published>2020-09-23T03:14:27.000Z</published>
    <updated>2020-09-23T03:39:21.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="条纹背景"><a href="#条纹背景" class="headerlink" title="条纹背景"></a>条纹背景</h1><blockquote><p>背景知识：CSS线性渐变，background-size</p></blockquote><h2 id="CSS线性渐变"><a href="#CSS线性渐变" class="headerlink" title=" CSS线性渐变"></a> CSS线性渐变</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">red</span>, <span class="selector-tag">yellow</span>, <span class="selector-tag">blue</span>);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">red</span> 0%, <span class="selector-tag">yellow</span> 50%, <span class="selector-tag">blue</span> 100%);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">right</span>, <span class="selector-tag">red</span> 0%, <span class="selector-tag">yellow</span> 50%, <span class="selector-tag">blue</span> 100%);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>, <span class="selector-tag">red</span> 0%, <span class="selector-tag">yellow</span> 50%, <span class="selector-tag">blue</span> 100%);</span><br></pre></td></tr></table></figure><ol><li><code>to right</code>代表渐变偏移角度，<code>to right</code> (相当于<code>90deg</code>)</li><li><code>red，yellow，blue</code>代表渐变色，表示从<code>red - yellow - blue (相当于red 0% - yellow 50% - blue 100%)</code>。 意思是从0%距离处为red，通过0%-50%的距离渐变到yellow，再通过50%-100%的距离渐变到blue。<ol><li>linear-gradient(90deg, red 0%, yellow 50%, blue <code>0</code>) 等价于 linear-gradient(90deg, red 0%, yellow 50%, blue <code>50%</code>) 因为当你的色标位置值设置为0时，会自动调整为前一个色标位置值。</li><li>linear-gradient(90deg, red 20%, yellow 50%, blue 100%); 代表从<strong>0-20%都为red色</strong>。</li><li>linear-gradient(90deg, red <code>20%</code>, yellow <code>20%</code>, blue 100%); 代表从20%处颜色<strong>突然</strong>变化为yellow。（<strong>20%-20%之间没有渐变距离</strong>）</li><li>linear-gradient(90deg, red 20%, yellow <code>20%</code>, yellow <code>50%</code>, blue 100%); 代表从<code>20%-50%</code>处都是<strong>黄色</strong>，然后从50%处开始渐变直到100%变化为blue</li></ol></li></ol><h2 id="css线性渐变小结"><a href="#css线性渐变小结" class="headerlink" title="css线性渐变小结"></a>css线性渐变小结</h2><ol start="3"><li>line-gradient中相邻的两个颜色值代表，从色标A渐变到色标B。</li><li>颜色后紧跟的数值，代表AB两个颜色之间的渐变区间。（差值为渐变区间的长度，若差值为0，则为突变）</li><li>颜色后的数值为0时，自动取前一位的数值。</li></ol><h2 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a>background-size</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 关键字 */</span></span><br><span class="line"><span class="selector-tag">background-size</span>: <span class="selector-tag">cover</span></span><br><span class="line"><span class="selector-tag">background-size</span>: <span class="selector-tag">contain</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 一个值: 这个值指定图片的宽度，图片的高度隐式的为auto */</span></span><br><span class="line"><span class="selector-tag">background-size</span>: 50%</span><br><span class="line"><span class="selector-tag">background-size</span>: 3<span class="selector-tag">em</span></span><br><span class="line"><span class="selector-tag">background-size</span>: 12<span class="selector-tag">px</span></span><br><span class="line"><span class="selector-tag">background-size</span>: <span class="selector-tag">auto</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 两个值 */</span></span><br><span class="line"><span class="comment">/* 第一个值指定图片的宽度，第二个值指定图片的高度 */</span></span><br><span class="line"><span class="selector-tag">background-size</span>: 50% <span class="selector-tag">auto</span></span><br><span class="line"><span class="selector-tag">background-size</span>: 3<span class="selector-tag">em</span> 25%</span><br><span class="line"><span class="selector-tag">background-size</span>: <span class="selector-tag">auto</span> 6<span class="selector-tag">px</span></span><br><span class="line"><span class="selector-tag">background-size</span>: <span class="selector-tag">auto</span> <span class="selector-tag">auto</span></span><br></pre></td></tr></table></figure><ol><li><code>cover</code>代表背景图片覆盖背景尺寸，可能只能看到放大后的背景图片的一部分。</li><li><code>contain</code>代表背景图片装入背景尺寸，可能会看到背景留白。</li><li><code>两个值</code>分别为宽，高，高可以省略，默认auto<blockquote><p>摘自MDN <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-size" target="_blank" rel="noopener">background-size</a></p></blockquote><h2 id="水平条纹"><a href="#水平条纹" class="headerlink" title="水平条纹"></a>水平条纹</h2>首先我们来实现一下水平条纹的效果。<h3 id="水平-First-Try"><a href="#水平-First-Try" class="headerlink" title="水平 First Try"></a>水平 First Try</h3>我们了解了line-gradient的能力之后。我们可以通过极端缩小两个颜色之间的过渡间距来实现颜色突变的效果。<code>background: linear-gradient(#fb3 50%, #58a 50%);</code><blockquote><p>CSS图像（第三版）：如果多个色标具有相同的位置，它们会产生一个无限小的过渡区域。过渡的起止色分别是第一个和最后一个指定值。从效果上看，颜色会突然变化，而不是一个平滑的渐变过程。</p></blockquote><img src="https://img-blog.csdnimg.cn/20200703002131380.png" alt="在这里插入图片描述"><h3 id="水平-Second-Try"><a href="#水平-Second-Try" class="headerlink" title="水平 Second Try"></a>水平 Second Try</h3>目前看来我们已经实现了两个巨大的条纹，分别占据一半的高度。接下来我们再加上background-size的能力。<code>background-size: 100% 20px;</code><br><img src="https://img-blog.csdnimg.cn/20200703002828821.png" alt="在这里插入图片描述"><br>我们通过控制背景的尺寸，高度设置为20px，那么，各占50%背景尺寸高度的实际尺寸就变成了10px高。再加上背景的默认是重复平铺的，所以就实现了条纹的效果了。<h3 id="水平-Third-Try"><a href="#水平-Third-Try" class="headerlink" title="水平 Third Try"></a>水平 Third Try</h3>现在实现了两种颜色的交叉条纹。那么如果三种颜色，四种颜色怎么办呢？我想看到这里大家思考之后都会知道如何实现。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-id">#fb3</span> 33%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 66%, <span class="selector-tag">yellowgreen</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 100% 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://img-blog.csdnimg.cn/20200703004052995.png" alt="在这里插入图片描述"><br>水平条纹的颜色基本都可以实现了</p><h3 id="水平-Forth-Try"><a href="#水平-Forth-Try" class="headerlink" title="水平 Forth Try"></a>水平 Forth Try</h3><p> 我们再来尝试尝试加上透明度的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">rgba</span>(255, 187, 51, 0<span class="selector-class">.9</span>) 0%, <span class="selector-tag">rgba</span>(255, 187, 51, 0<span class="selector-class">.2</span>) 33%, <span class="selector-tag">rgba</span>(85, 136, 170, 0<span class="selector-class">.9</span>) 0, <span class="selector-tag">rgba</span>(85, 136, 170, 0<span class="selector-class">.2</span>) 66%, <span class="selector-tag">rgba</span>(154, 205, 50, 0<span class="selector-class">.9</span>) 0, <span class="selector-tag">rgba</span>(154, 205, 50, 0<span class="selector-class">.2</span>) 100%);</span><br><span class="line"><span class="comment">/* background: linear-gradient(rgba(255, 187, 51, 0.2) 0%, rgba(255, 187, 51, 0.9) 33%, rgba(85, 136, 170, 0.2) 0, rgba(85, 136, 170, 0.9) 66%, rgba(154, 205, 50, 0.2) 0, rgba(154, 205, 50, 0.9) 100%); */</span></span><br><span class="line"><span class="selector-tag">background-size</span>: 100% 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200703005540472.png" alt="在这里插入图片描述"><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">rgba</span>(255, 187, 51, 0<span class="selector-class">.2</span>) 0%, <span class="selector-tag">rgba</span>(255, 187, 51, 0<span class="selector-class">.9</span>) 33%, <span class="selector-tag">rgba</span>(85, 136, 170, 0<span class="selector-class">.2</span>) 0, <span class="selector-tag">rgba</span>(85, 136, 170, 0<span class="selector-class">.9</span>) 66%, <span class="selector-tag">rgba</span>(154, 205, 50, 0<span class="selector-class">.2</span>) 0, <span class="selector-tag">rgba</span>(154, 205, 50, 0<span class="selector-class">.9</span>) 100%);</span><br><span class="line"><span class="selector-tag">background-size</span>: 100% 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200703005620954.png" alt="在这里插入图片描述"><br>加上了透明度配合渐变，实现了一些立体凹陷和饱满的条纹效果。</p><h2 id="垂直条纹"><a href="#垂直条纹" class="headerlink" title="垂直条纹"></a>垂直条纹</h2><p>实现过了水平条纹，垂直条纹还不是手到擒来。<br>我们只需要在上述的水平条纹代码中做两处改变即可。</p><ol><li>渐变里参数添加角度，to right 或者 90deg </li><li>background-size 参数互换位置。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>, <span class="selector-id">#fb3</span> 33%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 66%, <span class="selector-tag">yellowgreen</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 60<span class="selector-tag">px</span> 100%;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200703010130334.png" alt="在这里插入图片描述"><br>其他效果留给大家去实践~</p><p>下一篇：<a href="https://blog.csdn.net/lunhui1994_/article/details/107192736" target="_blank" rel="noopener">CSS揭秘：5.条纹背景（下）</a></p><h1 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h1><ul><li><a href="https://blog.csdn.net/lunhui1994_/article/details/106653195" target="_blank" rel="noopener">CSS揭秘：1.半透明边框</a></li><li><a href="https://blog.csdn.net/lunhui1994_/article/details/106677231" target="_blank" rel="noopener">CSS揭秘：2.多重边框</a></li><li><a href="https://blog.csdn.net/lunhui1994_/article/details/106699349" target="_blank" rel="noopener">CSS揭秘：3.灵活的背景定位</a></li><li><a href="https://blog.csdn.net/lunhui1994_/article/details/106845534" target="_blank" rel="noopener">CSS揭秘：4.边框内圆角</a></li><li><a href="https://blog.csdn.net/lunhui1994_/article/details/106933714" target="_blank" rel="noopener">CSS揭秘：5.条纹背景（上）</a></li><li><a href="https://blog.csdn.net/lunhui1994_/article/details/107192736" target="_blank" rel="noopener">CSS揭秘：5.条纹背景（下）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;条纹背景&quot;&gt;&lt;a href=&quot;#条纹背景&quot; class=&quot;headerlink&quot; title=&quot;条纹背景&quot;&gt;&lt;/a&gt;条纹背景&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;背景知识：CSS线性渐变，background-size&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h
      
    
    </summary>
    
      <category term="Css" scheme="https://www.zsfmyz.top/categories/Css/"/>
    
    
      <category term="Css" scheme="https://www.zsfmyz.top/tags/Css/"/>
    
  </entry>
  
  <entry>
    <title>CSS揭秘：4.边框内圆角</title>
    <link href="https://www.zsfmyz.top/Css/CSS%E6%8F%AD%E7%A7%98%EF%BC%9A5.%E6%9D%A1%E7%BA%B9%E8%83%8C%E6%99%AF%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>https://www.zsfmyz.top/Css/CSS揭秘：5.条纹背景（下）/</id>
    <published>2020-09-23T03:14:27.000Z</published>
    <updated>2020-09-23T03:39:18.400Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章讲述了实现条纹效果所使用的CSS特性并实现了水平和垂直条纹，接下来我们来实现斜向条纹。</p><p>回忆一下之前的效果</p><p>水平条纹</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-id">#fb3</span> 33%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 66%, <span class="selector-tag">yellowgreen</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 100% 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200703004052995.png" alt="在这里插入图片描述"><br> 垂直条纹<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>, <span class="selector-id">#fb3</span> 33%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 66%, <span class="selector-tag">yellowgreen</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 60<span class="selector-tag">px</span> 100%;</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200703010130334.png" alt="在这里插入图片描述"></p><h2 id="一、斜向条纹"><a href="#一、斜向条纹" class="headerlink" title="一、斜向条纹"></a>一、斜向条纹</h2><p>现在我们来试一下斜向条纹的效果。</p><h3 id="1-斜向-First-Try"><a href="#1-斜向-First-Try" class="headerlink" title="1. 斜向 First Try"></a>1. 斜向 First Try</h3><p>类似垂直条纹一样，我们是不是可以先试一下45deg角度的效果呢？<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#fb3</span> 33%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 66%, <span class="selector-tag">yellowgreen</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 60<span class="selector-tag">px</span> 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></p><p> <img src="https://img-blog.csdnimg.cn/20200707224917963.png" alt="在这里插入图片描述"><br> 看来效果并不是我们想象的那样。</p><h3 id="2-斜向-Second-Try-双条纹"><a href="#2-斜向-Second-Try-双条纹" class="headerlink" title="2. 斜向 Second Try 双条纹"></a>2. 斜向 Second Try 双条纹</h3><p> 第一次尝试失败了，但是失败的经验还是有的，我们发现事实上，图片是斜过来的，但是是单片斜过来的。那么如果我们每一个单片的部分可以<strong>无缝对接</strong>，那是不是就有这个效果了呢？？？<br> 先来试一下双色条纹的<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#fb3</span> 25%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 50%, <span class="selector-id">#fb3</span> 0, <span class="selector-id">#fb3</span> 75%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 100%);</span><br><span class="line"><span class="selector-tag">background-size</span>: 60<span class="selector-tag">px</span> 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></p><p> <img src="https://img-blog.csdnimg.cn/20200707225023196.png" alt="在这里插入图片描述"><br> 我们通过制造一个个的相同无缝单片来<code>无缝</code>组成了斜向的效果，上图中的单片<br> <img src="https://img-blog.csdnimg.cn/2020070722525997.png" alt="在这里插入图片描述"></p><h3 id="3-斜向-Third-Try-三条纹"><a href="#3-斜向-Third-Try-三条纹" class="headerlink" title="3. 斜向 Third Try 三条纹"></a>3. 斜向 Third Try 三条纹</h3><p>来试一下三条纹的<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#fb3</span> 16<span class="selector-class">.6666</span>%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 33<span class="selector-class">.3333</span>%, <span class="selector-tag">yellowgreen</span> 0, <span class="selector-tag">yellowgreen</span> 50%, <span class="selector-id">#fb3</span> 0, <span class="selector-id">#fb3</span> 66<span class="selector-class">.6666</span>%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 83<span class="selector-class">.3333</span>%, <span class="selector-tag">yellowgreen</span> 0, <span class="selector-tag">yellowgreen</span> 100%);</span><br><span class="line"><span class="selector-tag">background-size</span>: 60<span class="selector-tag">px</span> 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200708092318421.png" alt="在这里插入图片描述"></p><h3 id="4-斜向-Forth-Try-同色间隔条纹"><a href="#4-斜向-Forth-Try-同色间隔条纹" class="headerlink" title="4. 斜向 Forth Try 同色间隔条纹"></a>4. 斜向 Forth Try 同色间隔条纹</h3><p>来试一下同色间隔条纹<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#58a</span> 25%, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 0, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 50%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 75%, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 0, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 100%);</span><br><span class="line"><span class="selector-tag">background-size</span>: 60<span class="selector-tag">px</span> 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200708093023181.png" alt="在这里插入图片描述"></p><p>斜向的效果现在应该也已经掌握了，我们只需要遵守切片间可以无缝交接的原则即可。</p><h3 id="5-斜向-Fifth-Try"><a href="#5-斜向-Fifth-Try" class="headerlink" title="5. 斜向 Fifth Try"></a>5. 斜向 Fifth Try</h3><p>实现了45度角，我们再试一下60度角吧~ 我们把45改为60.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(60<span class="selector-tag">deg</span>, <span class="selector-id">#58a</span> 25%, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 0, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 50%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 75%, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 0, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 100%);</span><br><span class="line"><span class="selector-tag">background-size</span>: 60<span class="selector-tag">px</span> 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></p><p>很显然失败了啊，除了45度角应该其他的比较难以实现了。<br><img src="https://img-blog.csdnimg.cn/20200708093435612.png" alt="在这里插入图片描述"></p><h3 id="6-斜向-Sixth-Try-60deg"><a href="#6-斜向-Sixth-Try-60deg" class="headerlink" title="6. 斜向 Sixth Try 60deg"></a>6. 斜向 Sixth Try 60deg</h3><p>别担心，我们还有一个办法，使用<code>repeating-linear-gradient</code>专门用来创建重复的线性渐变图像的。用法和linear-gradient类似。但是使用上还是有一些小细节需要注意。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">repeating-linear-gradient</span>(60<span class="selector-tag">deg</span>, <span class="selector-id">#58a</span> 25%, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 0, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 50%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 75%, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 0, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 100%);</span><br></pre></td></tr></table></figure></p><p><del>background-size: 60px 60px;</del>  记得这次要把size删掉了。我们不再需要了。<br>看，下面的效果已经实现了，这个方法可以实现任何角度的斜向条纹。</p><p><img src="https://img-blog.csdnimg.cn/20200708094400556.png" alt="在这里插入图片描述"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到现在我们已经实现了条纹效果的大部分情况，包括横向，垂直，斜向（45deg 和 任意角）。<br>核心css特性为：<code>background: linear-gradient(#fb3 33%, #58a 0, #58a 66%, yellowgreen 0);</code> 如果忘记了用法可以去<a href="https://blog.csdn.net/lunhui1994_/article/details/106933714" target="_blank" rel="noopener">上篇</a>开头再复习一下。</p><ol><li><p>横向条纹 </p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-id">#fb3</span> 33%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 66%, <span class="selector-tag">yellowgreen</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 100% 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></li><li><p>垂直条纹 <code>90deg</code></p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>, <span class="selector-id">#fb3</span> 33%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 66%, <span class="selector-tag">yellowgreen</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 60<span class="selector-tag">px</span> 100%;</span><br></pre></td></tr></table></figure></li><li><p>斜向条纹</p><ol><li><p><code>45deg</code> + 可无缝拼接的单片条纹</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#fb3</span> 25%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 50%, <span class="selector-id">#fb3</span> 0, <span class="selector-id">#fb3</span> 75%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 100%);</span><br><span class="line"><span class="selector-tag">background-size</span>: 60<span class="selector-tag">px</span> 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>repeating-linear-gradient()</code> 去掉background-size</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">repeating-linear-gradient</span>(60<span class="selector-tag">deg</span>, <span class="selector-id">#58a</span> 25%, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 0, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 50%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 75%, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 0, <span class="selector-tag">rgba</span>(85, 136, 170, <span class="selector-class">.5</span>) 100%);</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>下一篇：<a href="https://blog.csdn.net/lunhui1994_/article/details/108526888" target="_blank" rel="noopener">CSS揭秘：6.复杂的背景图案（上）</a></p><h1 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h1><ul><li><a href="https://blog.csdn.net/lunhui1994_/article/details/106653195" target="_blank" rel="noopener">CSS揭秘：1.半透明边框</a></li><li><a href="https://blog.csdn.net/lunhui1994_/article/details/106677231" target="_blank" rel="noopener">CSS揭秘：2.多重边框</a></li><li><a href="https://blog.csdn.net/lunhui1994_/article/details/106699349" target="_blank" rel="noopener">CSS揭秘：3.灵活的背景定位</a></li><li><a href="https://blog.csdn.net/lunhui1994_/article/details/106845534" target="_blank" rel="noopener">CSS揭秘：4.边框内圆角</a></li><li><a href="https://blog.csdn.net/lunhui1994_/article/details/106933714" target="_blank" rel="noopener">CSS揭秘：5.条纹背景（上）</a></li><li><a href="https://blog.csdn.net/lunhui1994_/article/details/107192736" target="_blank" rel="noopener">CSS揭秘：5.条纹背景（下）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上篇文章讲述了实现条纹效果所使用的CSS特性并实现了水平和垂直条纹，接下来我们来实现斜向条纹。&lt;/p&gt;
&lt;p&gt;回忆一下之前的效果&lt;/p&gt;
&lt;p&gt;水平条纹&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
      <category term="Css" scheme="https://www.zsfmyz.top/categories/Css/"/>
    
    
      <category term="Css" scheme="https://www.zsfmyz.top/tags/Css/"/>
    
  </entry>
  
  <entry>
    <title>CSS揭秘：4.边框内圆角</title>
    <link href="https://www.zsfmyz.top/Css/CSS%E6%8F%AD%E7%A7%98%EF%BC%9A6.%E5%A4%8D%E6%9D%82%E7%9A%84%E8%83%8C%E6%99%AF%E5%9B%BE%E6%A1%88%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://www.zsfmyz.top/Css/CSS揭秘：6.复杂的背景图案（上）/</id>
    <published>2020-09-23T03:14:27.000Z</published>
    <updated>2020-09-23T03:39:13.191Z</updated>
    
    <content type="html"><![CDATA[<p></p><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1""># 前言上一篇文章中我们学会了如何使用渐变实现条纹状的背景，但是实际上条纹背景并不是我们能实现的唯一的背景图案，利用渐变我们可以实现很多更为复杂的图案，本篇会介绍一些其他的简单而实用的背景图案。<font color="#999AAA"></font><hr style=" border:solid; width:100px; height:1px;" color="#000000" size="1""><h1 id="一、网格"><a href="#一、网格" class="headerlink" title="一、网格"></a>一、网格</h1><p><font color="#999AAA">网格的原理其实很简单，目前我们已经实现了条纹背景，那么如果我们将条纹背景组合呢？互相穿插组合，那么是不是很简单就实现了各种各样的网格背景。</font></p><h2 id="1-实色网格"><a href="#1-实色网格" class="headerlink" title="1. 实色网格"></a>1. 实色网格</h2><p><font color="#999AAA">代码如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: 200<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">height</span>: 200<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>:</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(<span class="selector-tag">rgba</span>(255,187,51, <span class="selector-class">.5</span>) 33%, <span class="selector-tag">rgba</span>(85,136,170, <span class="selector-class">.5</span>) 0, <span class="selector-tag">rgba</span>(85,136,170, <span class="selector-class">.5</span>) 66%, <span class="selector-tag">rgba</span>(173,255,47, <span class="selector-class">.5</span>) 0),</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>, <span class="selector-tag">rgba</span>(255,187,51,1) 33%, <span class="selector-tag">rgba</span>(85,136,170, 1) 0, <span class="selector-tag">rgba</span>(85,136,170, 1) 66%, <span class="selector-tag">rgba</span>(173,255,47, <span class="selector-class">.5</span>) 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 60<span class="selector-tag">px</span> 60<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></font></p><p><font color="#999AAA">实际效果。<br><img src="https://img-blog.csdnimg.cn/20200918100511610.png#pic_center" alt="在这里插入图片描述"></font></p><h2 id="2-边框网格"><a href="#2-边框网格" class="headerlink" title="2. 边框网格"></a>2. 边框网格</h2><p>实现类似边框网格的效果，我们只需要将实色的网格色块改变成一条边框就可以了。方法为在渐变中设置一条<strong>1px</strong>长度的颜色，然后剩下的颜色为<strong>透明色</strong>（或者其他底色）。</p><p><font color="#999AAA">代码如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: 201<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">height</span>: 201<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>:</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(<span class="selector-tag">rgba</span>(255,187,51, <span class="selector-class">.5</span>) 1<span class="selector-tag">px</span>, <span class="selector-tag">transparent</span> 0),</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>,<span class="selector-tag">rgba</span>(255,187,51, <span class="selector-class">.5</span>) 1<span class="selector-tag">px</span>, <span class="selector-tag">transparent</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 20<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></font></p><p><font color="#999AAA">实际效果。<br><img src="https://img-blog.csdnimg.cn/20200918102106767.png#pic_center" alt="在这里插入图片描述"><br>我们可以通过调整<strong>background-size</strong>来调整<strong>网格</strong>的大小。</font></p><p><strong>注意</strong>：整个图片的大小为<strong>201x201</strong>，由于我们设置的其实是<strong>左边和上边</strong>，所以同一个单位背景内只有上边和左边，没有下边和右边。所以如果设置总长为200px时，右边和下边会看不到边框。所以我们<strong>长宽各 + 1</strong>，以下一个背景的左上作为我们的右下边框。</p><h2 id="3-波点"><a href="#3-波点" class="headerlink" title="3. 波点"></a>3. 波点</h2><p>除了实现类似格子一样的背景，我们还可以实现波点背景样式，这时我们就需要用到另外一个渐变：<strong>径向渐变（radial-gradient）</strong>，和线性渐变类似，效果是从背景中心点出发，向外渐变。</p><p><font color="#999AAA">代码如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">radial-gradient</span>(<span class="selector-tag">green</span> 3<span class="selector-tag">px</span>, <span class="selector-tag">yellowgreen</span> 0, <span class="selector-tag">yellowgreen</span> 6<span class="selector-tag">px</span>, <span class="selector-tag">transparent</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 20<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></font></p><p><font color="#999AAA">实际效果。<br><img src="https://img-blog.csdnimg.cn/20200921085836761.png#pic_center" alt="在这里插入图片描述"></font></p><p>我们可以通过调整<strong>background-size</strong>来调整<strong>波点密度</strong>。</p><p><strong>注意</strong>：使用background-size调整波点背景的单个背景大小，调整的视觉效果是波点的密度大小，有时候会呈现出不一样效果和图案，比如当我们的波点连接起来的时候，我们的图案就变成了一个个菱形。</p><p><font color="#999AAA">实际效果。<br><img src="https://img-blog.csdnimg.cn/20200921090246511.png#pic_center" alt="在这里插入图片描述"></font></p><p><font color="#999AAA">以上效果只需要将background-size调整为12px，即背景尺寸 = 波点直径。</font></p><p>&lt;hr style=” border:solid; width:100px; height:1px;” color=#000000 size=1”&gt;</p><h2 id="4-棋盘"><a href="#4-棋盘" class="headerlink" title="4. 棋盘"></a>4. 棋盘</h2><p><img src="https://img-blog.csdnimg.cn/2020092109251135.png#pic_center" alt="在这里插入图片描述"></p><p>棋牌有点类似于我们在第一步做到的实色网格，不同的是棋盘是由一个实色和一个透明所组成的图案。所以，看似和实色网格类似，但是实现起来无法使用跟实色网格相同的实现方法（不信邪的话可以使尝试一下），那么我们如何实现棋牌类型的图案呢？也不难，我们使用直角三角形进行拼接。还得我们在实现斜向条纹时做的尝试吗？<a href="https://blog.csdn.net/lunhui1994_/article/details/106933714" target="_blank" rel="noopener">CSS揭秘：5.条纹背景（上）</a></p><p><font color="#999AAA">代码如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#eee</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#bbb</span> 50%, <span class="selector-tag">transparent</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 30<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></font></p><p><font color="#999AAA">实际效果。<br><img src="https://img-blog.csdnimg.cn/20200921092328712.png#pic_center" alt="在这里插入图片描述"></font></p><ol><li>从刚开始的展示图案可以看出来，我们的正方形色块只是对角线的一半，那么我们的一个三角形就是1/4了，所以我们改造一下</li></ol><p><font color="#999AAA">代码如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#eee</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#bbb</span> 25%, <span class="selector-tag">transparent</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 40<span class="selector-tag">px</span> 40<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></font></p><p><font color="#999AAA">实际效果。<br><img src="https://img-blog.csdnimg.cn/20200921092909744.png#pic_center" alt="在这里插入图片描述"></font></p><ol start="2"><li>现在我们得到一半的三角形，那么拼一个正方形还需要一个相反方向的三角形，我们再来一个背景<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: </span><br><span class="line"><span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#bbb</span> 25%, <span class="selector-tag">transparent</span> 0),</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-tag">transparent</span> 75%, <span class="selector-id">#bbb</span> 0);</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://img-blog.csdnimg.cn/20200921092709910.png#pic_center" alt="在这里插入图片描述"></p><ol start="3"><li>到此我们得到了两个直角三角形，那么如何拼接成一个正方形呢？使用<strong>background-position</strong>调整直角三角形的位置即可。把右上角显示三角形的背景 向下 向左移动就阔以了<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#eee</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>: </span><br><span class="line"><span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#bbb</span> 25%, <span class="selector-tag">transparent</span> 0),</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-tag">transparent</span> 75%, <span class="selector-id">#bbb</span> 0);</span><br><span class="line"><span class="selector-tag">background-position</span>: 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span>, <span class="selector-tag">-20px</span> 20<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background-size</span>: 40<span class="selector-tag">px</span> 40<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></li></ol><p><font color="#999AAA">实际效果。<br><img src="https://img-blog.csdnimg.cn/20200921094902113.png#pic_center" alt="在这里插入图片描述"><br>那么搞定了一个再搞定另外一个就很简单了。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#eee</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#eee</span>;<span class="selector-tag">background-image</span>:    </span><br><span class="line"><span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#bbb</span> 25%, <span class="selector-tag">transparent</span> 0),    </span><br><span class="line"><span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-tag">transparent</span> 75%, <span class="selector-id">#bbb</span> 0),    </span><br><span class="line"><span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-id">#bbb</span> 25%, <span class="selector-tag">transparent</span> 0),    </span><br><span class="line"><span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-tag">transparent</span> 75%, <span class="selector-id">#bbb</span> 0);</span><br><span class="line"><span class="selector-tag">background-position</span>: 0 0, <span class="selector-tag">-20px</span> 20<span class="selector-tag">px</span>,                     </span><br><span class="line">20<span class="selector-tag">px</span> <span class="selector-tag">-20px</span>, 0 0;</span><br><span class="line"><span class="selector-tag">background-size</span>: 40<span class="selector-tag">px</span> 40<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></font></p><p><font color="#999AAA">实际效果。<br><img src="https://img-blog.csdnimg.cn/20200921095309238.png#pic_center" alt="在这里插入图片描述"></font></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本篇主要对一些更为复杂的背景图案做出了一些介绍，分别有<strong>实色网格图案，边框网格图案，波点图案，棋盘图案</strong>，其中：</p><ol><li>实色网格用到了透明叠加的方法，实现了苏格兰裙一样的背景图案。</li><li>边框网格实际上是利用1px的渐变边框，实现其实类似纯div的左上border的方法。</li><li>波点使用到了<strong>radial-gradient</strong>径向渐变，使用方法和线性渐变相似。</li><li>棋盘图案则借助了background-position对直角三角形进行定位，以组合出正方形图案。</li></ol><h1 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h1><ul><li><a href="https://blog.csdn.net/lunhui1994_/article/details/106653195" target="_blank" rel="noopener">CSS揭秘：1.半透明边框</a></li><li><a href="https://blog.csdn.net/lunhui1994_/article/details/106677231" target="_blank" rel="noopener">CSS揭秘：2.多重边框</a></li><li><a href="https://blog.csdn.net/lunhui1994_/article/details/106699349" target="_blank" rel="noopener">CSS揭秘：3.灵活的背景定位</a></li><li><a href="https://blog.csdn.net/lunhui1994_/article/details/106845534" target="_blank" rel="noopener">CSS揭秘：4.边框内圆角</a></li><li><a href="https://blog.csdn.net/lunhui1994_/article/details/106933714" target="_blank" rel="noopener">CSS揭秘：5.条纹背景（上）</a></li><li><a href="https://blog.csdn.net/lunhui1994_/article/details/107192736" target="_blank" rel="noopener">CSS揭秘：5.条纹背景（下）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;
&lt;hr style=&quot; border:solid; width:100px; height:1px;&quot; color=&quot;#000000&quot; size=&quot;1&quot;&quot;&gt;

# 前言
上一篇文章中我们学会了如何使用渐变实现条纹状的背景，但是实际上条纹背景并不是我们能实现的唯一的
      
    
    </summary>
    
      <category term="Css" scheme="https://www.zsfmyz.top/categories/Css/"/>
    
    
      <category term="Css" scheme="https://www.zsfmyz.top/tags/Css/"/>
    
  </entry>
  
  <entry>
    <title>CSS揭秘：4.边框内圆角</title>
    <link href="https://www.zsfmyz.top/Css/CSS%E6%8F%AD%E7%A7%98%EF%BC%9A4.%E8%BE%B9%E6%A1%86%E5%86%85%E5%9C%86%E8%A7%92/"/>
    <id>https://www.zsfmyz.top/Css/CSS揭秘：4.边框内圆角/</id>
    <published>2020-06-22T10:14:27.000Z</published>
    <updated>2020-06-28T03:38:03.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="边框内圆角"><a href="#边框内圆角" class="headerlink" title="边框内圆角"></a>边框内圆角</h1><blockquote><p>背景知识：box-shadow，outline，“多重边框”</p></blockquote><h2 id="一、两个div嵌套"><a href="#一、两个div嵌套" class="headerlink" title="一、两个div嵌套"></a>一、两个div嵌套</h2><p>两个div实现内圆角很容易，只需要内圆角外直角即可。</p><h3 id="div-First-Try"><a href="#div-First-Try" class="headerlink" title="div First Try"></a>div First Try</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#655</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">       <span class="attribute">background-color</span>: tan;</span><br><span class="line">       <span class="attribute">border-radius</span>: .<span class="number">8em</span>;</span><br><span class="line">       <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020061823401650.png" alt="在这里插入图片描述"><br>这种方案更加灵活，我们可以在box上设置更多的样式，但是需要两个元素才能实现。</p><h2 id="二、box-shadow-outline-方案"><a href="#二、box-shadow-outline-方案" class="headerlink" title="二、box-shadow + outline 方案"></a>二、box-shadow + outline 方案</h2><p>还记得上篇中，outline和box-shadow对于圆角的区别显示吗？box-shadow会贴合border的圆角，outline不会。当我们仅需要实现一个实色的边框加内圆角，使用这个方案可以达到相同的效果。</p><h3 id="box-shadow-outline-First-Try"><a href="#box-shadow-outline-First-Try" class="headerlink" title="box-shadow + outline First Try"></a>box-shadow + outline First Try</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: 160<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">tan</span>;</span><br><span class="line"><span class="selector-tag">border-radius</span>: <span class="selector-class">.8em</span>;</span><br><span class="line"><span class="selector-tag">padding</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">margin</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">box-shadow</span>: 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> <span class="selector-class">.4em</span> <span class="selector-id">#655</span>;</span><br><span class="line"><span class="selector-tag">outline</span>: 20<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#655</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020061823401650.png" alt="在这里插入图片描述"><br>这种方案中，<code>box-shadow</code>是用来填补<code>outline</code>和<code>border</code>之间的间隙的，如果不加<code>box-shadow</code>效果会是这样的。<br><img src="https://img-blog.csdnimg.cn/20200618235718311.png" alt="在这里插入图片描述"></p><ol><li>所以我们需要设置<code>box-shadow</code>的扩散半径来弥补四个类似三角形的空隙。</li><li>至于扩散半径的大小，我们可以用勾股定理设置。</li><li>也就是<code>border-radius</code>的圆角<strong>圆心到角的距离 - 半径</strong>。</li><li><p><code>(√2 - 1)r</code>； <code>√2 ≈ 1.4</code>那么<code>(√2 - 1)</code> 也就是在<code>0.4 - 0.5</code>之间,我们可以按0.5计算即可。也就是0.5r。</p></li><li><p>最后再回顾一下<code>box-shadow</code>的用法，<code>outline</code>和<code>border</code>用法一样，同时可以使用<code>outline-offset: -30px;</code>调整位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/* x偏移量 | y偏移量 | 阴影模糊半径 | 阴影扩散半径 | 阴影颜色 */</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: 2<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> <span class="selector-class">.4em</span> <span class="selector-id">#655</span>;</span><br></pre></td></tr></table></figure><p>说起这个有人会说，为什么不用<code>outline-offset:-10px;</code>这样来顶替<code>box-shadow</code>呢？试一下就知道了。<code>outline</code>的显示层级较<code>border</code>更高，所以border的圆角会被覆盖掉。<br><img src="https://img-blog.csdnimg.cn/20200618235913302.png" alt="在这里插入图片描述"></p><h2 id="最终案例代码"><a href="#最终案例代码" class="headerlink" title="最终案例代码"></a>最终案例代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            padding: 20px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#655</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content</span>&#123;</span></span><br><span class="line">            background-color: tan;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-radius</span>: <span class="selector-class">.8em</span>;</span></span><br><span class="line">            padding: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">            width: 160px;</span><br><span class="line">            background: tan;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-radius</span>: <span class="selector-class">.8em</span>;</span></span><br><span class="line">            padding: 20px;</span><br><span class="line">            margin: 20px;</span><br><span class="line"><span class="css">            <span class="selector-tag">box-shadow</span>: 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> <span class="selector-class">.4em</span> <span class="selector-id">#655</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">outline</span>: 20<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#655</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">            对酒当歌，人生几何。</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span></span><br><span class="line">        对酒当歌，人生几何。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;边框内圆角&quot;&gt;&lt;a href=&quot;#边框内圆角&quot; class=&quot;headerlink&quot; title=&quot;边框内圆角&quot;&gt;&lt;/a&gt;边框内圆角&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;背景知识：box-shadow，outline，“多重边框”&lt;/p&gt;
&lt;/blockquo
      
    
    </summary>
    
      <category term="Css" scheme="https://www.zsfmyz.top/categories/Css/"/>
    
    
      <category term="Css" scheme="https://www.zsfmyz.top/tags/Css/"/>
    
  </entry>
  
  <entry>
    <title>CSS揭秘：3.灵活的背景定位</title>
    <link href="https://www.zsfmyz.top/Css/CSS%E6%8F%AD%E7%A7%98%EF%BC%9A3.%E7%81%B5%E6%B4%BB%E7%9A%84%E8%83%8C%E6%99%AF%E5%AE%9A%E4%BD%8D/"/>
    <id>https://www.zsfmyz.top/Css/CSS揭秘：3.灵活的背景定位/</id>
    <published>2020-06-13T10:14:27.000Z</published>
    <updated>2020-06-28T03:37:18.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="灵活的背景定位"><a href="#灵活的背景定位" class="headerlink" title="灵活的背景定位"></a>灵活的背景定位</h1><blockquote><p>背景知识：<code>background-position</code>的扩展语法，<code>background-origin，calc()</code></p></blockquote><h2 id="background-position扩展语法"><a href="#background-position扩展语法" class="headerlink" title="background-position扩展语法"></a>background-position扩展语法</h2><ol><li><strong>background-position扩展语法：</strong> css3 中background-position 语法可以通过在偏移量前指定关键字，来设置四条边的偏移量。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-positon</span>: <span class="selector-tag">right</span> 20<span class="selector-tag">px</span> <span class="selector-tag">bottom</span> 10<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="background-origin"><a href="#background-origin" class="headerlink" title="background-origin"></a>background-origin</h2><ol start="2"><li><strong>background-origin：</strong> css3 中 background-origin 可以指定背景图片的显示范围，默认以padding-box为准，即padding的外边沿。此时背景图片的位置将和padding一致。通常此方案更适合开发需求。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">padding</span><span class="selector-pseudo">:20px</span>;</span><br><span class="line"><span class="selector-tag">background-origin</span>: <span class="selector-tag">content-box</span>;</span><br><span class="line"><span class="selector-tag">background-position</span>: 100% 100%;</span><br></pre></td></tr></table></figure></li></ol><h2 id="calc"><a href="#calc" class="headerlink" title="calc()"></a>calc()</h2><ol start="3"><li><strong>calc()：</strong> 允许填入 任意 <code>+ - * /</code> 四则运算组合的表达式。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">calc</span>(100% <span class="selector-tag">-</span> 20<span class="selector-tag">px</span>) <span class="selector-tag">calc</span>(100% <span class="selector-tag">-</span> 10<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>扩展：<code>border-box</code> <code>边框</code>的外边沿；<code>padding-box</code> <code>内边距</code>的外边沿； <code>content-box</code> <code>内容</code>的外边沿。</p></blockquote><h3 id="原效果"><a href="#原效果" class="headerlink" title="原效果"></a>原效果</h3><p><img src="https://img-blog.csdnimg.cn/2020061200291226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p><img src="https://img-blog.csdnimg.cn/20200612002948787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;灵活的背景定位&quot;&gt;&lt;a href=&quot;#灵活的背景定位&quot; class=&quot;headerlink&quot; title=&quot;灵活的背景定位&quot;&gt;&lt;/a&gt;灵活的背景定位&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;背景知识：&lt;code&gt;background-position&lt;/code&gt;
      
    
    </summary>
    
      <category term="Css" scheme="https://www.zsfmyz.top/categories/Css/"/>
    
    
      <category term="Css" scheme="https://www.zsfmyz.top/tags/Css/"/>
    
  </entry>
  
  <entry>
    <title>CSS揭秘：2.多重边框</title>
    <link href="https://www.zsfmyz.top/Css/CSS%E6%8F%AD%E7%A7%98%EF%BC%9A2.%E5%A4%9A%E9%87%8D%E8%BE%B9%E6%A1%86/"/>
    <id>https://www.zsfmyz.top/Css/CSS揭秘：2.多重边框/</id>
    <published>2020-06-12T10:14:27.000Z</published>
    <updated>2020-06-28T03:37:25.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多重边框"><a href="#多重边框" class="headerlink" title="多重边框"></a>多重边框</h1><blockquote><p>背景知识：box-shadow的基本用法，outline基本用法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/* x偏移量 | y偏移量 | 阴影模糊半径 | 阴影扩散半径 | 阴影颜色 */</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: 2<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.2</span>);</span><br></pre></td></tr></table></figure><p>以上是box-shadow的基本参数。box-shadow是为元素添加阴影效果的样式。但是我们可以通过对其属性的设置，呈现边框效果。<br><a id="more"></a></p><h2 id="box-shadow-方案"><a href="#box-shadow-方案" class="headerlink" title="box-shadow 方案"></a>box-shadow 方案</h2><h3 id="box-shadow-First-Try"><a href="#box-shadow-First-Try" class="headerlink" title="box-shadow First Try"></a>box-shadow First Try</h3><ol><li>将x偏移量 ，y偏移量设置为0px，此时阴影会在元素下面不会超出元素本身。</li><li>模糊度设为0px，使阴影呈现实体效果。</li><li>增大扩散半径，可以理解为阴影向外扩展半径。</li><li>此时阴影就像一条宽度为扩散半径的实线边框<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.6</span>);</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://img-blog.csdnimg.cn/20200610231531723.png" alt="在这里插入图片描述"></p><h3 id="box-shadow-Second-Try"><a href="#box-shadow-Second-Try" class="headerlink" title="box-shadow Second Try"></a>box-shadow Second Try</h3><p>box-shadow属性可以通过逗号分割添加多条阴影。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.6</span>),</span><br><span class="line">            0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 40<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(120, 120, 120, 0<span class="selector-class">.6</span>);</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200610231807105.png" alt="!\[在这里插入图片描述\](https://img-blog.csdnimg.cn/20200610231706575.pn"><br>要注意的是，阴影是<code>层层叠加</code>的，第一条阴影在最上层，以此类推，且阴影的半径都是以元素<code>border</code>的<code>外边沿为起点</code>。所以如果你想要两条宽<code>20px</code>的阴影，那么两条阴影的<code>扩散半径</code>需要分别设置<code>20px</code>，<code>40px</code></p><hr><p>我们需要注意的是，阴影不会影响元素的布局，我们可以从它的字面意思，阴影来理解，它不占用任何空间。并且元素上的绑定事件，并不会在阴影上触发。效果如图<br><img src="https://img-blog.csdnimg.cn/20200610232610906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="box-shadow-Third-Try"><a href="#box-shadow-Third-Try" class="headerlink" title="box-shadow Third Try"></a>box-shadow Third Try</h3><p>那么如果我们需要阴影像我们预期的一样，跟border有相同的表现，我们可以增加同样的外边框margin来模拟出阴影占据的空间。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin</span>: 40<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">box-shadow</span>: 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.6</span>),</span><br><span class="line">            0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 40<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(120, 120, 120, 0<span class="selector-class">.6</span>);</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/2020061023293232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="box-shadow-Fourth-Try"><a href="#box-shadow-Fourth-Try" class="headerlink" title="box-shadow Fourth Try"></a>box-shadow Fourth Try</h3><p>目前来讲，阴影的扩展方向都是从<code>border外边沿向外扩。</code>它虽然模拟出了空间，但是仍旧不会触发元素上的事件，如果你想在<code>事件</code>上也同<code>border</code>的表现一样，那么可以设置<code>inset</code>属性，使其向内扩散，并通过内边距<code>padding</code>来模拟空间。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin</span>: 40<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background-clip</span>: <span class="selector-tag">content-box</span>;</span><br><span class="line"><span class="selector-tag">box-shadow</span>: 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.6</span>),</span><br><span class="line">            0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 40<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(120, 120, 120, 0<span class="selector-class">.6</span>);</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200610233456274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>需要注意的是，边框的顺序发生了反转。如果阴影边框设置了透明度，因为涉及到透明度颜色叠加，需要自己取色。同样的透明度也会被背景色穿透，如果不想被背景色影响，可设置<code>background-clip: content-box;</code></p><h2 id="outline-方案"><a href="#outline-方案" class="headerlink" title="outline 方案"></a>outline 方案</h2><p>outline可以实现两条边框的方案，同时更加灵活可以实现虚线边框。<br><strong>border 和 outline 很类似，但有如下区别：</strong></p><ol><li>轮廓不占据空间（同阴影），绘制于元素内容周围。</li><li>outline不一定贴合圆角。</li><li>我们可以通过outline-offset设置负值，来使轮廓显示在元素内部。<h3 id="outline-First-Try"><a href="#outline-First-Try" class="headerlink" title="outline  First Try"></a>outline  First Try</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">blue</span>;</span><br><span class="line"><span class="selector-tag">outline</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">skyblue</span>;</span><br></pre></td></tr></table></figure></li></ol><p>不占据空间<br><img src="https://img-blog.csdnimg.cn/2020061023585033.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="outline-Second-Try"><a href="#outline-Second-Try" class="headerlink" title="outline Second Try"></a>outline Second Try</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">blue</span>;</span><br><span class="line"><span class="selector-tag">outline</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">skyblue</span>;</span><br><span class="line"><span class="selector-tag">border-radius</span>: 20<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p>不贴合圆角<br><img src="https://img-blog.csdnimg.cn/20200611000119188.png" alt="在这里插入图片描述"></p><h3 id="outline-Third-Try"><a href="#outline-Third-Try" class="headerlink" title="outline Third Try"></a>outline Third Try</h3><p><code>outline-offset</code> 属性实现的缝边效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-id">#333</span>;</span><br><span class="line"><span class="selector-tag">outline</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">dashed</span> <span class="selector-tag">white</span>;</span><br><span class="line"><span class="selector-tag">border-radius</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">outline-offset</span>: <span class="selector-tag">-30px</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200611000409118.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;多重边框&quot;&gt;&lt;a href=&quot;#多重边框&quot; class=&quot;headerlink&quot; title=&quot;多重边框&quot;&gt;&lt;/a&gt;多重边框&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;背景知识：box-shadow的基本用法，outline基本用法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/* x偏移量 | y偏移量 | 阴影模糊半径 | 阴影扩散半径 | 阴影颜色 */&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;box-shadow&lt;/span&gt;: 2&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; 2&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; 2&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; 1&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;rgba&lt;/span&gt;(0, 0, 0, 0&lt;span class=&quot;selector-class&quot;&gt;.2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上是box-shadow的基本参数。box-shadow是为元素添加阴影效果的样式。但是我们可以通过对其属性的设置，呈现边框效果。&lt;br&gt;
    
    </summary>
    
      <category term="Css" scheme="https://www.zsfmyz.top/categories/Css/"/>
    
    
      <category term="Css" scheme="https://www.zsfmyz.top/tags/Css/"/>
    
  </entry>
  
  <entry>
    <title>CSS揭秘：1.半透明边框</title>
    <link href="https://www.zsfmyz.top/Css/CSS%E6%8F%AD%E7%A7%98%EF%BC%9A1.%E5%8D%8A%E9%80%8F%E6%98%8E%E8%BE%B9%E6%A1%86/"/>
    <id>https://www.zsfmyz.top/Css/CSS揭秘：1.半透明边框/</id>
    <published>2020-06-07T10:14:27.000Z</published>
    <updated>2020-06-28T03:36:01.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="半透明边框"><a href="#半透明边框" class="headerlink" title="半透明边框"></a>半透明边框</h1><blockquote><p>背景知识：<code>RGBA/HSLA</code> 半透明颜色， 它们同样是一种颜色，并非只适用于背景。<br><code>background-clip</code> 背景裁切属性，定义了背景的延伸范围，是否延伸到<code>边框、内边距盒子、内容盒子，内容文字</code>下面。分别对应<code>border-box、padding-box、content-box、text</code>四个属性值<br><a id="more"></a></p></blockquote><h2 id="First-Try"><a href="#First-Try" class="headerlink" title="First Try"></a>First Try</h2><p>首先我们来尝试一下，假如我们想要实现一个半透明的边框，该如何写样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">hsla</span>(0, 0%, 0%, 0<span class="selector-class">.5</span>);</span><br><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">white</span></span><br></pre></td></tr></table></figure><p>这段css样式，我们期待的效果是有一个<strong>半透明的边框</strong>。而实际效果是怎么样的呢？<br><img src="https://img-blog.csdnimg.cn/20200609231145786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  <strong>！！！？border 不见了</strong></p><h2 id="Second-Try"><a href="#Second-Try" class="headerlink" title="Second Try"></a>Second Try</h2><p>没错，边框不见了。这跟我们所期待的效果并不符合。原因在于，默认情况下，<strong>背景颜色会延伸到边框上</strong>，这点我们可以通过虚线边框来发现实际发生了什么。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 30<span class="selector-tag">px</span> <span class="selector-tag">dashed</span> <span class="selector-tag">orange</span>;           </span><br><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">skyblue</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200609231721914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以，实际上我们的透明边框其实是存在的，只不过由于<strong>背景颜色透过边框</strong>，导致最终呈现出如同一个跟背景颜色一致的边框的效果。</p><h2 id="Third-Try"><a href="#Third-Try" class="headerlink" title="Third Try"></a>Third Try</h2><p>好在目前我们可以通过<code>background-clip</code>来处理背景色的延伸范围。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 30<span class="selector-tag">px</span> <span class="selector-tag">dashed</span> <span class="selector-tag">orange</span>;           </span><br><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">skyblue</span>;</span><br><span class="line"><span class="selector-tag">background-clip</span>: <span class="selector-tag">padding-box</span>;</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20200609232056471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Finally-Finashed"><a href="#Finally-Finashed" class="headerlink" title="Finally Finashed"></a>Finally Finashed</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 30<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">hsla</span>(0, 0%, 100%, 0<span class="selector-class">.3</span>); </span><br><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">white</span>;</span><br><span class="line"><span class="selector-tag">background-clip</span>: <span class="selector-tag">padding-box</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200609232537463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1bmh1aTE5OTRf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>我们为了实现最终的效果，使用到了<code>background-color</code>， <code>border</code>，<code>background-clip</code> 和 <code>hsla/rgba</code>半透明颜色。</li><li><code>background-clip</code> 定义了背景的延伸范围，默认<code>border-box（从border的外边沿裁切背景）</code>，通过将其值设置为<code>padding-box（从padding外边沿开始裁切背景）</code>避免背景色延伸到边框下。</li><li><code>hsla/rgba</code> 实现了边框的半透明颜色</li></ol><h2 id="最终案例代码"><a href="#最终案例代码" class="headerlink" title="最终案例代码"></a>最终案例代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background: #ccc url("http://img.mp.itc.cn/upload/20170621/79ecb57d6e234e7891b6c9da3dfc12f9_th.jpg") no-repeat center;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 150px;</span><br><span class="line">            padding: 20px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 30<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">hsla</span>(0, 0%, 100%, 0<span class="selector-class">.3</span>);</span></span><br><span class="line"><span class="css">            <span class="comment">/* border: 30px solid rgba(120, 120, 120, 0.5); */</span></span></span><br><span class="line">            background-color: white;</span><br><span class="line">            background-clip: padding-box;</span><br><span class="line">        &#125;</span><br><span class="line">        p&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>半透明边框效果展示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;半透明边框&quot;&gt;&lt;a href=&quot;#半透明边框&quot; class=&quot;headerlink&quot; title=&quot;半透明边框&quot;&gt;&lt;/a&gt;半透明边框&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;背景知识：&lt;code&gt;RGBA/HSLA&lt;/code&gt; 半透明颜色， 它们同样是一种颜色，并非只适用于背景。&lt;br&gt;&lt;code&gt;background-clip&lt;/code&gt; 背景裁切属性，定义了背景的延伸范围，是否延伸到&lt;code&gt;边框、内边距盒子、内容盒子，内容文字&lt;/code&gt;下面。分别对应&lt;code&gt;border-box、padding-box、content-box、text&lt;/code&gt;四个属性值&lt;br&gt;
    
    </summary>
    
      <category term="Css" scheme="https://www.zsfmyz.top/categories/Css/"/>
    
    
      <category term="Css" scheme="https://www.zsfmyz.top/tags/Css/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：leetcode_974. 和可被 K 整除的子数组（前序和 + 同余定理）</title>
    <link href="https://www.zsfmyz.top/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_974.%20%E5%92%8C%E5%8F%AF%E8%A2%AB%20K%20%E6%95%B4%E9%99%A4%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%EF%BC%88%E5%89%8D%E5%BA%8F%E5%92%8C%20+%20%E5%90%8C%E4%BD%99%E5%AE%9A%E7%90%86%EF%BC%89/"/>
    <id>https://www.zsfmyz.top/Algorithm/每日一题/JavaScript：leetcode_974. 和可被 K 整除的子数组（前序和 + 同余定理）/</id>
    <published>2020-05-27T14:59:13.000Z</published>
    <updated>2020-05-28T01:58:49.148Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">给定一个整数数组 A，返回其中元素之和可被 K 整除的（连续、非空）子数组的数目。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"></span><br><span class="line">输入：A = [4,5,0,-2,-3,1], K = 5</span><br><span class="line">输出：7</span><br><span class="line">解释：</span><br><span class="line">有 7 个子数组满足其元素之和可被 K = 5 整除：</span><br><span class="line">[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">1 &lt;= A.length &lt;= 30000</span><br><span class="line">-10000 &lt;= A[i] &lt;= 10000</span><br><span class="line">2 &lt;= K &lt;= 10000</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一-暴力枚举，O（n-3）"><a href="#解题思路一-暴力枚举，O（n-3）" class="headerlink" title="解题思路一(暴力枚举，O（n^3）)"></a>解题思路一(暴力枚举，O（n^3）)</h3><ol><li>暴力枚举所有的前序和，判断<code>对K取模</code>是否为<code>0</code>，为<code>0</code>则结果<code>+1</code><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">A</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">K</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> subarraysDivByK = <span class="function"><span class="keyword">function</span>(<span class="params">A, K</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> prev = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            prev += A[j];</span><br><span class="line">            <span class="keyword">if</span> (prev % K === <span class="number">0</span>) &#123;</span><br><span class="line">                res++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="解题思路二-暴力枚举优化-O（n-2）"><a href="#解题思路二-暴力枚举优化-O（n-2）" class="headerlink" title="解题思路二(暴力枚举优化,O（n^2）)"></a>解题思路二(暴力枚举优化,O（n^2）)</h3><ol><li>将两层for循环中的求前序和操作，提前求。</li><li>那么我们求i之前的所有前序和就变成了，求<code>p[i] - p[j]</code> (j的范围是 <code>0 ~ i-1)</code></li><li>判断<code>p[i] - p[j]</code>对K去模是否为0，为0则结果+1<h3 id="代码实现二"><a href="#代码实现二" class="headerlink" title="代码实现二"></a>代码实现二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">A</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">K</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> subarraysDivByK = <span class="function"><span class="keyword">function</span>(<span class="params">A, K</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Array</span>(A.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">        p[i] = A.slice(<span class="number">0</span>, i+<span class="number">1</span>).reduce(<span class="function">(<span class="params">sum, item, key, arr</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> sum += item;</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span>((p[i] - p[j]) % K === <span class="number">0</span>) &#123;</span><br><span class="line">                res++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p[i] % K === <span class="number">0</span>) &#123;</span><br><span class="line">            res++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="解题思路三-同余定理，O（n）"><a href="#解题思路三-同余定理，O（n）" class="headerlink" title="解题思路三(同余定理，O（n）)"></a>解题思路三(同余定理，O（n）)</h3><blockquote><p>先理解一个数学问题，  假设<code>a = 8，b = 13</code>, 同时mod <code>5</code>，那么 <code>a % 5 == 3，b % 5 == 3，即a % 5 ==  b % 5</code>则<code>(b - a) % 5 == 0</code>，<code>即对同一数取模相同的两个值，其差值可整除该数。</code></p><ol><li>将两层for循环中的求前序和操作，提前求前序和序列p。</li><li>得到所有的前序和p之后，理解说明若 <code>p[i] % K  ===  p[j] % K</code> 则<code>p[i] - p[j] % 5 === 0</code>那么<code>j</code>到<code>i</code>就是我们求的一个目标子序列。</li><li>所以我们建立一个<code>hash</code>，用来存储p序列<code>取模之后</code>的值。 <code>hash</code>的键值范围是<code>（0 ~ K -1）</code>因为是对K取余，所以值只可能出现在该范围中。</li><li>由于该hash的标记跟数组下标正好对应，所以hash就声明为一个数组。</li><li>以示例为例<pre><code>1. 输入：`A = [4,5,0,-2,-3,1], K = 5`2. p序列为  `[4, 9, 9, 7, 4, 5]` 取模之后的序列为`[4, 4, 4, 2, 4, 0]` 记录到hash中3. hash = `[1, 0, 1, 0, 4]` 4. 接下来就是排列组合的问题了，将hash列表中 `&gt; 1` 的值进行计算 `n * ( n - 1 ) / 2` 取和5. 最后再加上`hash[0]`的个数，因为`hash[0]`标记的是取模之后为`0`的值的个数，本身就属于目标子序列。</code></pre></li><li>第五步我们是先求出hash表才计算个数，我们也可以在完善hash的同时计算。<ol><li>比如p序列为  <code>[4, 9, 9, 7, 4, 5]</code> 去模的过程中统计。</li><li>计算第<code>1</code>个取模，模值为4，<code>res += hash[4],</code> <code>hash[4]++,</code>由于<code>4</code>是第<code>1</code>次出现所以目前<code>res+=0</code></li><li>计算第<code>2</code>个取模，模值为4，<code>res += hash[4],</code> <code>hash[4]++,</code>由于<code>4</code>是第<code>2</code>次出现所以目前<code>res+=1</code>，子序列下标范围是<code>[0,1]</code></li><li>计算第3个取模，模值为4，<code>res += hash[4],</code> <code>hash[4]++,</code>由于<code>4</code>是第<code>3</code>次出现所以目前<code>res+=2</code>，子序列下标范围是<code>[0,1,2]，[1,2]</code>因为4出现3次，所以第3个4可以和前两个组合。</li><li>依次类推。</li></ol></li></ol></blockquote><h3 id="代码实现三"><a href="#代码实现三" class="headerlink" title="代码实现三"></a>代码实现三</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">A</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">K</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> subarraysDivByK = <span class="function"><span class="keyword">function</span>(<span class="params">A, K</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hash = <span class="keyword">new</span> <span class="built_in">Array</span>(K).fill(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">        sum += A[i];</span><br><span class="line">        <span class="keyword">let</span> key = sum % K;</span><br><span class="line">        key = key &lt; <span class="number">0</span> ? (key + K) : key; <span class="comment">//处理负数的情况, (3 - (-2)) % 5 === 0</span></span><br><span class="line">        res += hash[key];</span><br><span class="line">        hash[key]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res + hash [<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目说明&quot;&gt;&lt;a href=&quot;#题目说明&quot; class=&quot;headerlink&quot; title=&quot;题目说明&quot;&gt;&lt;/a&gt;题目说明&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给定一个整数数组 A，返回其中元素之和可被 K 整除的（连续、非空）子数组的数目。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入：A = [4,5,0,-2,-3,1], K = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有 7 个子数组满足其元素之和可被 K = 5 整除：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;提示：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 &amp;lt;= A.length &amp;lt;= 30000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-10000 &amp;lt;= A[i] &amp;lt;= 10000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 &amp;lt;= K &amp;lt;= 10000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/categories/Algorithm/"/>
    
      <category term="每日一题" scheme="https://www.zsfmyz.top/categories/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：leetcode_146. LRU缓存机制（vue的keep-Live所使用的缓存机制）</title>
    <link href="https://www.zsfmyz.top/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_146.%20LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%EF%BC%88vue%E7%9A%84keep-live%E6%89%80%E4%BD%BF%E7%94%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%EF%BC%89/"/>
    <id>https://www.zsfmyz.top/Algorithm/每日一题/JavaScript：leetcode_146. LRU缓存机制（vue的keep-live所使用的缓存机制）/</id>
    <published>2020-05-26T09:59:13.000Z</published>
    <updated>2020-05-28T01:59:39.936Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。</span><br><span class="line"></span><br><span class="line">获取数据 get(key) - 如果关键字 (key) 存在于缓存中，则获取关键字的值（总是正数），否则返回 -1。</span><br><span class="line">写入数据 put(key, value) - 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字/值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">进阶:</span><br><span class="line"></span><br><span class="line">你是否可以在 O(1) 时间复杂度内完成这两种操作？</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li><a href="https://baike.baidu.com/item/LRU" target="_blank" rel="noopener">LRU缓存机制</a>，可以自行百度一下。<ol><li>特点1，hash表读取数据</li><li>特点2，存在一个<code>keys</code>序列，代表缓存的所有<code>key</code>，顺序按照最近的<code>活跃度</code>来排序，比如你<code>刚刚</code>用过<code>key为1</code> 的值，那么<code>1</code>就会排在<code>keys序列</code>的第<code>一</code>位。当缓存<code>超出</code>的时候，会优先<code>删除keys</code>的<code>末尾</code>。</li></ol></li><li>所以我们主要维护了一个hash，js中就是一个对象，用来存数据。一个序列也就是一个数组存keys。</li><li>get：如果将get的key，位置置换到首位。并返回数据。</li><li>put：将put设置的值的key，放在keys序列首位，判断是否超出，超出则删除最后一位。<h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">capacity</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> LRUCache = <span class="function"><span class="keyword">function</span>(<span class="params">capacity</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.objKeys = [];</span><br><span class="line">    <span class="keyword">this</span>.limit = capacity;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">key</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LRUCache.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.obj[key]) &#123;</span><br><span class="line">        <span class="keyword">this</span>.objKeys.splice(<span class="keyword">this</span>.objKeys.indexOf(key), <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">this</span>.objKeys.unshift(key);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.obj[key];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>key </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">value</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LRUCache.prototype.put = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.obj[key] &amp;&amp; <span class="keyword">this</span>.objKeys.splice(<span class="keyword">this</span>.objKeys.indexOf(key), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">this</span>.objKeys.unshift(key);</span><br><span class="line">    <span class="keyword">this</span>.obj[key] = value;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.objKeys.length &gt; <span class="keyword">this</span>.limit) &#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>.obj[<span class="keyword">this</span>.objKeys[<span class="keyword">this</span>.limit]];</span><br><span class="line">        <span class="keyword">this</span>.objKeys.length -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new LRUCache(capacity)</span></span><br><span class="line"><span class="comment"> * var param_1 = obj.get(key)</span></span><br><span class="line"><span class="comment"> * obj.put(key,value)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目说明&quot;&gt;&lt;a href=&quot;#题目说明&quot; class=&quot;headerlink&quot; title=&quot;题目说明&quot;&gt;&lt;/a&gt;题目说明&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;获取数据 get(key) - 如果关键字 (key) 存在于缓存中，则获取关键字的值（总是正数），否则返回 -1。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;写入数据 put(key, value) - 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字/值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;进阶:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你是否可以在 O(1) 时间复杂度内完成这两种操作？&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/categories/Algorithm/"/>
    
      <category term="每日一题" scheme="https://www.zsfmyz.top/categories/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：leetcode_287. 寻找重复数（二分法）</title>
    <link href="https://www.zsfmyz.top/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_287.%20%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0%EF%BC%88%E4%BA%8C%E5%88%86%E6%B3%95%EF%BC%89/"/>
    <id>https://www.zsfmyz.top/Algorithm/每日一题/JavaScript：leetcode_287. 寻找重复数（二分法）/</id>
    <published>2020-05-26T09:59:13.000Z</published>
    <updated>2020-05-28T01:59:10.200Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [1,3,4,2,2]</span><br><span class="line">输出: 2</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: [3,1,3,4,2]</span><br><span class="line">输出: 3</span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line">不能更改原数组（假设数组是只读的）。</span><br><span class="line">只能使用额外的 O(1) 的空间。</span><br><span class="line">时间复杂度小于 O(n2) 。</span><br><span class="line">数组中只有一个重复的数字，但它可能不止重复出现一次。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li>先放一种前端比较好理解的。</li><li>indexOf会返回数组中该元素出现的第一次的位置</li><li>我们利用这个特性，当indexOf的值跟目前的index不一致时，说明之前出现过一次。返回即可<h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    nums.map(<span class="function">(<span class="params">item, key, arr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.indexOf(item) !== key) &#123;</span><br><span class="line">            res = item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="解题思路二（二分法）"><a href="#解题思路二（二分法）" class="headerlink" title="解题思路二（二分法）"></a>解题思路二（二分法）</h3><ol><li>首先看题意：数字范围为<code>1 ~ n</code>，那其实就是在<code>1~n</code>的范围内找到哪个元素在<code>nums</code>中<code>重复存在</code>。</li><li>so，<code>1 ~ n</code>的序列。是<code>有序</code>的，可以用二分找了，以<code>1~n</code>为基础，以<code>nums</code>为条件判断的元素。</li><li>那怎么找呢。比如我们找到中间节点<code>mid</code>，判断<code>nums</code>数组中比<code>mid小</code>的有多少个<code>（prev）</code>，<ol><li>按正常来讲比如<code>mid为3</code>，那么从<code>1到n &lt;= 3</code>的数量应就是<code>[1,2,3]</code>,一共是<code>3</code>个啦。</li><li>所以如果重复的元素<code>比3小</code>的话，那么<code>3</code>的<code>prev</code>就变成<code>4以上</code>了，因为[1,2,3]就变成了<code>[1,1,2,3]</code>或者<code>[1,2,2,3]</code>,等等，</li><li>所以我们就可以通过<code>prev</code>的大小来锁定重复元素的范围是在<code>1 ~ mid</code>还是在<code>mid+1 ~ n</code>；</li></ol></li><li>接下来就很简单了。就是一个二分法了。<h3 id="代码实现一-1"><a href="#代码实现一-1" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">start, end, nums</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (end == start) &#123; <span class="comment">//找到最终目标了</span></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">void</span> ( res = end );</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> mid = start + ((end - start) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">let</span> prev = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= mid) &#123;</span><br><span class="line">                prev++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (prev &gt; mid) &#123;</span><br><span class="line">            find(start, mid, nums)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            find(mid + <span class="number">1</span>, end, nums)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    find(<span class="number">1</span>, nums.length - <span class="number">1</span>, nums);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目说明&quot;&gt;&lt;a href=&quot;#题目说明&quot; class=&quot;headerlink&quot; title=&quot;题目说明&quot;&gt;&lt;/a&gt;题目说明&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: [1,3,4,2,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: [3,1,3,4,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;说明：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不能更改原数组（假设数组是只读的）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;只能使用额外的 O(1) 的空间。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;时间复杂度小于 O(n2) 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;数组中只有一个重复的数字，但它可能不止重复出现一次。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/categories/Algorithm/"/>
    
      <category term="每日一题" scheme="https://www.zsfmyz.top/categories/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：leetcode_105. 从前序与中序遍历序列构造二叉树（前序找根，中序分左右，递归）</title>
    <link href="https://www.zsfmyz.top/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_105.%20%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E5%89%8D%E5%BA%8F%E6%89%BE%E6%A0%B9%EF%BC%8C%E4%B8%AD%E5%BA%8F%E5%88%86%E5%B7%A6%E5%8F%B3%EF%BC%8C%E9%80%92%E5%BD%92%EF%BC%89/"/>
    <id>https://www.zsfmyz.top/Algorithm/每日一题/JavaScript：leetcode_105. 从前序与中序遍历序列构造二叉树（前序找根，中序分左右，递归）/</id>
    <published>2020-05-22T09:59:13.000Z</published>
    <updated>2020-05-28T01:59:50.414Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">根据一棵树的前序遍历与中序遍历构造二叉树。</span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">你可以假设树中没有重复的元素。</span><br><span class="line"></span><br><span class="line">例如，给出</span><br><span class="line"></span><br><span class="line">前序遍历 preorder = [3,9,20,15,7]</span><br><span class="line">中序遍历 inorder = [9,3,15,20,7]</span><br><span class="line">返回如下的二叉树：</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li><code>前序找根</code>，<code>中序分左右</code>，<code>递归</code>即可。</li><li>根为前序第一个值。<code>let root = new TreeNode(preorder[0]);</code></li><li>找到根在中序中的位置<code>let rootIndex = inorder.indexOf(root.val);</code></li><li><p>左右分开。left为左中序，right为右中序，preLeft为左前序，preRight为右</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> left = inorder.slice(<span class="number">0</span>, rootIndex);</span><br><span class="line"> <span class="keyword">let</span> right = inorder.slice(rootIndex + <span class="number">1</span>, inorder.length);</span><br><span class="line"> <span class="keyword">let</span> preLeft = preorder.slice(<span class="number">1</span>, left.length + <span class="number">1</span>);</span><br><span class="line"> <span class="keyword">let</span> preRight = preorder.slice(left.length + <span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>找到左右各自的前中序列。即可递归找根了。</p><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">preorder</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">inorder</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buildTree = <span class="function"><span class="keyword">function</span> <span class="title">buildTree</span>(<span class="params">preorder, inorder</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (preorder.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> root = <span class="keyword">new</span> TreeNode(preorder[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (preorder.length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> rootIndex = inorder.indexOf(root.val);</span><br><span class="line">    <span class="keyword">let</span> left = inorder.slice(<span class="number">0</span>, rootIndex);</span><br><span class="line">    <span class="keyword">let</span> right = inorder.slice(rootIndex + <span class="number">1</span>, inorder.length);</span><br><span class="line">    <span class="keyword">let</span> preLeft = preorder.slice(<span class="number">1</span>, left.length + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> preRight = preorder.slice(left.length + <span class="number">1</span>);</span><br><span class="line">    left.length &amp;&amp; (root.left = buildTree(preLeft, left));</span><br><span class="line">    right.length &amp;&amp; (root.right = buildTree(preRight, right));</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目说明&quot;&gt;&lt;a href=&quot;#题目说明&quot; class=&quot;headerlink&quot; title=&quot;题目说明&quot;&gt;&lt;/a&gt;题目说明&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;根据一棵树的前序遍历与中序遍历构造二叉树。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注意:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你可以假设树中没有重复的元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例如，给出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;前序遍历 preorder = [3,9,20,15,7]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;中序遍历 inorder = [9,3,15,20,7]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;返回如下的二叉树：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   / \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  9  20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   15   7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/categories/Algorithm/"/>
    
      <category term="每日一题" scheme="https://www.zsfmyz.top/categories/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：leetcode_5. 最长回文子串</title>
    <link href="https://www.zsfmyz.top/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_5.%20%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <id>https://www.zsfmyz.top/Algorithm/每日一题/JavaScript：leetcode_5. 最长回文子串/</id>
    <published>2020-05-22T09:59:13.000Z</published>
    <updated>2020-05-28T02:00:51.494Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入: &quot;babad&quot;</span><br><span class="line">输出: &quot;bab&quot;</span><br><span class="line">注意: &quot;aba&quot; 也是一个有效答案。</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入: &quot;cbbd&quot;</span><br><span class="line">输出: &quot;bb&quot;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li>遍历字符串，从i开始向左右扩展对比 <code>i--, i++</code> 是否相同，过程求出最大值。</li><li>以上仅检测奇数回文即：<code>&quot;cbabc&quot;</code>而不能检测<code>cbbc</code></li><li>对原字符串进行改造例如<code>&quot;cbbc&quot;</code> =&gt; <code>&quot;c#b#b#c&quot;</code>这样就可以以#为中心对比了。（奇数长度例如<code>&quot;cbabc&quot;</code> =&gt; <code>c#b#a#b#c</code>并不会被#影响，所以不用担心破坏了对比结构。）</li><li>对比过程中要注意不要让<code>#b#</code>把<code>b#b</code>这样的情况给顶替了。相同长度时要取末尾为字母的。</li></ol><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    s = s.split(<span class="string">''</span>).join(<span class="string">'#'</span>);</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> end = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> left = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> right = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(left) === s.charAt(right)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (max &lt; (right - left) &amp;&amp; s.charAt(right) !== <span class="string">'#'</span>) &#123;</span><br><span class="line">                    max = right - left;</span><br><span class="line">                    start = left;</span><br><span class="line">                    end = right;</span><br><span class="line">                &#125;</span><br><span class="line">                right++;</span><br><span class="line">                left--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.slice(start, end + <span class="number">1</span>).split(<span class="string">'#'</span>).join(<span class="string">''</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目说明&quot;&gt;&lt;a href=&quot;#题目说明&quot; class=&quot;headerlink&quot; title=&quot;题目说明&quot;&gt;&lt;/a&gt;题目说明&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例 1：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: &amp;quot;babad&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: &amp;quot;bab&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注意: &amp;quot;aba&amp;quot; 也是一个有效答案。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例 2：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: &amp;quot;cbbd&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: &amp;quot;bb&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/categories/Algorithm/"/>
    
      <category term="每日一题" scheme="https://www.zsfmyz.top/categories/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：leecode_1371. 每个元音包含偶数次的最长子字符串（前缀和）</title>
    <link href="https://www.zsfmyz.top/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleecode_1371.%20%E6%AF%8F%E4%B8%AA%E5%85%83%E9%9F%B3%E5%8C%85%E5%90%AB%E5%81%B6%E6%95%B0%E6%AC%A1%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88%E5%89%8D%E7%BC%80%E5%92%8C%EF%BC%89/"/>
    <id>https://www.zsfmyz.top/Algorithm/每日一题/JavaScript：leecode_1371. 每个元音包含偶数次的最长子字符串（前缀和）/</id>
    <published>2020-05-21T09:59:13.000Z</published>
    <updated>2020-05-28T02:01:03.395Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">给你一个字符串 s ，请你返回满足以下条件的最长子字符串的长度：每个元音字母，即 &apos;a&apos;，&apos;e&apos;，&apos;i&apos;，&apos;o&apos;，&apos;u&apos; ，在子字符串中都恰好出现了偶数次。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：s = &quot;eleetminicoworoep&quot;</span><br><span class="line">输出：13</span><br><span class="line">解释：最长子字符串是 &quot;leetminicowor&quot; ，它包含 e，i，o 各 2 个，以及 0 个 a，u 。</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：s = &quot;leetcodeisgreat&quot;</span><br><span class="line">输出：5</span><br><span class="line">解释：最长子字符串是 &quot;leetc&quot; ，其中包含 2 个 e 。</span><br><span class="line">示例 3：</span><br><span class="line"></span><br><span class="line">输入：s = &quot;bcbcbc&quot;</span><br><span class="line">输出：6</span><br><span class="line">解释：这个示例中，字符串 &quot;bcbcbc&quot; 本身就是最长的，因为所有的元音 a，e，i，o，u 都出现了 0 次。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">1 &lt;= s.length &lt;= 5 x 10^5</span><br><span class="line">s 只包含小写英文字母。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li>首先要理解这个题。这道题明显还是跟<code>前缀</code>有关系的东西，毫无疑问肯定又需要用到<code>动态规划</code>保存状态。</li><li>我们先来看子字符串中的各元音字母的个数，题目呢，要求的是<code>偶数次</code>，那么我们的<code>a，e，i，o，u</code>的出现次数是不是可以转化为出现<code>次数</code>的<code>奇偶性</code>呢？即<ol><li><code>nums % 2 === 1 是奇数次</code></li><li><code>nums % 2 === 0 是偶数次</code></li></ol></li><li><p>那么我们的<code>a，e，i，o，u</code>的各自状态就只有两种情况啦，<code>0 or 1</code>，例如 </p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'a'</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">'e'</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">'o'</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">'i'</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">'u'</span>: <span class="number">0</span></span><br></pre></td></tr></table></figure><p> 那我们现在用二进制来表示一下它：<code>00100</code>， 那么类似于这样的表示有几种情况呢？ <code>2 x 2 x 2 x 2 x 2 = 32</code>仅仅只有<code>32</code>种情况，就可以完全表示元音字母的<code>所有状态</code>了。那么我们声明一个长度为<code>32</code>的<code>status</code>数组，值都初始化为<code>-1</code>。</p></li><li>按照正常思维，符合条件的情况有两种子字符串，一是<code>从头开始</code>的，一个是从<code>中间开始</code>的。<ol><li>从头开始的很容易理解（假设首位下标为<code>0，i</code>），只要从<code>0到i</code>，状态为<code>00000</code>就可以了。代表都是偶数次出现。</li><li>从中间开始的话（假设首位下标为<code>j，i</code>），是从<code>j到i</code>这个子字符串的状态为<code>00000</code></li><li>那什么情况下子字符串的状态可以是00000呢？ 那当然是i，j各自的状态一致的时候，因为同状态互减才会为0，例如<code>01000 - 01000 = 00000</code></li><li>so，01000在字串中是会出现多次的，因为<code>2%2 == 0， 4%2===0</code>状态也是会重复的，所以我们想求出这个状态之间的最大间距，就要记录该状态<code>最早出现</code>的下标。</li></ol></li><li>好了，理解了这个状态之后，我们明确了我们要记录的值，记录该位置的状态下的最早下标。</li><li>我们是不是可以记录一下，从<code>第1个字母开始到第i个字母之间</code>的各元音<code>状态</code>呢？</li><li>例如：<code>&quot;eleetminicoworoep&quot;</code> 对应的状态数组<code>[01000,01000,00000,01000,01000,01000,01100...]</code></li><li><code>i 为 0，1，3，4，5</code> 的时候状态都一致，那么我们只需要记录<code>status[8] = 0,</code>取最小值即可。</li><li>所以<code>status</code>数组记录的是32种状态各自在字符串中<code>最早出现的下标</code></li><li>最后我们遍历字符串，求出每一位的<code>状态key(例如01000)</code> ，根据这个<code>key和下标i</code>，我们去<code>status</code>里面找<code>key</code>的<code>最小下标status[key]</code>，然后用<code>i - status[key]</code>求出距离长度。若<code>status[key]为-1</code>，则将下标i赋值给<code>status[key] = i</code></li></ol><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findTheLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hash = &#123;</span><br><span class="line">        <span class="string">'a'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'e'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'o'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'i'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'u'</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> status = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">32</span>).fill(<span class="number">-1</span>);</span><br><span class="line">    status[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> key = <span class="number">0</span>;</span><br><span class="line">        hash[s.charAt(i)] !== <span class="literal">undefined</span> ? hash[s.charAt(i)] = (hash[s.charAt(i)] + <span class="number">1</span>) % <span class="number">2</span> : <span class="string">''</span>;</span><br><span class="line">        key += hash[<span class="string">'a'</span>] + (hash[<span class="string">'e'</span>] &lt;&lt; <span class="number">1</span>) + (hash[<span class="string">'i'</span>] &lt;&lt; <span class="number">2</span>) + (hash[<span class="string">'o'</span>] &lt;&lt; <span class="number">3</span>) + (hash[<span class="string">'u'</span>] &lt;&lt; <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">if</span> (status[key] === <span class="number">-1</span>) &#123;</span><br><span class="line">            status[key] = i + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            max = <span class="built_in">Math</span>.max(max, i + <span class="number">1</span> - status[key])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目说明&quot;&gt;&lt;a href=&quot;#题目说明&quot; class=&quot;headerlink&quot; title=&quot;题目说明&quot;&gt;&lt;/a&gt;题目说明&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给你一个字符串 s ，请你返回满足以下条件的最长子字符串的长度：每个元音字母，即 &amp;apos;a&amp;apos;，&amp;apos;e&amp;apos;，&amp;apos;i&amp;apos;，&amp;apos;o&amp;apos;，&amp;apos;u&amp;apos; ，在子字符串中都恰好出现了偶数次。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例 1：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入：s = &amp;quot;eleetminicoworoep&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：最长子字符串是 &amp;quot;leetminicowor&amp;quot; ，它包含 e，i，o 各 2 个，以及 0 个 a，u 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例 2：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入：s = &amp;quot;leetcodeisgreat&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：最长子字符串是 &amp;quot;leetc&amp;quot; ，其中包含 2 个 e 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例 3：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入：s = &amp;quot;bcbcbc&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：这个示例中，字符串 &amp;quot;bcbcbc&amp;quot; 本身就是最长的，因为所有的元音 a，e，i，o，u 都出现了 0 次。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;提示：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 &amp;lt;= s.length &amp;lt;= 5 x 10^5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s 只包含小写英文字母。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/categories/Algorithm/"/>
    
      <category term="每日一题" scheme="https://www.zsfmyz.top/categories/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：leetcode_680. 验证回文字符串 Ⅱ（双指针）</title>
    <link href="https://www.zsfmyz.top/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_680.%20%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2%20%E2%85%A1%EF%BC%88%E5%8F%8C%E6%8C%87%E9%92%88%EF%BC%89/"/>
    <id>https://www.zsfmyz.top/Algorithm/每日一题/JavaScript：leetcode_680. 验证回文字符串 Ⅱ（双指针）/</id>
    <published>2020-05-19T09:59:13.000Z</published>
    <updated>2020-05-28T01:58:52.137Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: &quot;aba&quot;</span><br><span class="line">输出: True</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: &quot;abca&quot;</span><br><span class="line">输出: True</span><br><span class="line">解释: 你可以删除c字符。</span><br><span class="line">注意:</span><br><span class="line"></span><br><span class="line">字符串只包含从 a-z 的小写字母。字符串的最大长度是50000。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li>回文字符串，字符串<code>正序反序都一样</code>。同样也是<code>对称</code>的。</li><li>正反指针，一个从<code>头</code>，一个从<code>末尾</code>，对比。</li><li>找到不同的位置，去掉该位置的值。（可能为<code>i</code>，也可能为<code>length-1-i</code>）</li><li>若两种情况中<code>有一种</code>是回文。那就返回<code>true</code>。否则返回<code>false</code></li><li>找不到不同的值当然也返回<code>true</code></li></ol><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> validPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sArr = s.split(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= (sArr.length &gt;&gt; <span class="number">1</span>); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sArr[i] !== sArr[sArr.length - i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">let</span> f = [...sArr];</span><br><span class="line">            f.splice(i,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">let</span> f2 = [...sArr]; </span><br><span class="line">            f2.splice(sArr.length - i - <span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> ((f+<span class="string">''</span>) == ([...f].reverse()+<span class="string">''</span>) || (f2 + <span class="string">''</span>) == ([...f2].reverse() + <span class="string">''</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目说明&quot;&gt;&lt;a href=&quot;#题目说明&quot; class=&quot;headerlink&quot; title=&quot;题目说明&quot;&gt;&lt;/a&gt;题目说明&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: &amp;quot;aba&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: True&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: &amp;quot;abca&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: True&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释: 你可以删除c字符。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注意:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;字符串只包含从 a-z 的小写字母。字符串的最大长度是50000。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/categories/Algorithm/"/>
    
      <category term="每日一题" scheme="https://www.zsfmyz.top/categories/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：leetcode_152. 乘积最大子数组（动态规划）</title>
    <link href="https://www.zsfmyz.top/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_152.%20%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89/"/>
    <id>https://www.zsfmyz.top/Algorithm/每日一题/JavaScript：leetcode_152. 乘积最大子数组（动态规划）/</id>
    <published>2020-05-18T09:59:13.000Z</published>
    <updated>2020-05-28T01:59:36.282Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [2,3,-2,4]</span><br><span class="line">输出: 6</span><br><span class="line">解释: 子数组 [2,3] 有最大乘积 6。</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: [-2,0,-1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li>该题与之前所写的<a href="https://blog.csdn.net/lunhui1994_/article/details/106136488" target="_blank" rel="noopener">560.和为K的子数组</a>很相似，解法也都是一样的。</li><li>依旧是对前缀进行操作。不同的是，我们这次不需要保留所有的结果，只需要保留本次结果的最大值<code>nowMax</code> 和最小值<code>nowMin</code> 。取min主要是为了复数的情况。</li><li>我们依赖于上一次的状态，求出本次的最大最小值。然后传入下一次状态。<pre><code>1. `nowMax = Math.max(res[0] * nums[i], res[1] * nums[i], nums[i]);` 2. `nowMin = Math.min(res[0] * nums[i], res[1] * nums[i], nums[i]);`   3. `res = [nowMax, nowMin  ]`</code></pre></li><li>在此过程中我们可以求出最大值max</li></ol><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProduct = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!nums.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> max = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> min = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> res = [nums[<span class="number">0</span>], nums[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span> ; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> nowMax = <span class="built_in">Math</span>.max(res[<span class="number">0</span>] * nums[i], res[<span class="number">1</span>] * nums[i], nums[i]);</span><br><span class="line">        <span class="keyword">let</span> nowMin = <span class="built_in">Math</span>.min(res[<span class="number">0</span>] * nums[i], res[<span class="number">1</span>] * nums[i], nums[i]);</span><br><span class="line">        max = <span class="built_in">Math</span>.max(nowMax, max);</span><br><span class="line">        <span class="comment">// min = Math.min(nowMin, min);</span></span><br><span class="line">        res = [nowMax, nowMin];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目说明&quot;&gt;&lt;a href=&quot;#题目说明&quot; class=&quot;headerlink&quot; title=&quot;题目说明&quot;&gt;&lt;/a&gt;题目说明&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: [2,3,-2,4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释: 子数组 [2,3] 有最大乘积 6。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: [-2,0,-1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/categories/Algorithm/"/>
    
      <category term="每日一题" scheme="https://www.zsfmyz.top/categories/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：leetcode_210. 课程表 II</title>
    <link href="https://www.zsfmyz.top/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_210.%20%E8%AF%BE%E7%A8%8B%E8%A1%A8%20II%EF%BC%88BFS%EF%BC%89/"/>
    <id>https://www.zsfmyz.top/Algorithm/每日一题/JavaScript：leetcode_210. 课程表 II（BFS）/</id>
    <published>2020-05-17T09:59:13.000Z</published>
    <updated>2020-05-28T01:59:20.314Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">现在你总共有 n 门课需要选，记为 0 到 n-1。</span><br><span class="line"></span><br><span class="line">在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]</span><br><span class="line"></span><br><span class="line">给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。</span><br><span class="line"></span><br><span class="line">可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: 2, [[1,0]] </span><br><span class="line">输出: [0,1]</span><br><span class="line">解释: 总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: 4, [[1,0],[2,0],[3,1],[3,2]]</span><br><span class="line">输出: [0,1,2,3] or [0,2,1,3]</span><br><span class="line">解释: 总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。</span><br><span class="line">     因此，一个正确的课程顺序是 [0,1,2,3] 。另一个正确的排序是 [0,2,1,3] 。</span><br><span class="line">说明:</span><br><span class="line"></span><br><span class="line">输入的先决条件是由边缘列表表示的图形，而不是邻接矩阵。详情请参见图的表示法。</span><br><span class="line">你可以假定输入的先决条件中没有重复的边。</span><br><span class="line">提示:</span><br><span class="line"></span><br><span class="line">这个问题相当于查找一个循环是否存在于有向图中。如果存在循环，则不存在拓扑排序，因此不可能选取所有课程进行学习。</span><br><span class="line">通过 DFS 进行拓扑排序 - 一个关于Coursera的精彩视频教程（21分钟），介绍拓扑排序的基本概念。</span><br><span class="line">拓扑排序也可以通过 BFS 完成。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li>首先要理解题意，该题的目的是要我们按依赖顺序排序。</li><li>二维数组中，首位表示一门课程，数组余下的值表示，学习该课程之前所要完成的。例如[3,1],[3,2] 表示，最后的序列，<code>3要在2和1</code>的后面</li><li>所以的我的做法是：以 <code>4, [[1,0],[2,0],[3,1],[3,2]]</code>为例<ol><li>利用hash收集每门课程的前置课程：<code>{1:[0], 2:[0], 3:[1, 2], 0:[]}</code>,[]表示该门课程不需要前序课程，这种课程就可以直接放入序列中了。</li><li>第二步要做两件事：1. 将<code>前序为空</code>的课程<code>放入序列</code>，<code>删除</code>已经放入序列的课程。2. <code>遍历hash</code>，在各课程的前序课程中，<code>去掉</code>已经<code>放入序列</code>的<code>课程</code>。结果：hash：<code>{1:[], 2:[], 3:[1, 2]}</code>,序列res：<code>[0]</code></li><li>while循环直到res中包含了所有的课程<code>res.length === numCourses</code></li></ol></li><li>以上是我们的大体思路，但是该题中还有一个问题。存在<code>循环前置</code>例如<code>[[0,1],[1,0]]</code>或者<code>[0,1][1,2][2,0]</code>等等，当课程存在这样的循环时，我们<code>无法得知</code>到底该<code>先学习</code>哪门课程。需要直接返回[]代表无法完成。</li><li>该问题也很好解决，当我们<code>遍历hash找不到</code>任何一个前置课程为<code>[]</code>的课程时，表示存在循环引用了！这时候就可以返回<code>[]</code>了</li></ol><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">numCourses</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">prerequisites</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findOrder = <span class="function"><span class="keyword">function</span>(<span class="params">numCourses, prerequisites</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hash = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="comment">//初始化hash表</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">        hash[i] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//收集课程的前置课程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; prerequisites.length; i++) &#123;</span><br><span class="line">        hash[prerequisites[i][<span class="number">0</span>]] = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([...hash[prerequisites[i][<span class="number">0</span>]], ...prerequisites[i].slice(<span class="number">1</span>)]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历直到res排满</span></span><br><span class="line">    <span class="keyword">while</span> (res.length &lt; numCourses) &#123;</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span>;<span class="comment">//标记hash中的前序为空的课程。</span></span><br><span class="line">        <span class="comment">//遍历hash，碰到前序为空的，放入res，然后删除，最后在hash各课程的前序中去掉它。</span></span><br><span class="line">        <span class="keyword">for</span> (key <span class="keyword">in</span> hash) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hash[key].length === <span class="number">0</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                res.push(<span class="built_in">Number</span>(key));</span><br><span class="line">                <span class="keyword">delete</span> hash[key]</span><br><span class="line">                <span class="keyword">for</span> (key2 <span class="keyword">in</span> hash) &#123;</span><br><span class="line">                    hash[key2].indexOf(<span class="built_in">Number</span>(key)) &gt; <span class="number">-1</span> ? hash[key2].splice(hash[key2].indexOf(<span class="built_in">Number</span>(key)), <span class="number">1</span>) : <span class="string">''</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果遍历hash没有找到前置为空的课程，表示存在循环，返回[]</span></span><br><span class="line">        <span class="keyword">if</span> (!count) &#123;</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目说明&quot;&gt;&lt;a href=&quot;#题目说明&quot; class=&quot;headerlink&quot; title=&quot;题目说明&quot;&gt;&lt;/a&gt;题目说明&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;现在你总共有 n 门课需要选，记为 0 到 n-1。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: 2, [[1,0]] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: [0,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释: 总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: 4, [[1,0],[2,0],[3,1],[3,2]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: [0,1,2,3] or [0,2,1,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释: 总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     因此，一个正确的课程顺序是 [0,1,2,3] 。另一个正确的排序是 [0,2,1,3] 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;说明:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入的先决条件是由边缘列表表示的图形，而不是邻接矩阵。详情请参见图的表示法。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你可以假定输入的先决条件中没有重复的边。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;提示:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这个问题相当于查找一个循环是否存在于有向图中。如果存在循环，则不存在拓扑排序，因此不可能选取所有课程进行学习。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;通过 DFS 进行拓扑排序 - 一个关于Coursera的精彩视频教程（21分钟），介绍拓扑排序的基本概念。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;拓扑排序也可以通过 BFS 完成。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/categories/Algorithm/"/>
    
      <category term="每日一题" scheme="https://www.zsfmyz.top/categories/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：leetcode_560. 和为K的子数组（前序和）</title>
    <link href="https://www.zsfmyz.top/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_560.%20%E5%92%8C%E4%B8%BAK%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%EF%BC%88%E5%89%8D%E5%BA%8F%E5%92%8C%EF%BC%89/"/>
    <id>https://www.zsfmyz.top/Algorithm/每日一题/JavaScript：leetcode_560. 和为K的子数组（前序和）/</id>
    <published>2020-05-15T09:59:13.000Z</published>
    <updated>2020-05-28T01:59:01.962Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。</span><br><span class="line"></span><br><span class="line">示例 1 :</span><br><span class="line"></span><br><span class="line">输入:nums = [1,1,1], k = 2</span><br><span class="line">输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。</span><br><span class="line">说明 :</span><br><span class="line"></span><br><span class="line">数组的长度为 [1, 20,000]。</span><br><span class="line">数组中元素的范围是 [-1000, 1000] ，且整数 k 的范围是 [-1e7, 1e7]。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li>该题可以使用前序和进行计算和为k的个数，也可以用动态规划的思路来理解</li><li>我们记录该元素之前的所有前缀和。</li><li>然后利用上一次的结果，分别加上该元素的值，获取该元素所有的前缀和。（注意不要漏掉只有本身的结果）。</li><li>判断前缀和集合中有几个值为k的情况。就是该元素对k个数的解。</li><li>记录所有元素的解的个数，求和。即为结果</li></ol><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> subarraySum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> kNums = nums[<span class="number">0</span>] === k ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> now = [nums[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        now = now.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (item + nums[i] == k) &#123;</span><br><span class="line">                kNums++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> item + nums[i];</span><br><span class="line">        &#125;)</span><br><span class="line">        nums[i] === k ? kNums++ : <span class="string">""</span></span><br><span class="line">        now.push(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> kNums</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目说明&quot;&gt;&lt;a href=&quot;#题目说明&quot; class=&quot;headerlink&quot; title=&quot;题目说明&quot;&gt;&lt;/a&gt;题目说明&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例 1 :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入:nums = [1,1,1], k = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;说明 :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;数组的长度为 [1, 20,000]。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;数组中元素的范围是 [-1000, 1000] ，且整数 k 的范围是 [-1e7, 1e7]。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/categories/Algorithm/"/>
    
      <category term="每日一题" scheme="https://www.zsfmyz.top/categories/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：leetcode_102. 二叉树的层序遍历（1. 层序遍历 + 深度遍历 2. 动态规划）</title>
    <link href="https://www.zsfmyz.top/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_102.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%881.%20%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%20+%20%E6%B7%B1%E5%BA%A6%E9%81%8D%E5%8E%86%202.%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89/"/>
    <id>https://www.zsfmyz.top/Algorithm/每日一题/JavaScript：leetcode_102. 二叉树的层序遍历（1. 层序遍历 + 深度遍历 2. 动态规划）/</id>
    <published>2020-05-14T09:59:13.000Z</published>
    <updated>2020-05-28T01:59:54.758Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">二叉树：[3,9,20,null,null,15,7],</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br><span class="line">返回其层次遍历结果：</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [9,20],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>该题对于我来说一共有两种思路，四种方案。<br><a id="more"></a></p><h3 id="解题思路一-（层序-深度）"><a href="#解题思路一-（层序-深度）" class="headerlink" title="解题思路一 （层序+深度）"></a>解题思路一 （层序+深度）</h3><ol><li>该题如果去掉分组，就是一个层序遍历的问题。加上分组也不过是多深度遍历一遍</li></ol><h3 id="代码实现一-1"><a href="#代码实现一-1" class="headerlink" title="代码实现一 (1)"></a>代码实现一 (1)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">         <span class="keyword">return</span> []</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">let</span> res = [];</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">deepNode</span>(<span class="params">root, node</span>) </span>&#123;</span><br><span class="line">         node.deep = root.deep + <span class="number">1</span>;</span><br><span class="line">         node.left &amp;&amp; deepNode(node, node.left);</span><br><span class="line">         node.right &amp;&amp; deepNode(node, node.right);</span><br><span class="line">     &#125;</span><br><span class="line">     deepNode(&#123;<span class="attr">deep</span>: <span class="number">-1</span>&#125;, root);</span><br><span class="line">     <span class="keyword">let</span> help = [root]</span><br><span class="line">     <span class="keyword">while</span>(help.length) &#123;</span><br><span class="line">         <span class="keyword">let</span> node = help.shift();</span><br><span class="line">         node.right &amp;&amp; help.unshift(node.right);</span><br><span class="line">         node.left &amp;&amp; help.unshift(node.left);</span><br><span class="line">         <span class="keyword">if</span> (!res[node.deep]) &#123;</span><br><span class="line">             res[node.deep] = [];</span><br><span class="line">         &#125;</span><br><span class="line">         res[node.deep].push(node.val);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> res;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h3 id="代码实现一-2"><a href="#代码实现一-2" class="headerlink" title="代码实现一 (2)"></a>代码实现一 (2)</h3><p>可以看到实现方式二去掉了while遍历，使用了一组数组。因为数组的顺序是<code>前序</code>遍历的结果，所以标记过每个节点的层级之后，我们其实按顺序将它分别放到二维数组中就可以了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> nodeList = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">deepNode</span>(<span class="params">root, node, nodeList</span>) </span>&#123;</span><br><span class="line">        node.deep = root.deep + <span class="number">1</span>;</span><br><span class="line">        nodeList.push(&#123;</span><br><span class="line">            val: node.val,</span><br><span class="line">            deep: node.deep</span><br><span class="line">        &#125;)</span><br><span class="line">        node.left &amp;&amp; deepNode(node, node.left, nodeList);</span><br><span class="line">        node.right &amp;&amp; deepNode(node, node.right, nodeList);</span><br><span class="line">    &#125;</span><br><span class="line">    deepNode(&#123;<span class="attr">deep</span>: <span class="number">-1</span>&#125;, root, nodeList);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nodeList.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!res[nodeList[i].deep]) &#123;</span><br><span class="line">            res[nodeList[i].deep] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        res[nodeList[i].deep].push(nodeList[i].val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="解题思路二-（递归-动态规划）"><a href="#解题思路二-（递归-动态规划）" class="headerlink" title="解题思路二 （递归 + 动态规划）"></a>解题思路二 （递归 + 动态规划）</h3><ol><li>首先我们可以这么想：根节点属于数组的第一层。</li><li>那么第二层该如何得到呢，其实就是按顺序遍历第一层所有节点的左右节点。</li><li>第三层就是遍历第二层的所有左右节点。</li><li>按照这样理解，这个题就更加清晰了。 </li><li>状态转移的方式是将<code>当前层</code>的所有<code>子节点</code>放入<code>下一层</code>。</li></ol><h3 id="代码实现二-1"><a href="#代码实现二-1" class="headerlink" title="代码实现二 (1)"></a>代码实现二 (1)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">         <span class="keyword">return</span> []</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">let</span> nodeList = [[root]];</span><br><span class="line">     <span class="keyword">let</span> res = [[root.val]];</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">deepNode</span>(<span class="params">nodeList, row, res</span>) </span>&#123;</span><br><span class="line">         nodeList[row + <span class="number">1</span>] = [];</span><br><span class="line">         res[row + <span class="number">1</span>] = [];</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nodeList[row].length; i++) &#123;</span><br><span class="line">             nodeList[row][i].left &amp;&amp; (nodeList[row + <span class="number">1</span>].push(nodeList[row][i].left), res[row+<span class="number">1</span>].push(nodeList[row][i].left.val));</span><br><span class="line">             nodeList[row][i].right &amp;&amp; (nodeList[row + <span class="number">1</span>].push(nodeList[row][i].right), res[row+<span class="number">1</span>].push(nodeList[row][i].right.val));</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (nodeList[row + <span class="number">1</span>].length) &#123;</span><br><span class="line">             deepNode(nodeList, row + <span class="number">1</span>, res)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     deepNode(nodeList, <span class="number">0</span>, res);</span><br><span class="line">     res.length -= <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">return</span> res;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h3 id="代码实现二-2"><a href="#代码实现二-2" class="headerlink" title="代码实现二 (2)"></a>代码实现二 (2)</h3><p>去掉了递归，使用了for循环。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> nodeList = [[root]];</span><br><span class="line">    <span class="keyword">let</span> res = [[root.val]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; ; i++) &#123;</span><br><span class="line">        nodeList[i + <span class="number">1</span>] = [];</span><br><span class="line">        res[i + <span class="number">1</span>] = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; nodeList[i].length; j++) &#123;</span><br><span class="line">            nodeList[i][j].left &amp;&amp; (nodeList[i + <span class="number">1</span>].push(nodeList[i][j].left), res[i + <span class="number">1</span>].push(nodeList[i][j].left.val));</span><br><span class="line">            nodeList[i][j].right &amp;&amp; (nodeList[i + <span class="number">1</span>].push(nodeList[i][j].right), res[i + <span class="number">1</span>].push(nodeList[i][j].right.val));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!nodeList[i + <span class="number">1</span>].length) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.length -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目说明&quot;&gt;&lt;a href=&quot;#题目说明&quot; class=&quot;headerlink&quot; title=&quot;题目说明&quot;&gt;&lt;/a&gt;题目说明&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;二叉树：[3,9,20,null,null,15,7],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   / \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  9  20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   15   7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;返回其层次遍历结果：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [3],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [9,20],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [15,7]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;该题对于我来说一共有两种思路，四种方案。&lt;br&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/categories/Algorithm/"/>
    
      <category term="每日一题" scheme="https://www.zsfmyz.top/categories/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：leetcode_136. 只出现一次的数字（异或运算）</title>
    <link href="https://www.zsfmyz.top/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_136.%20%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97%EF%BC%88%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97%EF%BC%89/"/>
    <id>https://www.zsfmyz.top/Algorithm/每日一题/JavaScript：leetcode_136. 只出现一次的数字（异或运算）/</id>
    <published>2020-05-14T09:59:13.000Z</published>
    <updated>2020-05-28T01:59:45.480Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line">你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [2,2,1]</span><br><span class="line">输出: 1</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: [4,1,2,1,2]</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><p>主要看一下题目的要求，线性复杂度，不适用额外的空间。</p><ol><li>这里可以巧妙的使用异或运算符的特性，<code>相同值的异或为0；所有的值，异或0都是本身。</code>数组的所有项向异或之后的结果就是只出现一次的值</li><li>我使用了reduce的数组方法，事实上可能也新开辟了空间，我们完全按照题意的话，可以直接使用数组第1项进行代替。</li></ol><h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nums.reduce(<span class="function">(<span class="params">sum, item, key, arr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (sum ^= item)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目说明&quot;&gt;&lt;a href=&quot;#题目说明&quot; class=&quot;headerlink&quot; title=&quot;题目说明&quot;&gt;&lt;/a&gt;题目说明&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;说明：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: [2,2,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: [4,1,2,1,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: 4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/categories/Algorithm/"/>
    
      <category term="每日一题" scheme="https://www.zsfmyz.top/categories/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：leetcode_155. 最小栈（辅助栈）</title>
    <link href="https://www.zsfmyz.top/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/JavaScript%EF%BC%9Aleetcode_155.%20%E6%9C%80%E5%B0%8F%E6%A0%88%EF%BC%88%E8%BE%85%E5%8A%A9%E6%A0%88%EF%BC%89/"/>
    <id>https://www.zsfmyz.top/Algorithm/每日一题/JavaScript：leetcode_155. 最小栈（辅助栈）/</id>
    <published>2020-05-12T09:59:13.000Z</published>
    <updated>2020-05-28T01:59:30.587Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。</span><br><span class="line"></span><br><span class="line">push(x) —— 将元素 x 推入栈中。</span><br><span class="line">pop() —— 删除栈顶的元素。</span><br><span class="line">top() —— 获取栈顶元素。</span><br><span class="line">getMin() —— 检索栈中的最小元素。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">[&quot;MinStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;getMin&quot;,&quot;pop&quot;,&quot;top&quot;,&quot;getMin&quot;]</span><br><span class="line">[[],[-2],[0],[-3],[],[],[],[]]</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[null,null,null,null,-3,null,0,-2]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">MinStack minStack = new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.getMin();   --&gt; 返回 -3.</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();      --&gt; 返回 0.</span><br><span class="line">minStack.getMin();   --&gt; 返回 -2.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">pop、top 和 getMin 操作总是在 非空栈 上调用。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路一"><a href="#解题思路一" class="headerlink" title="解题思路一"></a>解题思路一</h3><ol><li>首先确定栈的特点吧，<code>先进后出</code>，只能从<code>栈顶进栈出栈</code>，然后我们用数组来模拟他，将<code>数组末尾</code>当作<code>栈顶</code>，在此进栈出栈。</li><li>其实就是实现一个数组的<code>push，pop</code>功能，然后增加获取<code>最小值</code>的api和返回数组<code>最后一位</code>的api</li><li>由于最开始栈为空，所以栈是通过<code>push</code>，或者<code>pop</code>得到的。并且题目要求最小值要通过常数次操作得到，也就<code>getMin</code>的时间复杂度为<code>O(1)</code>.那我们可以在push，pop的过程中，确定最小值。<h3 id="代码实现一"><a href="#代码实现一" class="headerlink" title="代码实现一"></a>代码实现一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * initialize your data structure here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> MinStack = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">void</span> (</span><br><span class="line">            <span class="keyword">this</span>.stack = [],</span><br><span class="line">            <span class="keyword">this</span>.min = [<span class="built_in">Number</span>.MAX_SAFE_INTEGER], <span class="comment">//整数类型的最大值</span></span><br><span class="line">            <span class="keyword">this</span>.topValue = <span class="literal">null</span></span><br><span class="line">        );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">void</span> (<span class="keyword">this</span>.stack[<span class="keyword">this</span>.stack.length] = x, <span class="keyword">this</span>.topValue = x, <span class="keyword">this</span>.min[<span class="keyword">this</span>.min.length] = (x &gt; <span class="keyword">this</span>.min[<span class="keyword">this</span>.min.length - <span class="number">1</span>] ? <span class="keyword">this</span>.min[<span class="keyword">this</span>.min.length - <span class="number">1</span>] : x));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">void</span> (<span class="keyword">this</span>.stack.length -= <span class="number">1</span>, <span class="keyword">this</span>.topValue = <span class="keyword">this</span>.stack[<span class="keyword">this</span>.stack.length - <span class="number">1</span>], <span class="keyword">this</span>.min.length -= <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.top = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.topValue;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.getMin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.min[<span class="keyword">this</span>.min.length - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new MinStack()</span></span><br><span class="line"><span class="comment"> * obj.push(x)</span></span><br><span class="line"><span class="comment"> * obj.pop()</span></span><br><span class="line"><span class="comment"> * var param_3 = obj.top()</span></span><br><span class="line"><span class="comment"> * var param_4 = obj.getMin()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目说明&quot;&gt;&lt;a href=&quot;#题目说明&quot; class=&quot;headerlink&quot; title=&quot;题目说明&quot;&gt;&lt;/a&gt;题目说明&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;push(x) —— 将元素 x 推入栈中。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pop() —— 删除栈顶的元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;top() —— 获取栈顶元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getMin() —— 检索栈中的最小元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;quot;MinStack&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;getMin&amp;quot;,&amp;quot;pop&amp;quot;,&amp;quot;top&amp;quot;,&amp;quot;getMin&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[],[-2],[0],[-3],[],[],[],[]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[null,null,null,null,-3,null,0,-2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MinStack minStack = new MinStack();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;minStack.push(-2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;minStack.push(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;minStack.push(-3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;minStack.getMin();   --&amp;gt; 返回 -3.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;minStack.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;minStack.top();      --&amp;gt; 返回 0.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;minStack.getMin();   --&amp;gt; 返回 -2.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;提示：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pop、top 和 getMin 操作总是在 非空栈 上调用。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/categories/Algorithm/"/>
    
      <category term="每日一题" scheme="https://www.zsfmyz.top/categories/Algorithm/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Algorithm" scheme="https://www.zsfmyz.top/tags/Algorithm/"/>
    
  </entry>
  
</feed>
